export default [
    {
        statements: [
            'CREATE TABLE "users" (\n  "id" TEXT NOT NULL,\n  "first_name" TEXT NOT NULL,\n  "last_name" TEXT NOT NULL,\n  "phone" TEXT NOT NULL,\n  "email" TEXT NOT NULL,\n  "email_verified_at" TEXT(0),\n  "password" TEXT NOT NULL,\n  "remember_token" TEXT,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "users_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "users_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "password_reset_tokens" (\n  "email" TEXT NOT NULL,\n  "token" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  CONSTRAINT "password_reset_tokens_pkey" PRIMARY KEY ("email")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "sessions" (\n  "id" TEXT NOT NULL,\n  "user_id" TEXT,\n  "ip_address" TEXT,\n  "user_agent" TEXT,\n  "payload" TEXT NOT NULL,\n  "last_activity" INTEGER NOT NULL,\n  CONSTRAINT "sessions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE,\n  CONSTRAINT "sessions_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "sessions_last_activity_index" ON "sessions" ("last_activity" ASC);\n',
            'CREATE INDEX "sessions_user_id_index" ON "sessions" ("user_id" ASC);\n',
            'CREATE TABLE "cache" (\n  "key" TEXT NOT NULL,\n  "value" TEXT NOT NULL,\n  "expiration" INTEGER NOT NULL,\n  CONSTRAINT "cache_pkey" PRIMARY KEY ("key")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "cache_locks" (\n  "key" TEXT NOT NULL,\n  "owner" TEXT NOT NULL,\n  "expiration" INTEGER NOT NULL,\n  CONSTRAINT "cache_locks_pkey" PRIMARY KEY ("key")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "tenants" (\n  "id" TEXT NOT NULL,\n  "data" TEXT_JSON,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "tenants_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "domains" (\n  "id" TEXT NOT NULL,\n  "domain" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "domains_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT "domains_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "permissions" (\n  "uuid" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "guard_name" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "permissions_pkey" PRIMARY KEY ("uuid")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "roles" (\n  "uuid" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "guard_name" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "roles_pkey" PRIMARY KEY ("uuid")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "model_has_permissions" (\n  "permission_id" TEXT NOT NULL,\n  "model_type" TEXT NOT NULL,\n  "model_uuid" TEXT NOT NULL,\n  CONSTRAINT "model_has_permissions_permission_id_fkey" FOREIGN KEY ("permission_id") REFERENCES "permissions" ("uuid") ON DELETE CASCADE,\n  CONSTRAINT "model_has_permissions_pkey" PRIMARY KEY ("permission_id", "model_uuid", "model_type")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "model_has_permissions_model_id_model_type_index" ON "model_has_permissions" ("model_uuid" ASC, "model_type" ASC);\n',
            'CREATE TABLE "model_has_roles" (\n  "role_id" TEXT NOT NULL,\n  "model_type" TEXT NOT NULL,\n  "model_uuid" TEXT NOT NULL,\n  CONSTRAINT "model_has_roles_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "roles" ("uuid") ON DELETE CASCADE,\n  CONSTRAINT "model_has_roles_pkey" PRIMARY KEY ("role_id", "model_uuid", "model_type")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "model_has_roles_model_id_model_type_index" ON "model_has_roles" ("model_uuid" ASC, "model_type" ASC);\n',
            'CREATE TABLE "role_has_permissions" (\n  "permission_id" TEXT NOT NULL,\n  "role_id" TEXT NOT NULL,\n  CONSTRAINT "role_has_permissions_permission_id_fkey" FOREIGN KEY ("permission_id") REFERENCES "permissions" ("uuid") ON DELETE CASCADE,\n  CONSTRAINT "role_has_permissions_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "roles" ("uuid") ON DELETE CASCADE,\n  CONSTRAINT "role_has_permissions_pkey" PRIMARY KEY ("permission_id", "role_id")\n) WITHOUT ROWID;\n',
            'CREATE TABLE "personal_access_tokens" (\n  "id" TEXT NOT NULL,\n  "tokenable_type" TEXT NOT NULL,\n  "tokenable_id" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "token" TEXT NOT NULL,\n  "abilities" TEXT,\n  "last_used_at" TEXT(0),\n  "expires_at" TEXT(0),\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "personal_access_tokens_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "personal_access_tokens_tokenable_type_tokenable_id_index" ON "personal_access_tokens" ("tokenable_type" ASC, "tokenable_id" ASC);\n',
            'CREATE TABLE "media" (\n  "id" TEXT NOT NULL,\n  "model_type" TEXT NOT NULL,\n  "model_id" INTEGER NOT NULL,\n  "uuid" TEXT,\n  "collection_name" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "file_name" TEXT NOT NULL,\n  "mime_type" TEXT,\n  "disk" TEXT NOT NULL,\n  "conversions_disk" TEXT,\n  "size" INTEGER NOT NULL,\n  "manipulations" TEXT_JSON NOT NULL,\n  "custom_properties" TEXT_JSON NOT NULL,\n  "generated_conversions" TEXT_JSON NOT NULL,\n  "responsive_images" TEXT_JSON NOT NULL,\n  "order_column" INTEGER,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "media_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "media_model_type_model_id_index" ON "media" ("model_type" ASC, "model_id" ASC);\n',
            'CREATE INDEX "media_order_column_index" ON "media" ("order_column" ASC);\n',
            'CREATE TABLE "settings" (\n  "id" TEXT NOT NULL,\n  "user_id" TEXT NOT NULL,\n  "theme" TEXT NOT NULL,\n  "color_scheme" TEXT NOT NULL,\n  "layout" TEXT NOT NULL,\n  "appearance" TEXT NOT NULL,\n  "notifications" TEXT_JSON,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "settings_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users" ("id"),\n  CONSTRAINT "settings_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_settings_id" ON "settings" ("id" ASC);\n',
            'CREATE INDEX "idx_settings_user_id" ON "settings" ("user_id" ASC);\n',
            'CREATE TABLE "families" (\n  "id" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "report" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "families_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT "families_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_families_id" ON "families" ("id" ASC);\n',
            'CREATE INDEX "idx_families_name" ON "families" ("name" ASC);\n',
            'CREATE INDEX "idx_families_tenant_id" ON "families" ("tenant_id" ASC);\n',
            'CREATE TABLE "incomes" (\n  "id" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  CONSTRAINT "incomes_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_incomes_id" ON "incomes" ("id" ASC);\n',
            'CREATE INDEX "idx_incomes_name" ON "incomes" ("name" ASC);\n',
            'CREATE TABLE "sponsors" (\n  "id" TEXT NOT NULL,\n  "zone_id" TEXT NOT NULL,\n  "file_number" INTEGER NOT NULL,\n  "start_date" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "address" TEXT NOT NULL,\n  "phone_number" TEXT NOT NULL,\n  "sponsorship_type" TEXT NOT NULL,\n  "birth_date" TEXT NOT NULL,\n  "father_name" TEXT NOT NULL,\n  "mother_name" TEXT NOT NULL,\n  "birth_certificate_number" TEXT NOT NULL,\n  "academic_level" TEXT NOT NULL,\n  "function" TEXT NOT NULL,\n  "health_status" TEXT NOT NULL,\n  "diploma" TEXT,\n  "card_number" TEXT,\n  "tenant_id" TEXT NOT NULL,\n  "created_by" TEXT NOT NULL,\n  "deleted_by" TEXT,\n  "deleted_at" TEXT(0),\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "sponsors_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "users" ("id"),\n  CONSTRAINT "sponsors_deleted_by_fkey" FOREIGN KEY ("deleted_by") REFERENCES "users" ("id"),\n  CONSTRAINT "sponsors_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "sponsors_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_sponsors_created_by" ON "sponsors" ("created_by" ASC);\n',
            'CREATE INDEX "idx_sponsors_deleted_by" ON "sponsors" ("deleted_by" ASC);\n',
            'CREATE INDEX "idx_sponsors_tenant_id" ON "sponsors" ("tenant_id" ASC);\n',
            'CREATE INDEX "idx_sponsors_zone_id" ON "sponsors" ("zone_id" ASC);\n',
            'CREATE TABLE "second_sponsors" (\n  "id" TEXT NOT NULL,\n  "first_name" TEXT NOT NULL,\n  "last_name" TEXT NOT NULL,\n  "degree_of_kinship" TEXT NOT NULL,\n  "phone_number" TEXT NOT NULL,\n  "address" TEXT NOT NULL,\n  "income" REAL NOT NULL,\n  "family_id" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "deleted_at" TEXT(0),\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "second_sponsors_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "families" ("id") ON DELETE CASCADE,\n  CONSTRAINT "second_sponsors_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "second_sponsors_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_second_sponsors_address" ON "second_sponsors" ("address" ASC);\n',
            'CREATE INDEX "idx_second_sponsors_family_id" ON "second_sponsors" ("family_id" ASC);\n',
            'CREATE INDEX "idx_second_sponsors_id" ON "second_sponsors" ("id" ASC);\n',
            'CREATE INDEX "idx_second_sponsors_income" ON "second_sponsors" ("income" ASC);\n',
            'CREATE INDEX "idx_second_sponsors_name" ON "second_sponsors" ("first_name" ASC, "last_name" ASC);\n',
            'CREATE INDEX "idx_second_sponsors_phone_number" ON "second_sponsors" ("phone_number" ASC);\n',
            'CREATE INDEX "idx_second_sponsors_tenant_id" ON "second_sponsors" ("tenant_id" ASC);\n',
            'CREATE TABLE "spouses" (\n  "id" TEXT NOT NULL,\n  "first_name" TEXT NOT NULL,\n  "last_name" TEXT NOT NULL,\n  "birth_date" TEXT NOT NULL,\n  "death_date" TEXT NOT NULL,\n  "function" TEXT NOT NULL,\n  "income" REAL NOT NULL,\n  "family_id" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "spouses_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "families" ("id") ON DELETE CASCADE,\n  CONSTRAINT "spouses_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "spouses_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_spouses_birth_date" ON "spouses" ("birth_date" ASC);\n',
            'CREATE INDEX "idx_spouses_death_date" ON "spouses" ("death_date" ASC);\n',
            'CREATE INDEX "idx_spouses_family_id" ON "spouses" ("family_id" ASC);\n',
            'CREATE INDEX "idx_spouses_function" ON "spouses" ("function" ASC);\n',
            'CREATE INDEX "idx_spouses_id" ON "spouses" ("id" ASC);\n',
            'CREATE INDEX "idx_spouses_income" ON "spouses" ("income" ASC);\n',
            'CREATE INDEX "idx_spouses_name" ON "spouses" ("first_name" ASC, "last_name" ASC);\n',
            'CREATE INDEX "idx_spouses_tenant_id" ON "spouses" ("tenant_id" ASC);\n',
            'CREATE TABLE "orphans" (\n  "id" TEXT NOT NULL,\n  "first_name" TEXT NOT NULL,\n  "last_name" TEXT NOT NULL,\n  "birth_date" TEXT NOT NULL,\n  "family_status" TEXT NOT NULL,\n  "health_status" TEXT NOT NULL,\n  "academic_level" TEXT NOT NULL,\n  "shoes_size" TEXT NOT NULL,\n  "pants_size" TEXT NOT NULL,\n  "shirt_size" TEXT NOT NULL,\n  "note" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "family_id" TEXT NOT NULL,\n  "created_by" TEXT NOT NULL,\n  "deleted_by" TEXT,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "orphans_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "users" ("id"),\n  CONSTRAINT "orphans_deleted_by_fkey" FOREIGN KEY ("deleted_by") REFERENCES "users" ("id"),\n  CONSTRAINT "orphans_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "families" ("id"),\n  CONSTRAINT "orphans_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "orphans_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_orphans_academic_level" ON "orphans" ("academic_level" ASC);\n',
            'CREATE INDEX "idx_orphans_birth_date" ON "orphans" ("birth_date" ASC);\n',
            'CREATE INDEX "idx_orphans_created_by" ON "orphans" ("created_by" ASC);\n',
            'CREATE INDEX "idx_orphans_deleted_by" ON "orphans" ("deleted_by" ASC);\n',
            'CREATE INDEX "idx_orphans_family_id" ON "orphans" ("family_id" ASC);\n',
            'CREATE INDEX "idx_orphans_family_status" ON "orphans" ("family_status" ASC);\n',
            'CREATE INDEX "idx_orphans_health_status" ON "orphans" ("health_status" ASC);\n',
            'CREATE INDEX "idx_orphans_id" ON "orphans" ("id" ASC);\n',
            'CREATE INDEX "idx_orphans_name" ON "orphans" ("first_name" ASC, "last_name" ASC);\n',
            'CREATE INDEX "idx_orphans_note" ON "orphans" ("note" ASC);\n',
            'CREATE INDEX "idx_orphans_pants_size" ON "orphans" ("pants_size" ASC);\n',
            'CREATE INDEX "idx_orphans_shirt_size" ON "orphans" ("shirt_size" ASC);\n',
            'CREATE INDEX "idx_orphans_shoes_size" ON "orphans" ("shoes_size" ASC);\n',
            'CREATE INDEX "idx_orphans_tenant_id" ON "orphans" ("tenant_id" ASC);\n',
            'CREATE TABLE "housings" (\n  "id" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  CONSTRAINT "housings_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_housings_id" ON "housings" ("id" ASC);\n',
            'CREATE INDEX "idx_housings_name" ON "housings" ("name" ASC);\n',
            'CREATE TABLE "furnishings" (\n  "id" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  CONSTRAINT "furnishings_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_furnishings_id" ON "furnishings" ("id" ASC);\n',
            'CREATE INDEX "idx_furnishings_name" ON "furnishings" ("name" ASC);\n',
            'CREATE TABLE "income_sponsor" (\n  "id" TEXT NOT NULL,\n  "income_id" TEXT NOT NULL,\n  "sponsor_id" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "value" REAL NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "income_sponsor_income_id_fkey" FOREIGN KEY ("income_id") REFERENCES "incomes" ("id") ON DELETE CASCADE,\n  CONSTRAINT "income_sponsor_sponsor_id_fkey" FOREIGN KEY ("sponsor_id") REFERENCES "sponsors" ("id") ON DELETE CASCADE,\n  CONSTRAINT "income_sponsor_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "income_sponsor_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_income_sponsor_id" ON "income_sponsor" ("id" ASC);\n',
            'CREATE INDEX "idx_income_sponsor_income_id" ON "income_sponsor" ("income_id" ASC);\n',
            'CREATE INDEX "idx_income_sponsor_sponsor_id" ON "income_sponsor" ("sponsor_id" ASC);\n',
            'CREATE INDEX "idx_income_sponsor_tenant_id" ON "income_sponsor" ("tenant_id" ASC);\n',
            'CREATE INDEX "idx_income_sponsor_value" ON "income_sponsor" ("value" ASC);\n',
            'CREATE TABLE "family_housing" (\n  "id" TEXT NOT NULL,\n  "family_id" TEXT NOT NULL,\n  "housing_id" TEXT NOT NULL,\n  "value" TEXT NOT NULL,\n  CONSTRAINT "family_housing_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "families" ("id") ON DELETE CASCADE,\n  CONSTRAINT "family_housing_housing_id_fkey" FOREIGN KEY ("housing_id") REFERENCES "housings" ("id") ON DELETE CASCADE,\n  CONSTRAINT "family_housing_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_family_housing_family_id" ON "family_housing" ("family_id" ASC);\n',
            'CREATE INDEX "idx_family_housing_housing_id" ON "family_housing" ("housing_id" ASC);\n',
            'CREATE INDEX "idx_family_housing_id" ON "family_housing" ("id" ASC);\n',
            'CREATE INDEX "idx_family_housing_value" ON "family_housing" ("value" ASC);\n',
            'CREATE TABLE "family_furnishing" (\n  "id" TEXT NOT NULL,\n  "family_id" TEXT NOT NULL,\n  "furnishing_id" TEXT NOT NULL,\n  "value" TEXT NOT NULL,\n  CONSTRAINT "family_furnishing_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "families" ("id") ON DELETE CASCADE,\n  CONSTRAINT "family_furnishing_furnishing_id_fkey" FOREIGN KEY ("furnishing_id") REFERENCES "furnishings" ("id") ON DELETE CASCADE,\n  CONSTRAINT "family_furnishing_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_family_furnishing_family_id" ON "family_furnishing" ("family_id" ASC);\n',
            'CREATE INDEX "idx_family_furnishing_furnishing_id" ON "family_furnishing" ("furnishing_id" ASC);\n',
            'CREATE INDEX "idx_family_furnishing_id" ON "family_furnishing" ("id" ASC);\n',
            'CREATE INDEX "idx_family_furnishing_value" ON "family_furnishing" ("value" ASC);\n',
            'CREATE TABLE "sponsorships" (\n  "id" TEXT NOT NULL,\n  "type" TEXT NOT NULL,\n  "name" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "deleted_at" TEXT(0),\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "sponsorships_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT "sponsorships_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_sponsorships_id" ON "sponsorships" ("id" ASC);\n',
            'CREATE INDEX "idx_sponsorships_name" ON "sponsorships" ("name" ASC);\n',
            'CREATE INDEX "idx_sponsorships_tenant_id" ON "sponsorships" ("tenant_id" ASC);\n',
            'CREATE INDEX "idx_sponsorships_type" ON "sponsorships" ("type" ASC);\n',
            'CREATE TABLE "family_sponsorship" (\n  "id" TEXT NOT NULL,\n  "family_id" TEXT NOT NULL,\n  "type" TEXT NOT NULL,\n  "value" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "family_sponsorship_family_id_fkey" FOREIGN KEY ("family_id") REFERENCES "families" ("id") ON DELETE CASCADE,\n  CONSTRAINT "family_sponsorship_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT "family_sponsorship_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_family_sponsorship_family_id" ON "family_sponsorship" ("family_id" ASC);\n',
            'CREATE INDEX "idx_family_sponsorship_id" ON "family_sponsorship" ("id" ASC);\n',
            'CREATE INDEX "idx_family_sponsorship_tenant_id" ON "family_sponsorship" ("tenant_id" ASC);\n',
            'CREATE INDEX "idx_family_sponsorship_type" ON "family_sponsorship" ("type" ASC);\n',
            'CREATE INDEX "idx_family_sponsorship_value" ON "family_sponsorship" ("value" ASC);\n',
            'CREATE TABLE "sponsor_sponsorship" (\n  "id" TEXT NOT NULL,\n  "sponsor_id" TEXT NOT NULL,\n  "type" TEXT NOT NULL,\n  "value" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "sponsor_sponsorship_sponsor_id_fkey" FOREIGN KEY ("sponsor_id") REFERENCES "sponsors" ("id") ON DELETE CASCADE,\n  CONSTRAINT "sponsor_sponsorship_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT "sponsor_sponsorship_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_sponsor_sponsorship_id" ON "sponsor_sponsorship" ("id" ASC);\n',
            'CREATE INDEX "idx_sponsor_sponsorship_sponsor_id" ON "sponsor_sponsorship" ("sponsor_id" ASC);\n',
            'CREATE INDEX "idx_sponsor_sponsorship_tenant_id" ON "sponsor_sponsorship" ("tenant_id" ASC);\n',
            'CREATE INDEX "idx_sponsor_sponsorship_type" ON "sponsor_sponsorship" ("type" ASC);\n',
            'CREATE INDEX "idx_sponsor_sponsorship_value" ON "sponsor_sponsorship" ("value" ASC);\n',
            'CREATE TABLE "orphan_sponsorship" (\n  "id" TEXT NOT NULL,\n  "orphan_id" TEXT NOT NULL,\n  "type" TEXT NOT NULL,\n  "value" TEXT,\n  "tenant_id" TEXT NOT NULL,\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "orphan_sponsorship_orphan_id_fkey" FOREIGN KEY ("orphan_id") REFERENCES "orphans" ("id") ON DELETE CASCADE,\n  CONSTRAINT "orphan_sponsorship_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT "orphan_sponsorship_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_orphan_sponsorship_id" ON "orphan_sponsorship" ("id" ASC);\n',
            'CREATE INDEX "idx_orphan_sponsorship_orphan_id" ON "orphan_sponsorship" ("orphan_id" ASC);\n',
            'CREATE INDEX "idx_orphan_sponsorship_tenant_id" ON "orphan_sponsorship" ("tenant_id" ASC);\n',
            'CREATE INDEX "idx_orphan_sponsorship_type" ON "orphan_sponsorship" ("type" ASC);\n',
            'CREATE INDEX "idx_orphan_sponsorship_value" ON "orphan_sponsorship" ("value" ASC);\n',
            'CREATE TABLE "benefactors" (\n  "id" TEXT NOT NULL,\n  "tenant_id" TEXT NOT NULL,\n  "deleted_at" TEXT(0),\n  "created_at" TEXT(0),\n  "updated_at" TEXT(0),\n  CONSTRAINT "benefactors_tenant_id_fkey" FOREIGN KEY ("tenant_id") REFERENCES "tenants" ("id") ON DELETE CASCADE,\n  CONSTRAINT "benefactors_pkey" PRIMARY KEY ("id")\n) WITHOUT ROWID;\n',
            'CREATE INDEX "idx_benefactors_id" ON "benefactors" ("id" ASC);\n',
            'CREATE INDEX "idx_benefactors_tenant_id" ON "benefactors" ("tenant_id" ASC);\n',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.users', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_users_primarykey;',
            'CREATE TRIGGER update_ensure_main_users_primarykey\n  BEFORE UPDATE ON "main"."users"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_users_into_oplog;',
            "CREATE TRIGGER insert_main_users_into_oplog\n   AFTER INSERT ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'email', new.\"email\", 'email_verified_at', new.\"email_verified_at\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'password', new.\"password\", 'phone', new.\"phone\", 'remember_token', new.\"remember_token\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_users_into_oplog;',
            "CREATE TRIGGER update_main_users_into_oplog\n   AFTER UPDATE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'email', new.\"email\", 'email_verified_at', new.\"email_verified_at\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'password', new.\"password\", 'phone', new.\"phone\", 'remember_token', new.\"remember_token\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'email', old.\"email\", 'email_verified_at', old.\"email_verified_at\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'password', old.\"password\", 'phone', old.\"phone\", 'remember_token', old.\"remember_token\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_users_into_oplog;',
            "CREATE TRIGGER delete_main_users_into_oplog\n   AFTER DELETE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'email', old.\"email\", 'email_verified_at', old.\"email_verified_at\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'password', old.\"password\", 'phone', old.\"phone\", 'remember_token', old.\"remember_token\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_users_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_users_tenant_id_into_oplog\n  AFTER INSERT ON "main"."users"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_users_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_users_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."users"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.password_reset_tokens', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_password_reset_tokens_primarykey;',
            'CREATE TRIGGER update_ensure_main_password_reset_tokens_primarykey\n  BEFORE UPDATE ON "main"."password_reset_tokens"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."email" != new."email" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column email as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_password_reset_tokens_into_oplog;',
            "CREATE TRIGGER insert_main_password_reset_tokens_into_oplog\n   AFTER INSERT ON \"main\".\"password_reset_tokens\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.password_reset_tokens')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'password_reset_tokens', 'INSERT', json_object('email', new.\"email\"), json_object('created_at', new.\"created_at\", 'email', new.\"email\", 'token', new.\"token\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_password_reset_tokens_into_oplog;',
            "CREATE TRIGGER update_main_password_reset_tokens_into_oplog\n   AFTER UPDATE ON \"main\".\"password_reset_tokens\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.password_reset_tokens')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'password_reset_tokens', 'UPDATE', json_object('email', new.\"email\"), json_object('created_at', new.\"created_at\", 'email', new.\"email\", 'token', new.\"token\"), json_object('created_at', old.\"created_at\", 'email', old.\"email\", 'token', old.\"token\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_password_reset_tokens_into_oplog;',
            "CREATE TRIGGER delete_main_password_reset_tokens_into_oplog\n   AFTER DELETE ON \"main\".\"password_reset_tokens\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.password_reset_tokens')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'password_reset_tokens', 'DELETE', json_object('email', old.\"email\"), NULL, json_object('created_at', old.\"created_at\", 'email', old.\"email\", 'token', old.\"token\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sessions', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_sessions_primarykey;',
            'CREATE TRIGGER update_ensure_main_sessions_primarykey\n  BEFORE UPDATE ON "main"."sessions"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_sessions_into_oplog;',
            "CREATE TRIGGER insert_main_sessions_into_oplog\n   AFTER INSERT ON \"main\".\"sessions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sessions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sessions', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'ip_address', new.\"ip_address\", 'last_activity', new.\"last_activity\", 'payload', new.\"payload\", 'user_agent', new.\"user_agent\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_sessions_into_oplog;',
            "CREATE TRIGGER update_main_sessions_into_oplog\n   AFTER UPDATE ON \"main\".\"sessions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sessions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sessions', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'ip_address', new.\"ip_address\", 'last_activity', new.\"last_activity\", 'payload', new.\"payload\", 'user_agent', new.\"user_agent\", 'user_id', new.\"user_id\"), json_object('id', old.\"id\", 'ip_address', old.\"ip_address\", 'last_activity', old.\"last_activity\", 'payload', old.\"payload\", 'user_agent', old.\"user_agent\", 'user_id', old.\"user_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_sessions_into_oplog;',
            "CREATE TRIGGER delete_main_sessions_into_oplog\n   AFTER DELETE ON \"main\".\"sessions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sessions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sessions', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'ip_address', old.\"ip_address\", 'last_activity', old.\"last_activity\", 'payload', old.\"payload\", 'user_agent', old.\"user_agent\", 'user_id', old.\"user_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_sessions_user_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sessions_user_id_into_oplog\n  AFTER INSERT ON "main"."sessions"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."user_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sessions_user_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sessions_user_id_into_oplog\n   AFTER UPDATE ON "main"."sessions"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."user_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.cache', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_cache_primarykey;',
            'CREATE TRIGGER update_ensure_main_cache_primarykey\n  BEFORE UPDATE ON "main"."cache"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."key" != new."key" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column key as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_cache_into_oplog;',
            "CREATE TRIGGER insert_main_cache_into_oplog\n   AFTER INSERT ON \"main\".\"cache\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cache')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cache', 'INSERT', json_object('key', new.\"key\"), json_object('expiration', new.\"expiration\", 'key', new.\"key\", 'value', new.\"value\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_cache_into_oplog;',
            "CREATE TRIGGER update_main_cache_into_oplog\n   AFTER UPDATE ON \"main\".\"cache\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cache')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cache', 'UPDATE', json_object('key', new.\"key\"), json_object('expiration', new.\"expiration\", 'key', new.\"key\", 'value', new.\"value\"), json_object('expiration', old.\"expiration\", 'key', old.\"key\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_cache_into_oplog;',
            "CREATE TRIGGER delete_main_cache_into_oplog\n   AFTER DELETE ON \"main\".\"cache\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cache')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cache', 'DELETE', json_object('key', old.\"key\"), NULL, json_object('expiration', old.\"expiration\", 'key', old.\"key\", 'value', old.\"value\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.cache_locks', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_cache_locks_primarykey;',
            'CREATE TRIGGER update_ensure_main_cache_locks_primarykey\n  BEFORE UPDATE ON "main"."cache_locks"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."key" != new."key" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column key as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_cache_locks_into_oplog;',
            "CREATE TRIGGER insert_main_cache_locks_into_oplog\n   AFTER INSERT ON \"main\".\"cache_locks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cache_locks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cache_locks', 'INSERT', json_object('key', new.\"key\"), json_object('expiration', new.\"expiration\", 'key', new.\"key\", 'owner', new.\"owner\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_cache_locks_into_oplog;',
            "CREATE TRIGGER update_main_cache_locks_into_oplog\n   AFTER UPDATE ON \"main\".\"cache_locks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cache_locks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cache_locks', 'UPDATE', json_object('key', new.\"key\"), json_object('expiration', new.\"expiration\", 'key', new.\"key\", 'owner', new.\"owner\"), json_object('expiration', old.\"expiration\", 'key', old.\"key\", 'owner', old.\"owner\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_cache_locks_into_oplog;',
            "CREATE TRIGGER delete_main_cache_locks_into_oplog\n   AFTER DELETE ON \"main\".\"cache_locks\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.cache_locks')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'cache_locks', 'DELETE', json_object('key', old.\"key\"), NULL, json_object('expiration', old.\"expiration\", 'key', old.\"key\", 'owner', old.\"owner\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.tenants', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_tenants_primarykey;',
            'CREATE TRIGGER update_ensure_main_tenants_primarykey\n  BEFORE UPDATE ON "main"."tenants"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_tenants_into_oplog;',
            "CREATE TRIGGER insert_main_tenants_into_oplog\n   AFTER INSERT ON \"main\".\"tenants\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.tenants')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tenants', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'data', new.\"data\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_tenants_into_oplog;',
            "CREATE TRIGGER update_main_tenants_into_oplog\n   AFTER UPDATE ON \"main\".\"tenants\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.tenants')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tenants', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'data', new.\"data\", 'id', new.\"id\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'data', old.\"data\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_tenants_into_oplog;',
            "CREATE TRIGGER delete_main_tenants_into_oplog\n   AFTER DELETE ON \"main\".\"tenants\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.tenants')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'tenants', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'data', old.\"data\", 'id', old.\"id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.domains', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_domains_primarykey;',
            'CREATE TRIGGER update_ensure_main_domains_primarykey\n  BEFORE UPDATE ON "main"."domains"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_domains_into_oplog;',
            "CREATE TRIGGER insert_main_domains_into_oplog\n   AFTER INSERT ON \"main\".\"domains\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.domains')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'domains', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'domain', new.\"domain\", 'id', new.\"id\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_domains_into_oplog;',
            "CREATE TRIGGER update_main_domains_into_oplog\n   AFTER UPDATE ON \"main\".\"domains\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.domains')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'domains', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'domain', new.\"domain\", 'id', new.\"id\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'domain', old.\"domain\", 'id', old.\"id\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_domains_into_oplog;',
            "CREATE TRIGGER delete_main_domains_into_oplog\n   AFTER DELETE ON \"main\".\"domains\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.domains')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'domains', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'domain', old.\"domain\", 'id', old.\"id\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_domains_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_domains_tenant_id_into_oplog\n  AFTER INSERT ON "main"."domains"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_domains_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_domains_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."domains"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.permissions', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_permissions_primarykey;',
            'CREATE TRIGGER update_ensure_main_permissions_primarykey\n  BEFORE UPDATE ON "main"."permissions"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."uuid" != new."uuid" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column uuid as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_permissions_into_oplog;',
            "CREATE TRIGGER insert_main_permissions_into_oplog\n   AFTER INSERT ON \"main\".\"permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'permissions', 'INSERT', json_object('uuid', new.\"uuid\"), json_object('created_at', new.\"created_at\", 'guard_name', new.\"guard_name\", 'name', new.\"name\", 'updated_at', new.\"updated_at\", 'uuid', new.\"uuid\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_permissions_into_oplog;',
            "CREATE TRIGGER update_main_permissions_into_oplog\n   AFTER UPDATE ON \"main\".\"permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'permissions', 'UPDATE', json_object('uuid', new.\"uuid\"), json_object('created_at', new.\"created_at\", 'guard_name', new.\"guard_name\", 'name', new.\"name\", 'updated_at', new.\"updated_at\", 'uuid', new.\"uuid\"), json_object('created_at', old.\"created_at\", 'guard_name', old.\"guard_name\", 'name', old.\"name\", 'updated_at', old.\"updated_at\", 'uuid', old.\"uuid\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_permissions_into_oplog;',
            "CREATE TRIGGER delete_main_permissions_into_oplog\n   AFTER DELETE ON \"main\".\"permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'permissions', 'DELETE', json_object('uuid', old.\"uuid\"), NULL, json_object('created_at', old.\"created_at\", 'guard_name', old.\"guard_name\", 'name', old.\"name\", 'updated_at', old.\"updated_at\", 'uuid', old.\"uuid\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.roles', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_roles_primarykey;',
            'CREATE TRIGGER update_ensure_main_roles_primarykey\n  BEFORE UPDATE ON "main"."roles"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."uuid" != new."uuid" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column uuid as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_roles_into_oplog;',
            "CREATE TRIGGER insert_main_roles_into_oplog\n   AFTER INSERT ON \"main\".\"roles\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.roles')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'roles', 'INSERT', json_object('uuid', new.\"uuid\"), json_object('created_at', new.\"created_at\", 'guard_name', new.\"guard_name\", 'name', new.\"name\", 'updated_at', new.\"updated_at\", 'uuid', new.\"uuid\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_roles_into_oplog;',
            "CREATE TRIGGER update_main_roles_into_oplog\n   AFTER UPDATE ON \"main\".\"roles\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.roles')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'roles', 'UPDATE', json_object('uuid', new.\"uuid\"), json_object('created_at', new.\"created_at\", 'guard_name', new.\"guard_name\", 'name', new.\"name\", 'updated_at', new.\"updated_at\", 'uuid', new.\"uuid\"), json_object('created_at', old.\"created_at\", 'guard_name', old.\"guard_name\", 'name', old.\"name\", 'updated_at', old.\"updated_at\", 'uuid', old.\"uuid\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_roles_into_oplog;',
            "CREATE TRIGGER delete_main_roles_into_oplog\n   AFTER DELETE ON \"main\".\"roles\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.roles')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'roles', 'DELETE', json_object('uuid', old.\"uuid\"), NULL, json_object('created_at', old.\"created_at\", 'guard_name', old.\"guard_name\", 'name', old.\"name\", 'updated_at', old.\"updated_at\", 'uuid', old.\"uuid\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.model_has_permissions', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_model_has_permissions_primarykey;',
            'CREATE TRIGGER update_ensure_main_model_has_permissions_primarykey\n  BEFORE UPDATE ON "main"."model_has_permissions"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."model_type" != new."model_type" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column model_type as it belongs to the primary key\')\n      WHEN old."model_uuid" != new."model_uuid" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column model_uuid as it belongs to the primary key\')\n      WHEN old."permission_id" != new."permission_id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column permission_id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_model_has_permissions_into_oplog;',
            "CREATE TRIGGER insert_main_model_has_permissions_into_oplog\n   AFTER INSERT ON \"main\".\"model_has_permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.model_has_permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'model_has_permissions', 'INSERT', json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'permission_id', new.\"permission_id\"), json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'permission_id', new.\"permission_id\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_model_has_permissions_into_oplog;',
            "CREATE TRIGGER update_main_model_has_permissions_into_oplog\n   AFTER UPDATE ON \"main\".\"model_has_permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.model_has_permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'model_has_permissions', 'UPDATE', json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'permission_id', new.\"permission_id\"), json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'permission_id', new.\"permission_id\"), json_object('model_type', old.\"model_type\", 'model_uuid', old.\"model_uuid\", 'permission_id', old.\"permission_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_model_has_permissions_into_oplog;',
            "CREATE TRIGGER delete_main_model_has_permissions_into_oplog\n   AFTER DELETE ON \"main\".\"model_has_permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.model_has_permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'model_has_permissions', 'DELETE', json_object('model_type', old.\"model_type\", 'model_uuid', old.\"model_uuid\", 'permission_id', old.\"permission_id\"), NULL, json_object('model_type', old.\"model_type\", 'model_uuid', old.\"model_uuid\", 'permission_id', old.\"permission_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_model_has_permissions_permission_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_model_has_permissions_permission_id_into_oplog\n  AFTER INSERT ON "main"."model_has_permissions"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.permissions\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'permissions\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."permissions" WHERE "uuid" = new."permission_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_model_has_permissions_permission_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_model_has_permissions_permission_id_into_oplog\n   AFTER UPDATE ON "main"."model_has_permissions"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.permissions\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'permissions\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."permissions" WHERE "uuid" = new."permission_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.model_has_roles', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_model_has_roles_primarykey;',
            'CREATE TRIGGER update_ensure_main_model_has_roles_primarykey\n  BEFORE UPDATE ON "main"."model_has_roles"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."model_type" != new."model_type" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column model_type as it belongs to the primary key\')\n      WHEN old."model_uuid" != new."model_uuid" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column model_uuid as it belongs to the primary key\')\n      WHEN old."role_id" != new."role_id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column role_id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_model_has_roles_into_oplog;',
            "CREATE TRIGGER insert_main_model_has_roles_into_oplog\n   AFTER INSERT ON \"main\".\"model_has_roles\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.model_has_roles')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'model_has_roles', 'INSERT', json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'role_id', new.\"role_id\"), json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'role_id', new.\"role_id\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_model_has_roles_into_oplog;',
            "CREATE TRIGGER update_main_model_has_roles_into_oplog\n   AFTER UPDATE ON \"main\".\"model_has_roles\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.model_has_roles')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'model_has_roles', 'UPDATE', json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'role_id', new.\"role_id\"), json_object('model_type', new.\"model_type\", 'model_uuid', new.\"model_uuid\", 'role_id', new.\"role_id\"), json_object('model_type', old.\"model_type\", 'model_uuid', old.\"model_uuid\", 'role_id', old.\"role_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_model_has_roles_into_oplog;',
            "CREATE TRIGGER delete_main_model_has_roles_into_oplog\n   AFTER DELETE ON \"main\".\"model_has_roles\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.model_has_roles')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'model_has_roles', 'DELETE', json_object('model_type', old.\"model_type\", 'model_uuid', old.\"model_uuid\", 'role_id', old.\"role_id\"), NULL, json_object('model_type', old.\"model_type\", 'model_uuid', old.\"model_uuid\", 'role_id', old.\"role_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_model_has_roles_role_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_model_has_roles_role_id_into_oplog\n  AFTER INSERT ON "main"."model_has_roles"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.roles\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'roles\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."roles" WHERE "uuid" = new."role_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_model_has_roles_role_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_model_has_roles_role_id_into_oplog\n   AFTER UPDATE ON "main"."model_has_roles"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.roles\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'roles\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."roles" WHERE "uuid" = new."role_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.role_has_permissions', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_role_has_permissions_primarykey;',
            'CREATE TRIGGER update_ensure_main_role_has_permissions_primarykey\n  BEFORE UPDATE ON "main"."role_has_permissions"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."permission_id" != new."permission_id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column permission_id as it belongs to the primary key\')\n      WHEN old."role_id" != new."role_id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column role_id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_role_has_permissions_into_oplog;',
            "CREATE TRIGGER insert_main_role_has_permissions_into_oplog\n   AFTER INSERT ON \"main\".\"role_has_permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.role_has_permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'role_has_permissions', 'INSERT', json_object('permission_id', new.\"permission_id\", 'role_id', new.\"role_id\"), json_object('permission_id', new.\"permission_id\", 'role_id', new.\"role_id\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_role_has_permissions_into_oplog;',
            "CREATE TRIGGER update_main_role_has_permissions_into_oplog\n   AFTER UPDATE ON \"main\".\"role_has_permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.role_has_permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'role_has_permissions', 'UPDATE', json_object('permission_id', new.\"permission_id\", 'role_id', new.\"role_id\"), json_object('permission_id', new.\"permission_id\", 'role_id', new.\"role_id\"), json_object('permission_id', old.\"permission_id\", 'role_id', old.\"role_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_role_has_permissions_into_oplog;',
            "CREATE TRIGGER delete_main_role_has_permissions_into_oplog\n   AFTER DELETE ON \"main\".\"role_has_permissions\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.role_has_permissions')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'role_has_permissions', 'DELETE', json_object('permission_id', old.\"permission_id\", 'role_id', old.\"role_id\"), NULL, json_object('permission_id', old.\"permission_id\", 'role_id', old.\"role_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_role_has_permissions_permission_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_role_has_permissions_permission_id_into_oplog\n  AFTER INSERT ON "main"."role_has_permissions"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.permissions\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'permissions\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."permissions" WHERE "uuid" = new."permission_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_role_has_permissions_permission_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_role_has_permissions_permission_id_into_oplog\n   AFTER UPDATE ON "main"."role_has_permissions"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.permissions\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'permissions\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."permissions" WHERE "uuid" = new."permission_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_role_has_permissions_role_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_role_has_permissions_role_id_into_oplog\n  AFTER INSERT ON "main"."role_has_permissions"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.roles\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'roles\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."roles" WHERE "uuid" = new."role_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_role_has_permissions_role_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_role_has_permissions_role_id_into_oplog\n   AFTER UPDATE ON "main"."role_has_permissions"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.roles\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'roles\', \'COMPENSATION\', json_object(\'uuid\', "uuid"), json_object(\'uuid\', "uuid"), NULL, NULL\n  FROM "main"."roles" WHERE "uuid" = new."role_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.personal_access_tokens', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_personal_access_tokens_primarykey;',
            'CREATE TRIGGER update_ensure_main_personal_access_tokens_primarykey\n  BEFORE UPDATE ON "main"."personal_access_tokens"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_personal_access_tokens_into_oplog;',
            "CREATE TRIGGER insert_main_personal_access_tokens_into_oplog\n   AFTER INSERT ON \"main\".\"personal_access_tokens\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.personal_access_tokens')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'personal_access_tokens', 'INSERT', json_object('id', new.\"id\"), json_object('abilities', new.\"abilities\", 'created_at', new.\"created_at\", 'expires_at', new.\"expires_at\", 'id', new.\"id\", 'last_used_at', new.\"last_used_at\", 'name', new.\"name\", 'token', new.\"token\", 'tokenable_id', new.\"tokenable_id\", 'tokenable_type', new.\"tokenable_type\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_personal_access_tokens_into_oplog;',
            "CREATE TRIGGER update_main_personal_access_tokens_into_oplog\n   AFTER UPDATE ON \"main\".\"personal_access_tokens\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.personal_access_tokens')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'personal_access_tokens', 'UPDATE', json_object('id', new.\"id\"), json_object('abilities', new.\"abilities\", 'created_at', new.\"created_at\", 'expires_at', new.\"expires_at\", 'id', new.\"id\", 'last_used_at', new.\"last_used_at\", 'name', new.\"name\", 'token', new.\"token\", 'tokenable_id', new.\"tokenable_id\", 'tokenable_type', new.\"tokenable_type\", 'updated_at', new.\"updated_at\"), json_object('abilities', old.\"abilities\", 'created_at', old.\"created_at\", 'expires_at', old.\"expires_at\", 'id', old.\"id\", 'last_used_at', old.\"last_used_at\", 'name', old.\"name\", 'token', old.\"token\", 'tokenable_id', old.\"tokenable_id\", 'tokenable_type', old.\"tokenable_type\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_personal_access_tokens_into_oplog;',
            "CREATE TRIGGER delete_main_personal_access_tokens_into_oplog\n   AFTER DELETE ON \"main\".\"personal_access_tokens\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.personal_access_tokens')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'personal_access_tokens', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('abilities', old.\"abilities\", 'created_at', old.\"created_at\", 'expires_at', old.\"expires_at\", 'id', old.\"id\", 'last_used_at', old.\"last_used_at\", 'name', old.\"name\", 'token', old.\"token\", 'tokenable_id', old.\"tokenable_id\", 'tokenable_type', old.\"tokenable_type\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.media', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_media_primarykey;',
            'CREATE TRIGGER update_ensure_main_media_primarykey\n  BEFORE UPDATE ON "main"."media"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_media_into_oplog;',
            "CREATE TRIGGER insert_main_media_into_oplog\n   AFTER INSERT ON \"main\".\"media\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.media')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'media', 'INSERT', json_object('id', new.\"id\"), json_object('collection_name', new.\"collection_name\", 'conversions_disk', new.\"conversions_disk\", 'created_at', new.\"created_at\", 'custom_properties', new.\"custom_properties\", 'disk', new.\"disk\", 'file_name', new.\"file_name\", 'generated_conversions', new.\"generated_conversions\", 'id', new.\"id\", 'manipulations', new.\"manipulations\", 'mime_type', new.\"mime_type\", 'model_id', cast(new.\"model_id\" as TEXT), 'model_type', new.\"model_type\", 'name', new.\"name\", 'order_column', new.\"order_column\", 'responsive_images', new.\"responsive_images\", 'size', cast(new.\"size\" as TEXT), 'updated_at', new.\"updated_at\", 'uuid', new.\"uuid\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_media_into_oplog;',
            "CREATE TRIGGER update_main_media_into_oplog\n   AFTER UPDATE ON \"main\".\"media\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.media')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'media', 'UPDATE', json_object('id', new.\"id\"), json_object('collection_name', new.\"collection_name\", 'conversions_disk', new.\"conversions_disk\", 'created_at', new.\"created_at\", 'custom_properties', new.\"custom_properties\", 'disk', new.\"disk\", 'file_name', new.\"file_name\", 'generated_conversions', new.\"generated_conversions\", 'id', new.\"id\", 'manipulations', new.\"manipulations\", 'mime_type', new.\"mime_type\", 'model_id', cast(new.\"model_id\" as TEXT), 'model_type', new.\"model_type\", 'name', new.\"name\", 'order_column', new.\"order_column\", 'responsive_images', new.\"responsive_images\", 'size', cast(new.\"size\" as TEXT), 'updated_at', new.\"updated_at\", 'uuid', new.\"uuid\"), json_object('collection_name', old.\"collection_name\", 'conversions_disk', old.\"conversions_disk\", 'created_at', old.\"created_at\", 'custom_properties', old.\"custom_properties\", 'disk', old.\"disk\", 'file_name', old.\"file_name\", 'generated_conversions', old.\"generated_conversions\", 'id', old.\"id\", 'manipulations', old.\"manipulations\", 'mime_type', old.\"mime_type\", 'model_id', cast(old.\"model_id\" as TEXT), 'model_type', old.\"model_type\", 'name', old.\"name\", 'order_column', old.\"order_column\", 'responsive_images', old.\"responsive_images\", 'size', cast(old.\"size\" as TEXT), 'updated_at', old.\"updated_at\", 'uuid', old.\"uuid\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_media_into_oplog;',
            "CREATE TRIGGER delete_main_media_into_oplog\n   AFTER DELETE ON \"main\".\"media\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.media')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'media', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('collection_name', old.\"collection_name\", 'conversions_disk', old.\"conversions_disk\", 'created_at', old.\"created_at\", 'custom_properties', old.\"custom_properties\", 'disk', old.\"disk\", 'file_name', old.\"file_name\", 'generated_conversions', old.\"generated_conversions\", 'id', old.\"id\", 'manipulations', old.\"manipulations\", 'mime_type', old.\"mime_type\", 'model_id', cast(old.\"model_id\" as TEXT), 'model_type', old.\"model_type\", 'name', old.\"name\", 'order_column', old.\"order_column\", 'responsive_images', old.\"responsive_images\", 'size', cast(old.\"size\" as TEXT), 'updated_at', old.\"updated_at\", 'uuid', old.\"uuid\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.settings', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_settings_primarykey;',
            'CREATE TRIGGER update_ensure_main_settings_primarykey\n  BEFORE UPDATE ON "main"."settings"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_settings_into_oplog;',
            "CREATE TRIGGER insert_main_settings_into_oplog\n   AFTER INSERT ON \"main\".\"settings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.settings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'settings', 'INSERT', json_object('id', new.\"id\"), json_object('appearance', new.\"appearance\", 'color_scheme', new.\"color_scheme\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'layout', new.\"layout\", 'notifications', new.\"notifications\", 'theme', new.\"theme\", 'updated_at', new.\"updated_at\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_settings_into_oplog;',
            "CREATE TRIGGER update_main_settings_into_oplog\n   AFTER UPDATE ON \"main\".\"settings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.settings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'settings', 'UPDATE', json_object('id', new.\"id\"), json_object('appearance', new.\"appearance\", 'color_scheme', new.\"color_scheme\", 'created_at', new.\"created_at\", 'id', new.\"id\", 'layout', new.\"layout\", 'notifications', new.\"notifications\", 'theme', new.\"theme\", 'updated_at', new.\"updated_at\", 'user_id', new.\"user_id\"), json_object('appearance', old.\"appearance\", 'color_scheme', old.\"color_scheme\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'layout', old.\"layout\", 'notifications', old.\"notifications\", 'theme', old.\"theme\", 'updated_at', old.\"updated_at\", 'user_id', old.\"user_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_settings_into_oplog;',
            "CREATE TRIGGER delete_main_settings_into_oplog\n   AFTER DELETE ON \"main\".\"settings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.settings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'settings', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('appearance', old.\"appearance\", 'color_scheme', old.\"color_scheme\", 'created_at', old.\"created_at\", 'id', old.\"id\", 'layout', old.\"layout\", 'notifications', old.\"notifications\", 'theme', old.\"theme\", 'updated_at', old.\"updated_at\", 'user_id', old.\"user_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_settings_user_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_settings_user_id_into_oplog\n  AFTER INSERT ON "main"."settings"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."user_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_settings_user_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_settings_user_id_into_oplog\n   AFTER UPDATE ON "main"."settings"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."user_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.families', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_families_primarykey;',
            'CREATE TRIGGER update_ensure_main_families_primarykey\n  BEFORE UPDATE ON "main"."families"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_families_into_oplog;',
            "CREATE TRIGGER insert_main_families_into_oplog\n   AFTER INSERT ON \"main\".\"families\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.families')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'families', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'name', new.\"name\", 'report', new.\"report\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_families_into_oplog;',
            "CREATE TRIGGER update_main_families_into_oplog\n   AFTER UPDATE ON \"main\".\"families\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.families')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'families', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'name', new.\"name\", 'report', new.\"report\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'name', old.\"name\", 'report', old.\"report\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_families_into_oplog;',
            "CREATE TRIGGER delete_main_families_into_oplog\n   AFTER DELETE ON \"main\".\"families\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.families')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'families', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'name', old.\"name\", 'report', old.\"report\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_families_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_families_tenant_id_into_oplog\n  AFTER INSERT ON "main"."families"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_families_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_families_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."families"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.incomes', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_incomes_primarykey;',
            'CREATE TRIGGER update_ensure_main_incomes_primarykey\n  BEFORE UPDATE ON "main"."incomes"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_incomes_into_oplog;',
            "CREATE TRIGGER insert_main_incomes_into_oplog\n   AFTER INSERT ON \"main\".\"incomes\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.incomes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'incomes', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_incomes_into_oplog;',
            "CREATE TRIGGER update_main_incomes_into_oplog\n   AFTER UPDATE ON \"main\".\"incomes\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.incomes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'incomes', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_incomes_into_oplog;',
            "CREATE TRIGGER delete_main_incomes_into_oplog\n   AFTER DELETE ON \"main\".\"incomes\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.incomes')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'incomes', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sponsors', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_sponsors_primarykey;',
            'CREATE TRIGGER update_ensure_main_sponsors_primarykey\n  BEFORE UPDATE ON "main"."sponsors"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_sponsors_into_oplog;',
            "CREATE TRIGGER insert_main_sponsors_into_oplog\n   AFTER INSERT ON \"main\".\"sponsors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsors', 'INSERT', json_object('id', new.\"id\"), json_object('academic_level', new.\"academic_level\", 'address', new.\"address\", 'birth_certificate_number', new.\"birth_certificate_number\", 'birth_date', new.\"birth_date\", 'card_number', new.\"card_number\", 'created_at', new.\"created_at\", 'created_by', new.\"created_by\", 'deleted_at', new.\"deleted_at\", 'deleted_by', new.\"deleted_by\", 'diploma', new.\"diploma\", 'father_name', new.\"father_name\", 'file_number', new.\"file_number\", 'function', new.\"function\", 'health_status', new.\"health_status\", 'id', new.\"id\", 'mother_name', new.\"mother_name\", 'name', new.\"name\", 'phone_number', new.\"phone_number\", 'sponsorship_type', new.\"sponsorship_type\", 'start_date', new.\"start_date\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\", 'zone_id', new.\"zone_id\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_sponsors_into_oplog;',
            "CREATE TRIGGER update_main_sponsors_into_oplog\n   AFTER UPDATE ON \"main\".\"sponsors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsors', 'UPDATE', json_object('id', new.\"id\"), json_object('academic_level', new.\"academic_level\", 'address', new.\"address\", 'birth_certificate_number', new.\"birth_certificate_number\", 'birth_date', new.\"birth_date\", 'card_number', new.\"card_number\", 'created_at', new.\"created_at\", 'created_by', new.\"created_by\", 'deleted_at', new.\"deleted_at\", 'deleted_by', new.\"deleted_by\", 'diploma', new.\"diploma\", 'father_name', new.\"father_name\", 'file_number', new.\"file_number\", 'function', new.\"function\", 'health_status', new.\"health_status\", 'id', new.\"id\", 'mother_name', new.\"mother_name\", 'name', new.\"name\", 'phone_number', new.\"phone_number\", 'sponsorship_type', new.\"sponsorship_type\", 'start_date', new.\"start_date\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\", 'zone_id', new.\"zone_id\"), json_object('academic_level', old.\"academic_level\", 'address', old.\"address\", 'birth_certificate_number', old.\"birth_certificate_number\", 'birth_date', old.\"birth_date\", 'card_number', old.\"card_number\", 'created_at', old.\"created_at\", 'created_by', old.\"created_by\", 'deleted_at', old.\"deleted_at\", 'deleted_by', old.\"deleted_by\", 'diploma', old.\"diploma\", 'father_name', old.\"father_name\", 'file_number', old.\"file_number\", 'function', old.\"function\", 'health_status', old.\"health_status\", 'id', old.\"id\", 'mother_name', old.\"mother_name\", 'name', old.\"name\", 'phone_number', old.\"phone_number\", 'sponsorship_type', old.\"sponsorship_type\", 'start_date', old.\"start_date\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\", 'zone_id', old.\"zone_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_sponsors_into_oplog;',
            "CREATE TRIGGER delete_main_sponsors_into_oplog\n   AFTER DELETE ON \"main\".\"sponsors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsors', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('academic_level', old.\"academic_level\", 'address', old.\"address\", 'birth_certificate_number', old.\"birth_certificate_number\", 'birth_date', old.\"birth_date\", 'card_number', old.\"card_number\", 'created_at', old.\"created_at\", 'created_by', old.\"created_by\", 'deleted_at', old.\"deleted_at\", 'deleted_by', old.\"deleted_by\", 'diploma', old.\"diploma\", 'father_name', old.\"father_name\", 'file_number', old.\"file_number\", 'function', old.\"function\", 'health_status', old.\"health_status\", 'id', old.\"id\", 'mother_name', old.\"mother_name\", 'name', old.\"name\", 'phone_number', old.\"phone_number\", 'sponsorship_type', old.\"sponsorship_type\", 'start_date', old.\"start_date\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\", 'zone_id', old.\"zone_id\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_sponsors_created_by_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sponsors_created_by_into_oplog\n  AFTER INSERT ON "main"."sponsors"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."created_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sponsors_created_by_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sponsors_created_by_into_oplog\n   AFTER UPDATE ON "main"."sponsors"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."created_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_sponsors_deleted_by_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sponsors_deleted_by_into_oplog\n  AFTER INSERT ON "main"."sponsors"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."deleted_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sponsors_deleted_by_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sponsors_deleted_by_into_oplog\n   AFTER UPDATE ON "main"."sponsors"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."deleted_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_sponsors_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sponsors_tenant_id_into_oplog\n  AFTER INSERT ON "main"."sponsors"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sponsors_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sponsors_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."sponsors"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.second_sponsors', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_second_sponsors_primarykey;',
            'CREATE TRIGGER update_ensure_main_second_sponsors_primarykey\n  BEFORE UPDATE ON "main"."second_sponsors"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_second_sponsors_into_oplog;',
            "CREATE TRIGGER insert_main_second_sponsors_into_oplog\n   AFTER INSERT ON \"main\".\"second_sponsors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.second_sponsors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'second_sponsors', 'INSERT', json_object('id', new.\"id\"), json_object('address', new.\"address\", 'created_at', new.\"created_at\", 'degree_of_kinship', new.\"degree_of_kinship\", 'deleted_at', new.\"deleted_at\", 'family_id', new.\"family_id\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'income', cast(new.\"income\" as TEXT), 'last_name', new.\"last_name\", 'phone_number', new.\"phone_number\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_second_sponsors_into_oplog;',
            "CREATE TRIGGER update_main_second_sponsors_into_oplog\n   AFTER UPDATE ON \"main\".\"second_sponsors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.second_sponsors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'second_sponsors', 'UPDATE', json_object('id', new.\"id\"), json_object('address', new.\"address\", 'created_at', new.\"created_at\", 'degree_of_kinship', new.\"degree_of_kinship\", 'deleted_at', new.\"deleted_at\", 'family_id', new.\"family_id\", 'first_name', new.\"first_name\", 'id', new.\"id\", 'income', cast(new.\"income\" as TEXT), 'last_name', new.\"last_name\", 'phone_number', new.\"phone_number\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('address', old.\"address\", 'created_at', old.\"created_at\", 'degree_of_kinship', old.\"degree_of_kinship\", 'deleted_at', old.\"deleted_at\", 'family_id', old.\"family_id\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'income', cast(old.\"income\" as TEXT), 'last_name', old.\"last_name\", 'phone_number', old.\"phone_number\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_second_sponsors_into_oplog;',
            "CREATE TRIGGER delete_main_second_sponsors_into_oplog\n   AFTER DELETE ON \"main\".\"second_sponsors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.second_sponsors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'second_sponsors', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('address', old.\"address\", 'created_at', old.\"created_at\", 'degree_of_kinship', old.\"degree_of_kinship\", 'deleted_at', old.\"deleted_at\", 'family_id', old.\"family_id\", 'first_name', old.\"first_name\", 'id', old.\"id\", 'income', cast(old.\"income\" as TEXT), 'last_name', old.\"last_name\", 'phone_number', old.\"phone_number\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_second_sponsors_family_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_second_sponsors_family_id_into_oplog\n  AFTER INSERT ON "main"."second_sponsors"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_second_sponsors_family_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_second_sponsors_family_id_into_oplog\n   AFTER UPDATE ON "main"."second_sponsors"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_second_sponsors_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_second_sponsors_tenant_id_into_oplog\n  AFTER INSERT ON "main"."second_sponsors"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_second_sponsors_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_second_sponsors_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."second_sponsors"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.spouses', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_spouses_primarykey;',
            'CREATE TRIGGER update_ensure_main_spouses_primarykey\n  BEFORE UPDATE ON "main"."spouses"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_spouses_into_oplog;',
            "CREATE TRIGGER insert_main_spouses_into_oplog\n   AFTER INSERT ON \"main\".\"spouses\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.spouses')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'spouses', 'INSERT', json_object('id', new.\"id\"), json_object('birth_date', new.\"birth_date\", 'created_at', new.\"created_at\", 'death_date', new.\"death_date\", 'family_id', new.\"family_id\", 'first_name', new.\"first_name\", 'function', new.\"function\", 'id', new.\"id\", 'income', cast(new.\"income\" as TEXT), 'last_name', new.\"last_name\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_spouses_into_oplog;',
            "CREATE TRIGGER update_main_spouses_into_oplog\n   AFTER UPDATE ON \"main\".\"spouses\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.spouses')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'spouses', 'UPDATE', json_object('id', new.\"id\"), json_object('birth_date', new.\"birth_date\", 'created_at', new.\"created_at\", 'death_date', new.\"death_date\", 'family_id', new.\"family_id\", 'first_name', new.\"first_name\", 'function', new.\"function\", 'id', new.\"id\", 'income', cast(new.\"income\" as TEXT), 'last_name', new.\"last_name\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('birth_date', old.\"birth_date\", 'created_at', old.\"created_at\", 'death_date', old.\"death_date\", 'family_id', old.\"family_id\", 'first_name', old.\"first_name\", 'function', old.\"function\", 'id', old.\"id\", 'income', cast(old.\"income\" as TEXT), 'last_name', old.\"last_name\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_spouses_into_oplog;',
            "CREATE TRIGGER delete_main_spouses_into_oplog\n   AFTER DELETE ON \"main\".\"spouses\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.spouses')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'spouses', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('birth_date', old.\"birth_date\", 'created_at', old.\"created_at\", 'death_date', old.\"death_date\", 'family_id', old.\"family_id\", 'first_name', old.\"first_name\", 'function', old.\"function\", 'id', old.\"id\", 'income', cast(old.\"income\" as TEXT), 'last_name', old.\"last_name\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_spouses_family_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_spouses_family_id_into_oplog\n  AFTER INSERT ON "main"."spouses"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_spouses_family_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_spouses_family_id_into_oplog\n   AFTER UPDATE ON "main"."spouses"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_spouses_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_spouses_tenant_id_into_oplog\n  AFTER INSERT ON "main"."spouses"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_spouses_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_spouses_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."spouses"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.orphans', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_orphans_primarykey;',
            'CREATE TRIGGER update_ensure_main_orphans_primarykey\n  BEFORE UPDATE ON "main"."orphans"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_orphans_into_oplog;',
            "CREATE TRIGGER insert_main_orphans_into_oplog\n   AFTER INSERT ON \"main\".\"orphans\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orphans')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orphans', 'INSERT', json_object('id', new.\"id\"), json_object('academic_level', new.\"academic_level\", 'birth_date', new.\"birth_date\", 'created_at', new.\"created_at\", 'created_by', new.\"created_by\", 'deleted_by', new.\"deleted_by\", 'family_id', new.\"family_id\", 'family_status', new.\"family_status\", 'first_name', new.\"first_name\", 'health_status', new.\"health_status\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'note', new.\"note\", 'pants_size', new.\"pants_size\", 'shirt_size', new.\"shirt_size\", 'shoes_size', new.\"shoes_size\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_orphans_into_oplog;',
            "CREATE TRIGGER update_main_orphans_into_oplog\n   AFTER UPDATE ON \"main\".\"orphans\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orphans')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orphans', 'UPDATE', json_object('id', new.\"id\"), json_object('academic_level', new.\"academic_level\", 'birth_date', new.\"birth_date\", 'created_at', new.\"created_at\", 'created_by', new.\"created_by\", 'deleted_by', new.\"deleted_by\", 'family_id', new.\"family_id\", 'family_status', new.\"family_status\", 'first_name', new.\"first_name\", 'health_status', new.\"health_status\", 'id', new.\"id\", 'last_name', new.\"last_name\", 'note', new.\"note\", 'pants_size', new.\"pants_size\", 'shirt_size', new.\"shirt_size\", 'shoes_size', new.\"shoes_size\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('academic_level', old.\"academic_level\", 'birth_date', old.\"birth_date\", 'created_at', old.\"created_at\", 'created_by', old.\"created_by\", 'deleted_by', old.\"deleted_by\", 'family_id', old.\"family_id\", 'family_status', old.\"family_status\", 'first_name', old.\"first_name\", 'health_status', old.\"health_status\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'note', old.\"note\", 'pants_size', old.\"pants_size\", 'shirt_size', old.\"shirt_size\", 'shoes_size', old.\"shoes_size\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_orphans_into_oplog;',
            "CREATE TRIGGER delete_main_orphans_into_oplog\n   AFTER DELETE ON \"main\".\"orphans\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orphans')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orphans', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('academic_level', old.\"academic_level\", 'birth_date', old.\"birth_date\", 'created_at', old.\"created_at\", 'created_by', old.\"created_by\", 'deleted_by', old.\"deleted_by\", 'family_id', old.\"family_id\", 'family_status', old.\"family_status\", 'first_name', old.\"first_name\", 'health_status', old.\"health_status\", 'id', old.\"id\", 'last_name', old.\"last_name\", 'note', old.\"note\", 'pants_size', old.\"pants_size\", 'shirt_size', old.\"shirt_size\", 'shoes_size', old.\"shoes_size\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_orphans_created_by_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_orphans_created_by_into_oplog\n  AFTER INSERT ON "main"."orphans"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."created_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_orphans_created_by_into_oplog;',
            'CREATE TRIGGER compensation_update_main_orphans_created_by_into_oplog\n   AFTER UPDATE ON "main"."orphans"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."created_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_orphans_deleted_by_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_orphans_deleted_by_into_oplog\n  AFTER INSERT ON "main"."orphans"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."deleted_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_orphans_deleted_by_into_oplog;',
            'CREATE TRIGGER compensation_update_main_orphans_deleted_by_into_oplog\n   AFTER UPDATE ON "main"."orphans"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.users\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'users\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."users" WHERE "id" = new."deleted_by";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_orphans_family_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_orphans_family_id_into_oplog\n  AFTER INSERT ON "main"."orphans"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_orphans_family_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_orphans_family_id_into_oplog\n   AFTER UPDATE ON "main"."orphans"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_orphans_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_orphans_tenant_id_into_oplog\n  AFTER INSERT ON "main"."orphans"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_orphans_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_orphans_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."orphans"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.housings', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_housings_primarykey;',
            'CREATE TRIGGER update_ensure_main_housings_primarykey\n  BEFORE UPDATE ON "main"."housings"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_housings_into_oplog;',
            "CREATE TRIGGER insert_main_housings_into_oplog\n   AFTER INSERT ON \"main\".\"housings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.housings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'housings', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_housings_into_oplog;',
            "CREATE TRIGGER update_main_housings_into_oplog\n   AFTER UPDATE ON \"main\".\"housings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.housings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'housings', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_housings_into_oplog;',
            "CREATE TRIGGER delete_main_housings_into_oplog\n   AFTER DELETE ON \"main\".\"housings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.housings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'housings', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.furnishings', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_furnishings_primarykey;',
            'CREATE TRIGGER update_ensure_main_furnishings_primarykey\n  BEFORE UPDATE ON "main"."furnishings"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_furnishings_into_oplog;',
            "CREATE TRIGGER insert_main_furnishings_into_oplog\n   AFTER INSERT ON \"main\".\"furnishings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.furnishings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'furnishings', 'INSERT', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_furnishings_into_oplog;',
            "CREATE TRIGGER update_main_furnishings_into_oplog\n   AFTER UPDATE ON \"main\".\"furnishings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.furnishings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'furnishings', 'UPDATE', json_object('id', new.\"id\"), json_object('id', new.\"id\", 'name', new.\"name\"), json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_furnishings_into_oplog;',
            "CREATE TRIGGER delete_main_furnishings_into_oplog\n   AFTER DELETE ON \"main\".\"furnishings\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.furnishings')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'furnishings', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('id', old.\"id\", 'name', old.\"name\"), NULL);\nEND;",
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.income_sponsor', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_income_sponsor_primarykey;',
            'CREATE TRIGGER update_ensure_main_income_sponsor_primarykey\n  BEFORE UPDATE ON "main"."income_sponsor"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_income_sponsor_into_oplog;',
            "CREATE TRIGGER insert_main_income_sponsor_into_oplog\n   AFTER INSERT ON \"main\".\"income_sponsor\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.income_sponsor')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'income_sponsor', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'income_id', new.\"income_id\", 'sponsor_id', new.\"sponsor_id\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\", 'value', cast(new.\"value\" as TEXT)), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_income_sponsor_into_oplog;',
            "CREATE TRIGGER update_main_income_sponsor_into_oplog\n   AFTER UPDATE ON \"main\".\"income_sponsor\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.income_sponsor')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'income_sponsor', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'income_id', new.\"income_id\", 'sponsor_id', new.\"sponsor_id\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\", 'value', cast(new.\"value\" as TEXT)), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'income_id', old.\"income_id\", 'sponsor_id', old.\"sponsor_id\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\", 'value', cast(old.\"value\" as TEXT)), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_income_sponsor_into_oplog;',
            "CREATE TRIGGER delete_main_income_sponsor_into_oplog\n   AFTER DELETE ON \"main\".\"income_sponsor\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.income_sponsor')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'income_sponsor', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'income_id', old.\"income_id\", 'sponsor_id', old.\"sponsor_id\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\", 'value', cast(old.\"value\" as TEXT)), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_income_sponsor_income_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_income_sponsor_income_id_into_oplog\n  AFTER INSERT ON "main"."income_sponsor"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.incomes\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'incomes\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."incomes" WHERE "id" = new."income_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_income_sponsor_income_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_income_sponsor_income_id_into_oplog\n   AFTER UPDATE ON "main"."income_sponsor"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.incomes\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'incomes\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."incomes" WHERE "id" = new."income_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_income_sponsor_sponsor_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_income_sponsor_sponsor_id_into_oplog\n  AFTER INSERT ON "main"."income_sponsor"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.sponsors\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'sponsors\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."sponsors" WHERE "id" = new."sponsor_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_income_sponsor_sponsor_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_income_sponsor_sponsor_id_into_oplog\n   AFTER UPDATE ON "main"."income_sponsor"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.sponsors\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'sponsors\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."sponsors" WHERE "id" = new."sponsor_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_income_sponsor_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_income_sponsor_tenant_id_into_oplog\n  AFTER INSERT ON "main"."income_sponsor"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_income_sponsor_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_income_sponsor_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."income_sponsor"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.family_housing', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_family_housing_primarykey;',
            'CREATE TRIGGER update_ensure_main_family_housing_primarykey\n  BEFORE UPDATE ON "main"."family_housing"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_family_housing_into_oplog;',
            "CREATE TRIGGER insert_main_family_housing_into_oplog\n   AFTER INSERT ON \"main\".\"family_housing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_housing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_housing', 'INSERT', json_object('id', new.\"id\"), json_object('family_id', new.\"family_id\", 'housing_id', new.\"housing_id\", 'id', new.\"id\", 'value', new.\"value\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_family_housing_into_oplog;',
            "CREATE TRIGGER update_main_family_housing_into_oplog\n   AFTER UPDATE ON \"main\".\"family_housing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_housing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_housing', 'UPDATE', json_object('id', new.\"id\"), json_object('family_id', new.\"family_id\", 'housing_id', new.\"housing_id\", 'id', new.\"id\", 'value', new.\"value\"), json_object('family_id', old.\"family_id\", 'housing_id', old.\"housing_id\", 'id', old.\"id\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_family_housing_into_oplog;',
            "CREATE TRIGGER delete_main_family_housing_into_oplog\n   AFTER DELETE ON \"main\".\"family_housing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_housing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_housing', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('family_id', old.\"family_id\", 'housing_id', old.\"housing_id\", 'id', old.\"id\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_family_housing_family_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_family_housing_family_id_into_oplog\n  AFTER INSERT ON "main"."family_housing"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_family_housing_family_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_family_housing_family_id_into_oplog\n   AFTER UPDATE ON "main"."family_housing"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_family_housing_housing_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_family_housing_housing_id_into_oplog\n  AFTER INSERT ON "main"."family_housing"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.housings\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'housings\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."housings" WHERE "id" = new."housing_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_family_housing_housing_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_family_housing_housing_id_into_oplog\n   AFTER UPDATE ON "main"."family_housing"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.housings\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'housings\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."housings" WHERE "id" = new."housing_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.family_furnishing', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_family_furnishing_primarykey;',
            'CREATE TRIGGER update_ensure_main_family_furnishing_primarykey\n  BEFORE UPDATE ON "main"."family_furnishing"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_family_furnishing_into_oplog;',
            "CREATE TRIGGER insert_main_family_furnishing_into_oplog\n   AFTER INSERT ON \"main\".\"family_furnishing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_furnishing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_furnishing', 'INSERT', json_object('id', new.\"id\"), json_object('family_id', new.\"family_id\", 'furnishing_id', new.\"furnishing_id\", 'id', new.\"id\", 'value', new.\"value\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_family_furnishing_into_oplog;',
            "CREATE TRIGGER update_main_family_furnishing_into_oplog\n   AFTER UPDATE ON \"main\".\"family_furnishing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_furnishing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_furnishing', 'UPDATE', json_object('id', new.\"id\"), json_object('family_id', new.\"family_id\", 'furnishing_id', new.\"furnishing_id\", 'id', new.\"id\", 'value', new.\"value\"), json_object('family_id', old.\"family_id\", 'furnishing_id', old.\"furnishing_id\", 'id', old.\"id\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_family_furnishing_into_oplog;',
            "CREATE TRIGGER delete_main_family_furnishing_into_oplog\n   AFTER DELETE ON \"main\".\"family_furnishing\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_furnishing')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_furnishing', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('family_id', old.\"family_id\", 'furnishing_id', old.\"furnishing_id\", 'id', old.\"id\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_family_furnishing_family_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_family_furnishing_family_id_into_oplog\n  AFTER INSERT ON "main"."family_furnishing"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_family_furnishing_family_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_family_furnishing_family_id_into_oplog\n   AFTER UPDATE ON "main"."family_furnishing"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_family_furnishing_furnishing_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_family_furnishing_furnishing_id_into_oplog\n  AFTER INSERT ON "main"."family_furnishing"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.furnishings\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'furnishings\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."furnishings" WHERE "id" = new."furnishing_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_family_furnishing_furnishing_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_family_furnishing_furnishing_id_into_oplog\n   AFTER UPDATE ON "main"."family_furnishing"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.furnishings\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'furnishings\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."furnishings" WHERE "id" = new."furnishing_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sponsorships', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_sponsorships_primarykey;',
            'CREATE TRIGGER update_ensure_main_sponsorships_primarykey\n  BEFORE UPDATE ON "main"."sponsorships"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_sponsorships_into_oplog;',
            "CREATE TRIGGER insert_main_sponsorships_into_oplog\n   AFTER INSERT ON \"main\".\"sponsorships\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsorships')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsorships', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'deleted_at', new.\"deleted_at\", 'id', new.\"id\", 'name', new.\"name\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_sponsorships_into_oplog;',
            "CREATE TRIGGER update_main_sponsorships_into_oplog\n   AFTER UPDATE ON \"main\".\"sponsorships\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsorships')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsorships', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'deleted_at', new.\"deleted_at\", 'id', new.\"id\", 'name', new.\"name\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'deleted_at', old.\"deleted_at\", 'id', old.\"id\", 'name', old.\"name\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_sponsorships_into_oplog;',
            "CREATE TRIGGER delete_main_sponsorships_into_oplog\n   AFTER DELETE ON \"main\".\"sponsorships\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsorships')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsorships', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'deleted_at', old.\"deleted_at\", 'id', old.\"id\", 'name', old.\"name\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_sponsorships_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sponsorships_tenant_id_into_oplog\n  AFTER INSERT ON "main"."sponsorships"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sponsorships_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sponsorships_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."sponsorships"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.family_sponsorship', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_family_sponsorship_primarykey;',
            'CREATE TRIGGER update_ensure_main_family_sponsorship_primarykey\n  BEFORE UPDATE ON "main"."family_sponsorship"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_family_sponsorship_into_oplog;',
            "CREATE TRIGGER insert_main_family_sponsorship_into_oplog\n   AFTER INSERT ON \"main\".\"family_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_sponsorship', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'family_id', new.\"family_id\", 'id', new.\"id\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\", 'value', new.\"value\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_family_sponsorship_into_oplog;',
            "CREATE TRIGGER update_main_family_sponsorship_into_oplog\n   AFTER UPDATE ON \"main\".\"family_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_sponsorship', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'family_id', new.\"family_id\", 'id', new.\"id\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\", 'value', new.\"value\"), json_object('created_at', old.\"created_at\", 'family_id', old.\"family_id\", 'id', old.\"id\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_family_sponsorship_into_oplog;',
            "CREATE TRIGGER delete_main_family_sponsorship_into_oplog\n   AFTER DELETE ON \"main\".\"family_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.family_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'family_sponsorship', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'family_id', old.\"family_id\", 'id', old.\"id\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_family_sponsorship_family_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_family_sponsorship_family_id_into_oplog\n  AFTER INSERT ON "main"."family_sponsorship"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_family_sponsorship_family_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_family_sponsorship_family_id_into_oplog\n   AFTER UPDATE ON "main"."family_sponsorship"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.families\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'families\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."families" WHERE "id" = new."family_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_family_sponsorship_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_family_sponsorship_tenant_id_into_oplog\n  AFTER INSERT ON "main"."family_sponsorship"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_family_sponsorship_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_family_sponsorship_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."family_sponsorship"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.sponsor_sponsorship', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_sponsor_sponsorship_primarykey;',
            'CREATE TRIGGER update_ensure_main_sponsor_sponsorship_primarykey\n  BEFORE UPDATE ON "main"."sponsor_sponsorship"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_sponsor_sponsorship_into_oplog;',
            "CREATE TRIGGER insert_main_sponsor_sponsorship_into_oplog\n   AFTER INSERT ON \"main\".\"sponsor_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsor_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsor_sponsorship', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'sponsor_id', new.\"sponsor_id\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\", 'value', new.\"value\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_sponsor_sponsorship_into_oplog;',
            "CREATE TRIGGER update_main_sponsor_sponsorship_into_oplog\n   AFTER UPDATE ON \"main\".\"sponsor_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsor_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsor_sponsorship', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'sponsor_id', new.\"sponsor_id\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\", 'value', new.\"value\"), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'sponsor_id', old.\"sponsor_id\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_sponsor_sponsorship_into_oplog;',
            "CREATE TRIGGER delete_main_sponsor_sponsorship_into_oplog\n   AFTER DELETE ON \"main\".\"sponsor_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.sponsor_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'sponsor_sponsorship', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'sponsor_id', old.\"sponsor_id\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_sponsor_sponsorship_sponsor_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sponsor_sponsorship_sponsor_id_into_oplog\n  AFTER INSERT ON "main"."sponsor_sponsorship"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.sponsors\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'sponsors\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."sponsors" WHERE "id" = new."sponsor_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sponsor_sponsorship_sponsor_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sponsor_sponsorship_sponsor_id_into_oplog\n   AFTER UPDATE ON "main"."sponsor_sponsorship"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.sponsors\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'sponsors\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."sponsors" WHERE "id" = new."sponsor_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_sponsor_sponsorship_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_sponsor_sponsorship_tenant_id_into_oplog\n  AFTER INSERT ON "main"."sponsor_sponsorship"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_sponsor_sponsorship_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_sponsor_sponsorship_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."sponsor_sponsorship"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.orphan_sponsorship', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_orphan_sponsorship_primarykey;',
            'CREATE TRIGGER update_ensure_main_orphan_sponsorship_primarykey\n  BEFORE UPDATE ON "main"."orphan_sponsorship"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_orphan_sponsorship_into_oplog;',
            "CREATE TRIGGER insert_main_orphan_sponsorship_into_oplog\n   AFTER INSERT ON \"main\".\"orphan_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orphan_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orphan_sponsorship', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'orphan_id', new.\"orphan_id\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\", 'value', new.\"value\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_orphan_sponsorship_into_oplog;',
            "CREATE TRIGGER update_main_orphan_sponsorship_into_oplog\n   AFTER UPDATE ON \"main\".\"orphan_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orphan_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orphan_sponsorship', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'id', new.\"id\", 'orphan_id', new.\"orphan_id\", 'tenant_id', new.\"tenant_id\", 'type', new.\"type\", 'updated_at', new.\"updated_at\", 'value', new.\"value\"), json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'orphan_id', old.\"orphan_id\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_orphan_sponsorship_into_oplog;',
            "CREATE TRIGGER delete_main_orphan_sponsorship_into_oplog\n   AFTER DELETE ON \"main\".\"orphan_sponsorship\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.orphan_sponsorship')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'orphan_sponsorship', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'id', old.\"id\", 'orphan_id', old.\"orphan_id\", 'tenant_id', old.\"tenant_id\", 'type', old.\"type\", 'updated_at', old.\"updated_at\", 'value', old.\"value\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_orphan_sponsorship_orphan_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_orphan_sponsorship_orphan_id_into_oplog\n  AFTER INSERT ON "main"."orphan_sponsorship"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.orphans\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'orphans\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."orphans" WHERE "id" = new."orphan_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_orphan_sponsorship_orphan_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_orphan_sponsorship_orphan_id_into_oplog\n   AFTER UPDATE ON "main"."orphan_sponsorship"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.orphans\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'orphans\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."orphans" WHERE "id" = new."orphan_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_insert_main_orphan_sponsorship_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_orphan_sponsorship_tenant_id_into_oplog\n  AFTER INSERT ON "main"."orphan_sponsorship"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_orphan_sponsorship_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_orphan_sponsorship_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."orphan_sponsorship"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            "INSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.benefactors', 1);",
            'DROP TRIGGER IF EXISTS update_ensure_main_benefactors_primarykey;',
            'CREATE TRIGGER update_ensure_main_benefactors_primarykey\n  BEFORE UPDATE ON "main"."benefactors"\nBEGIN\n  SELECT\n    CASE\n      WHEN old."id" != new."id" THEN\n      \t\tRAISE (ABORT, \'cannot change the value of column id as it belongs to the primary key\')\n    END;\nEND;',
            'DROP TRIGGER IF EXISTS insert_main_benefactors_into_oplog;',
            "CREATE TRIGGER insert_main_benefactors_into_oplog\n   AFTER INSERT ON \"main\".\"benefactors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.benefactors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'benefactors', 'INSERT', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'deleted_at', new.\"deleted_at\", 'id', new.\"id\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), NULL, NULL);\nEND;",
            'DROP TRIGGER IF EXISTS update_main_benefactors_into_oplog;',
            "CREATE TRIGGER update_main_benefactors_into_oplog\n   AFTER UPDATE ON \"main\".\"benefactors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.benefactors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'benefactors', 'UPDATE', json_object('id', new.\"id\"), json_object('created_at', new.\"created_at\", 'deleted_at', new.\"deleted_at\", 'id', new.\"id\", 'tenant_id', new.\"tenant_id\", 'updated_at', new.\"updated_at\"), json_object('created_at', old.\"created_at\", 'deleted_at', old.\"deleted_at\", 'id', old.\"id\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS delete_main_benefactors_into_oplog;',
            "CREATE TRIGGER delete_main_benefactors_into_oplog\n   AFTER DELETE ON \"main\".\"benefactors\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.benefactors')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'benefactors', 'DELETE', json_object('id', old.\"id\"), NULL, json_object('created_at', old.\"created_at\", 'deleted_at', old.\"deleted_at\", 'id', old.\"id\", 'tenant_id', old.\"tenant_id\", 'updated_at', old.\"updated_at\"), NULL);\nEND;",
            'DROP TRIGGER IF EXISTS compensation_insert_main_benefactors_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_insert_main_benefactors_tenant_id_into_oplog\n  AFTER INSERT ON "main"."benefactors"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n       1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;',
            'DROP TRIGGER IF EXISTS compensation_update_main_benefactors_tenant_id_into_oplog;',
            'CREATE TRIGGER compensation_update_main_benefactors_tenant_id_into_oplog\n   AFTER UPDATE ON "main"."benefactors"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == \'main.tenants\') AND\n        1 == (SELECT value from _electric_meta WHERE key == \'compensations\')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT \'main\', \'tenants\', \'COMPENSATION\', json_object(\'id\', "id"), json_object(\'id\', "id"), NULL, NULL\n  FROM "main"."tenants" WHERE "id" = new."tenant_id";\nEND;'
        ],
        version: '100'
    }
]
