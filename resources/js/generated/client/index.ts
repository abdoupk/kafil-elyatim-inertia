import { z } from 'zod'
import type { Prisma } from './prismaClient'
import { type TableSchema, DbSchema, Relation, ElectricClient, type HKT } from 'electric-sql/client/model'
import migrations from './migrations'

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null

export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
    z.null(),
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => z.array(JsonValue)),
    z.lazy(() => z.record(JsonValue))
])

export type JsonValueType = z.infer<typeof JsonValue>

export const NullableJsonValue = JsonValue.nullable()

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
    z.null(),
    z.string(),
    z.number(),
    z.boolean(),
    z.lazy(() => z.array(InputJsonValue.nullable())),
    z.lazy(() => z.record(InputJsonValue.nullable()))
])

export type InputJsonValueType = z.infer<typeof InputJsonValue>

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const BenefactorsScalarFieldEnumSchema = z.enum(['id', 'tenant_id', 'deleted_at', 'created_at', 'updated_at'])

export const CacheScalarFieldEnumSchema = z.enum(['key', 'value', 'expiration'])

export const Cache_locksScalarFieldEnumSchema = z.enum(['key', 'owner', 'expiration'])

export const DomainsScalarFieldEnumSchema = z.enum(['id', 'domain', 'tenant_id', 'created_at', 'updated_at'])

export const FamiliesScalarFieldEnumSchema = z.enum(['id', 'name', 'report', 'tenant_id', 'created_at', 'updated_at'])

export const Family_furnishingScalarFieldEnumSchema = z.enum(['id', 'family_id', 'furnishing_id', 'value'])

export const Family_housingScalarFieldEnumSchema = z.enum(['id', 'family_id', 'housing_id', 'value'])

export const Family_sponsorshipScalarFieldEnumSchema = z.enum([
    'id',
    'family_id',
    'type',
    'value',
    'tenant_id',
    'created_at',
    'updated_at'
])

export const FurnishingsScalarFieldEnumSchema = z.enum(['id', 'name'])

export const HousingsScalarFieldEnumSchema = z.enum(['id', 'name'])

export const Income_sponsorScalarFieldEnumSchema = z.enum([
    'id',
    'income_id',
    'sponsor_id',
    'tenant_id',
    'value',
    'created_at',
    'updated_at'
])

export const IncomesScalarFieldEnumSchema = z.enum(['id', 'name'])

export const JsonNullValueFilterSchema = z.enum(['DbNull', 'JsonNull', 'AnyNull'])

export const JsonNullValueInputSchema = z.enum(['JsonNull'])

export const MediaScalarFieldEnumSchema = z.enum([
    'id',
    'model_type',
    'model_id',
    'uuid',
    'collection_name',
    'name',
    'file_name',
    'mime_type',
    'disk',
    'conversions_disk',
    'size',
    'manipulations',
    'custom_properties',
    'generated_conversions',
    'responsive_images',
    'order_column',
    'created_at',
    'updated_at'
])

export const Model_has_permissionsScalarFieldEnumSchema = z.enum(['permission_id', 'model_type', 'model_uuid'])

export const Model_has_rolesScalarFieldEnumSchema = z.enum(['role_id', 'model_type', 'model_uuid'])

export const NullableJsonNullValueInputSchema = z.enum(['DbNull', 'JsonNull'])

export const Orphan_sponsorshipScalarFieldEnumSchema = z.enum([
    'id',
    'orphan_id',
    'type',
    'value',
    'tenant_id',
    'created_at',
    'updated_at'
])

export const OrphansScalarFieldEnumSchema = z.enum([
    'id',
    'first_name',
    'last_name',
    'birth_date',
    'family_status',
    'health_status',
    'academic_level',
    'shoes_size',
    'pants_size',
    'shirt_size',
    'note',
    'tenant_id',
    'family_id',
    'created_by',
    'deleted_by',
    'created_at',
    'updated_at'
])

export const Password_reset_tokensScalarFieldEnumSchema = z.enum(['email', 'token', 'created_at'])

export const PermissionsScalarFieldEnumSchema = z.enum(['uuid', 'name', 'guard_name', 'created_at', 'updated_at'])

export const Personal_access_tokensScalarFieldEnumSchema = z.enum([
    'id',
    'tokenable_type',
    'tokenable_id',
    'name',
    'token',
    'abilities',
    'last_used_at',
    'expires_at',
    'created_at',
    'updated_at'
])

export const QueryModeSchema = z.enum(['default', 'insensitive'])

export const Role_has_permissionsScalarFieldEnumSchema = z.enum(['permission_id', 'role_id'])

export const RolesScalarFieldEnumSchema = z.enum(['uuid', 'name', 'guard_name', 'created_at', 'updated_at'])

export const Second_sponsorsScalarFieldEnumSchema = z.enum([
    'id',
    'first_name',
    'last_name',
    'degree_of_kinship',
    'phone_number',
    'address',
    'income',
    'family_id',
    'tenant_id',
    'deleted_at',
    'created_at',
    'updated_at'
])

export const SessionsScalarFieldEnumSchema = z.enum([
    'id',
    'user_id',
    'ip_address',
    'user_agent',
    'payload',
    'last_activity'
])

export const SettingsScalarFieldEnumSchema = z.enum([
    'id',
    'user_id',
    'theme',
    'color_scheme',
    'layout',
    'appearance',
    'notifications',
    'created_at',
    'updated_at'
])

export const SortOrderSchema = z.enum(['asc', 'desc'])

export const Sponsor_sponsorshipScalarFieldEnumSchema = z.enum([
    'id',
    'sponsor_id',
    'type',
    'value',
    'tenant_id',
    'created_at',
    'updated_at'
])

export const SponsorsScalarFieldEnumSchema = z.enum([
    'id',
    'zone_id',
    'file_number',
    'start_date',
    'name',
    'address',
    'phone_number',
    'sponsorship_type',
    'birth_date',
    'father_name',
    'mother_name',
    'birth_certificate_number',
    'academic_level',
    'function',
    'health_status',
    'diploma',
    'card_number',
    'tenant_id',
    'created_by',
    'deleted_by',
    'deleted_at',
    'created_at',
    'updated_at'
])

export const SponsorshipsScalarFieldEnumSchema = z.enum([
    'id',
    'type',
    'name',
    'tenant_id',
    'deleted_at',
    'created_at',
    'updated_at'
])

export const SpousesScalarFieldEnumSchema = z.enum([
    'id',
    'first_name',
    'last_name',
    'birth_date',
    'death_date',
    'function',
    'income',
    'family_id',
    'tenant_id',
    'created_at',
    'updated_at'
])

export const TenantsScalarFieldEnumSchema = z.enum(['id', 'data', 'created_at', 'updated_at'])

export const TransactionIsolationLevelSchema = z.enum([
    'ReadUncommitted',
    'ReadCommitted',
    'RepeatableRead',
    'Serializable'
])

export const UsersScalarFieldEnumSchema = z.enum([
    'id',
    'first_name',
    'last_name',
    'phone',
    'email',
    'email_verified_at',
    'password',
    'remember_token',
    'tenant_id',
    'created_at',
    'updated_at'
])

export const appearanceSchema = z.enum(['light', 'dark'])

export type appearanceType = `${z.infer<typeof appearanceSchema>}`

export const color_schemeSchema = z.enum(['default', 'theme_1', 'theme_2', 'theme_3', 'theme_4'])

export type color_schemeType = `${z.infer<typeof color_schemeSchema>}`

export const family_sponsorship_typeSchema = z.enum([
    'ramadan_basket',
    'monthly_expense',
    'eid_al_adha',
    'zakat',
    'housing_assistance'
])

export type family_sponsorship_typeType = `${z.infer<typeof family_sponsorship_typeSchema>}`

export const layoutSchema = z.enum(['top_menu', 'simple_menu', 'side_menu'])

export type layoutType = `${z.infer<typeof layoutSchema>}`

export const orphan_sponsorship_typeSchema = z.enum([
    'school_bag',
    'private_lessons',
    'eid_suit',
    'summer_camp',
    'college_trips',
    'fellowship',
    'guaranteed_medical',
    'other'
])

export type orphan_sponsorship_typeType = `${z.infer<typeof orphan_sponsorship_typeSchema>}`

export const sponsor_sponsorship_typeSchema = z.enum([
    'guaranteed_medical',
    'support_the_draft',
    'literacy_classes',
    'direct_sponsorship'
])

export type sponsor_sponsorship_typeType = `${z.infer<typeof sponsor_sponsorship_typeSchema>}`

export const sponsorship_typeSchema = z.enum(['family', 'orphan', 'sponsor'])

export type sponsorship_typeType = `${z.infer<typeof sponsorship_typeSchema>}`

export const themeSchema = z.enum(['enigma', 'icewall', 'tinker', 'rubick'])

export type themeType = `${z.infer<typeof themeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// BENEFACTORS SCHEMA
/////////////////////////////////////////

export const BenefactorsSchema = z.object({
    id: z.string().uuid(),
    tenant_id: z.string(),
    deleted_at: z.coerce.date().nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Benefactors = z.infer<typeof BenefactorsSchema>

/////////////////////////////////////////
// CACHE SCHEMA
/////////////////////////////////////////

export const CacheSchema = z.object({
    key: z.string(),
    value: z.string(),
    expiration: z.number().int().gte(-2147483648).lte(2147483647)
})

export type Cache = z.infer<typeof CacheSchema>

/////////////////////////////////////////
// CACHE LOCKS SCHEMA
/////////////////////////////////////////

export const Cache_locksSchema = z.object({
    key: z.string(),
    owner: z.string(),
    expiration: z.number().int().gte(-2147483648).lte(2147483647)
})

export type Cache_locks = z.infer<typeof Cache_locksSchema>

/////////////////////////////////////////
// DOMAINS SCHEMA
/////////////////////////////////////////

export const DomainsSchema = z.object({
    id: z.string().uuid(),
    domain: z.string(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Domains = z.infer<typeof DomainsSchema>

/////////////////////////////////////////
// FAMILIES SCHEMA
/////////////////////////////////////////

export const FamiliesSchema = z.object({
    id: z.string().uuid(),
    name: z.string(),
    report: z.string(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Families = z.infer<typeof FamiliesSchema>

/////////////////////////////////////////
// FAMILY FURNISHING SCHEMA
/////////////////////////////////////////

export const Family_furnishingSchema = z.object({
    id: z.string().uuid(),
    family_id: z.string().uuid(),
    furnishing_id: z.string().uuid(),
    value: z.string()
})

export type Family_furnishing = z.infer<typeof Family_furnishingSchema>

/////////////////////////////////////////
// FAMILY HOUSING SCHEMA
/////////////////////////////////////////

export const Family_housingSchema = z.object({
    id: z.string().uuid(),
    family_id: z.string().uuid(),
    housing_id: z.string().uuid(),
    value: z.string()
})

export type Family_housing = z.infer<typeof Family_housingSchema>

/////////////////////////////////////////
// FAMILY SPONSORSHIP SCHEMA
/////////////////////////////////////////

export const Family_sponsorshipSchema = z.object({
    type: family_sponsorship_typeSchema,
    id: z.string().uuid(),
    family_id: z.string().uuid(),
    value: z.string(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Family_sponsorship = z.infer<typeof Family_sponsorshipSchema>

/////////////////////////////////////////
// FURNISHINGS SCHEMA
/////////////////////////////////////////

export const FurnishingsSchema = z.object({
    id: z.string().uuid(),
    name: z.string()
})

export type Furnishings = z.infer<typeof FurnishingsSchema>

/////////////////////////////////////////
// HOUSINGS SCHEMA
/////////////////////////////////////////

export const HousingsSchema = z.object({
    id: z.string().uuid(),
    name: z.string()
})

export type Housings = z.infer<typeof HousingsSchema>

/////////////////////////////////////////
// INCOME SPONSOR SCHEMA
/////////////////////////////////////////

export const Income_sponsorSchema = z.object({
    id: z.string().uuid(),
    income_id: z.string().uuid(),
    sponsor_id: z.string().uuid(),
    tenant_id: z.string(),
    value: z.number().or(z.nan()),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Income_sponsor = z.infer<typeof Income_sponsorSchema>

/////////////////////////////////////////
// INCOMES SCHEMA
/////////////////////////////////////////

export const IncomesSchema = z.object({
    id: z.string().uuid(),
    name: z.string()
})

export type Incomes = z.infer<typeof IncomesSchema>

/////////////////////////////////////////
// MEDIA SCHEMA
/////////////////////////////////////////

export const MediaSchema = z.object({
    id: z.string().uuid(),
    model_type: z.string(),
    model_id: z.bigint(),
    uuid: z.string().uuid().nullable(),
    collection_name: z.string(),
    name: z.string(),
    file_name: z.string(),
    mime_type: z.string().nullable(),
    disk: z.string(),
    conversions_disk: z.string().nullable(),
    size: z.bigint(),
    manipulations: InputJsonValue,
    custom_properties: InputJsonValue,
    generated_conversions: InputJsonValue,
    responsive_images: InputJsonValue,
    order_column: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Media = z.infer<typeof MediaSchema>

/////////////////////////////////////////
// MODEL HAS PERMISSIONS SCHEMA
/////////////////////////////////////////

export const Model_has_permissionsSchema = z.object({
    permission_id: z.string().uuid(),
    model_type: z.string(),
    model_uuid: z.string().uuid()
})

export type Model_has_permissions = z.infer<typeof Model_has_permissionsSchema>

/////////////////////////////////////////
// MODEL HAS ROLES SCHEMA
/////////////////////////////////////////

export const Model_has_rolesSchema = z.object({
    role_id: z.string().uuid(),
    model_type: z.string(),
    model_uuid: z.string().uuid()
})

export type Model_has_roles = z.infer<typeof Model_has_rolesSchema>

/////////////////////////////////////////
// ORPHAN SPONSORSHIP SCHEMA
/////////////////////////////////////////

export const Orphan_sponsorshipSchema = z.object({
    type: orphan_sponsorship_typeSchema,
    id: z.string().uuid(),
    orphan_id: z.string().uuid(),
    value: z.string().nullable(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Orphan_sponsorship = z.infer<typeof Orphan_sponsorshipSchema>

/////////////////////////////////////////
// ORPHANS SCHEMA
/////////////////////////////////////////

export const OrphansSchema = z.object({
    id: z.string().uuid(),
    first_name: z.string(),
    last_name: z.string(),
    birth_date: z.coerce.date(),
    family_status: z.string(),
    health_status: z.string(),
    academic_level: z.string(),
    shoes_size: z.string(),
    pants_size: z.string(),
    shirt_size: z.string(),
    note: z.string(),
    tenant_id: z.string(),
    family_id: z.string().uuid(),
    created_by: z.string().uuid(),
    deleted_by: z.string().uuid().nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Orphans = z.infer<typeof OrphansSchema>

/////////////////////////////////////////
// PASSWORD RESET TOKENS SCHEMA
/////////////////////////////////////////

export const Password_reset_tokensSchema = z.object({
    email: z.string(),
    token: z.string(),
    created_at: z.coerce.date().nullable()
})

export type Password_reset_tokens = z.infer<typeof Password_reset_tokensSchema>

/////////////////////////////////////////
// PERMISSIONS SCHEMA
/////////////////////////////////////////

export const PermissionsSchema = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    guard_name: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Permissions = z.infer<typeof PermissionsSchema>

/////////////////////////////////////////
// PERSONAL ACCESS TOKENS SCHEMA
/////////////////////////////////////////

export const Personal_access_tokensSchema = z.object({
    id: z.string().uuid(),
    tokenable_type: z.string(),
    tokenable_id: z.string().uuid(),
    name: z.string(),
    token: z.string(),
    abilities: z.string().nullable(),
    last_used_at: z.coerce.date().nullable(),
    expires_at: z.coerce.date().nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Personal_access_tokens = z.infer<typeof Personal_access_tokensSchema>

/////////////////////////////////////////
// ROLE HAS PERMISSIONS SCHEMA
/////////////////////////////////////////

export const Role_has_permissionsSchema = z.object({
    permission_id: z.string().uuid(),
    role_id: z.string().uuid()
})

export type Role_has_permissions = z.infer<typeof Role_has_permissionsSchema>

/////////////////////////////////////////
// ROLES SCHEMA
/////////////////////////////////////////

export const RolesSchema = z.object({
    uuid: z.string().uuid(),
    name: z.string(),
    guard_name: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Roles = z.infer<typeof RolesSchema>

/////////////////////////////////////////
// SECOND SPONSORS SCHEMA
/////////////////////////////////////////

export const Second_sponsorsSchema = z.object({
    id: z.string().uuid(),
    first_name: z.string(),
    last_name: z.string(),
    degree_of_kinship: z.string(),
    phone_number: z.string(),
    address: z.string(),
    income: z.number().or(z.nan()),
    family_id: z.string().uuid(),
    tenant_id: z.string(),
    deleted_at: z.coerce.date().nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Second_sponsors = z.infer<typeof Second_sponsorsSchema>

/////////////////////////////////////////
// SESSIONS SCHEMA
/////////////////////////////////////////

export const SessionsSchema = z.object({
    id: z.string(),
    user_id: z.string().uuid().nullable(),
    ip_address: z.string().nullable(),
    user_agent: z.string().nullable(),
    payload: z.string(),
    last_activity: z.number().int().gte(-2147483648).lte(2147483647)
})

export type Sessions = z.infer<typeof SessionsSchema>

/////////////////////////////////////////
// SETTINGS SCHEMA
/////////////////////////////////////////

export const SettingsSchema = z.object({
    theme: themeSchema,
    color_scheme: color_schemeSchema,
    layout: layoutSchema,
    appearance: appearanceSchema,
    id: z.string().uuid(),
    user_id: z.string().uuid(),
    notifications: NullableJsonValue.optional(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Settings = z.infer<typeof SettingsSchema>

/////////////////////////////////////////
// SPONSOR SPONSORSHIP SCHEMA
/////////////////////////////////////////

export const Sponsor_sponsorshipSchema = z.object({
    type: sponsor_sponsorship_typeSchema,
    id: z.string().uuid(),
    sponsor_id: z.string().uuid(),
    value: z.string(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Sponsor_sponsorship = z.infer<typeof Sponsor_sponsorshipSchema>

/////////////////////////////////////////
// SPONSORS SCHEMA
/////////////////////////////////////////

export const SponsorsSchema = z.object({
    id: z.string().uuid(),
    zone_id: z.string().uuid(),
    file_number: z.number().int().gte(-2147483648).lte(2147483647),
    start_date: z.coerce.date(),
    name: z.string(),
    address: z.string(),
    phone_number: z.string(),
    sponsorship_type: z.string(),
    birth_date: z.coerce.date(),
    father_name: z.string(),
    mother_name: z.string(),
    birth_certificate_number: z.string(),
    academic_level: z.string(),
    function: z.string(),
    health_status: z.string(),
    diploma: z.string().nullable(),
    card_number: z.string().nullable(),
    tenant_id: z.string(),
    created_by: z.string().uuid(),
    deleted_by: z.string().uuid().nullable(),
    deleted_at: z.coerce.date().nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Sponsors = z.infer<typeof SponsorsSchema>

/////////////////////////////////////////
// SPONSORSHIPS SCHEMA
/////////////////////////////////////////

export const SponsorshipsSchema = z.object({
    type: sponsorship_typeSchema,
    id: z.string().uuid(),
    name: z.string(),
    tenant_id: z.string(),
    deleted_at: z.coerce.date().nullable(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Sponsorships = z.infer<typeof SponsorshipsSchema>

/////////////////////////////////////////
// SPOUSES SCHEMA
/////////////////////////////////////////

export const SpousesSchema = z.object({
    id: z.string().uuid(),
    first_name: z.string(),
    last_name: z.string(),
    birth_date: z.coerce.date(),
    death_date: z.coerce.date(),
    function: z.string(),
    income: z.number().or(z.nan()),
    family_id: z.string().uuid(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Spouses = z.infer<typeof SpousesSchema>

/////////////////////////////////////////
// TENANTS SCHEMA
/////////////////////////////////////////

export const TenantsSchema = z.object({
    id: z.string(),
    data: NullableJsonValue.optional(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Tenants = z.infer<typeof TenantsSchema>

/////////////////////////////////////////
// USERS SCHEMA
/////////////////////////////////////////

export const UsersSchema = z.object({
    id: z.string().uuid(),
    first_name: z.string(),
    last_name: z.string(),
    phone: z.string(),
    email: z.string(),
    email_verified_at: z.coerce.date().nullable(),
    password: z.string(),
    remember_token: z.string().nullable(),
    tenant_id: z.string(),
    created_at: z.coerce.date().nullable(),
    updated_at: z.coerce.date().nullable()
})

export type Users = z.infer<typeof UsersSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// BENEFACTORS
//------------------------------------------------------

export const BenefactorsIncludeSchema: z.ZodType<Prisma.BenefactorsInclude> = z
    .object({
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const BenefactorsArgsSchema: z.ZodType<Prisma.BenefactorsArgs> = z
    .object({
        select: z.lazy(() => BenefactorsSelectSchema).optional(),
        include: z.lazy(() => BenefactorsIncludeSchema).optional()
    })
    .strict()

export const BenefactorsSelectSchema: z.ZodType<Prisma.BenefactorsSelect> = z
    .object({
        id: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        deleted_at: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// CACHE
//------------------------------------------------------

export const CacheSelectSchema: z.ZodType<Prisma.CacheSelect> = z
    .object({
        key: z.boolean().optional(),
        value: z.boolean().optional(),
        expiration: z.boolean().optional()
    })
    .strict()

// CACHE LOCKS
//------------------------------------------------------

export const Cache_locksSelectSchema: z.ZodType<Prisma.Cache_locksSelect> = z
    .object({
        key: z.boolean().optional(),
        owner: z.boolean().optional(),
        expiration: z.boolean().optional()
    })
    .strict()

// DOMAINS
//------------------------------------------------------

export const DomainsIncludeSchema: z.ZodType<Prisma.DomainsInclude> = z
    .object({
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const DomainsArgsSchema: z.ZodType<Prisma.DomainsArgs> = z
    .object({
        select: z.lazy(() => DomainsSelectSchema).optional(),
        include: z.lazy(() => DomainsIncludeSchema).optional()
    })
    .strict()

export const DomainsSelectSchema: z.ZodType<Prisma.DomainsSelect> = z
    .object({
        id: z.boolean().optional(),
        domain: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// FAMILIES
//------------------------------------------------------

export const FamiliesIncludeSchema: z.ZodType<Prisma.FamiliesInclude> = z
    .object({
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        family_furnishing: z.union([z.boolean(), z.lazy(() => Family_furnishingFindManyArgsSchema)]).optional(),
        family_housing: z.union([z.boolean(), z.lazy(() => Family_housingFindManyArgsSchema)]).optional(),
        family_sponsorship: z.union([z.boolean(), z.lazy(() => Family_sponsorshipFindManyArgsSchema)]).optional(),
        orphans: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        second_sponsors: z.union([z.boolean(), z.lazy(() => Second_sponsorsFindManyArgsSchema)]).optional(),
        spouses: z.union([z.boolean(), z.lazy(() => SpousesFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => FamiliesCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const FamiliesArgsSchema: z.ZodType<Prisma.FamiliesArgs> = z
    .object({
        select: z.lazy(() => FamiliesSelectSchema).optional(),
        include: z.lazy(() => FamiliesIncludeSchema).optional()
    })
    .strict()

export const FamiliesCountOutputTypeArgsSchema: z.ZodType<Prisma.FamiliesCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => FamiliesCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const FamiliesCountOutputTypeSelectSchema: z.ZodType<Prisma.FamiliesCountOutputTypeSelect> = z
    .object({
        family_furnishing: z.boolean().optional(),
        family_housing: z.boolean().optional(),
        family_sponsorship: z.boolean().optional(),
        orphans: z.boolean().optional(),
        second_sponsors: z.boolean().optional(),
        spouses: z.boolean().optional()
    })
    .strict()

export const FamiliesSelectSchema: z.ZodType<Prisma.FamiliesSelect> = z
    .object({
        id: z.boolean().optional(),
        name: z.boolean().optional(),
        report: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        family_furnishing: z.union([z.boolean(), z.lazy(() => Family_furnishingFindManyArgsSchema)]).optional(),
        family_housing: z.union([z.boolean(), z.lazy(() => Family_housingFindManyArgsSchema)]).optional(),
        family_sponsorship: z.union([z.boolean(), z.lazy(() => Family_sponsorshipFindManyArgsSchema)]).optional(),
        orphans: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        second_sponsors: z.union([z.boolean(), z.lazy(() => Second_sponsorsFindManyArgsSchema)]).optional(),
        spouses: z.union([z.boolean(), z.lazy(() => SpousesFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => FamiliesCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// FAMILY FURNISHING
//------------------------------------------------------

export const Family_furnishingIncludeSchema: z.ZodType<Prisma.Family_furnishingInclude> = z
    .object({
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        furnishings: z.union([z.boolean(), z.lazy(() => FurnishingsArgsSchema)]).optional()
    })
    .strict()

export const Family_furnishingArgsSchema: z.ZodType<Prisma.Family_furnishingArgs> = z
    .object({
        select: z.lazy(() => Family_furnishingSelectSchema).optional(),
        include: z.lazy(() => Family_furnishingIncludeSchema).optional()
    })
    .strict()

export const Family_furnishingSelectSchema: z.ZodType<Prisma.Family_furnishingSelect> = z
    .object({
        id: z.boolean().optional(),
        family_id: z.boolean().optional(),
        furnishing_id: z.boolean().optional(),
        value: z.boolean().optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        furnishings: z.union([z.boolean(), z.lazy(() => FurnishingsArgsSchema)]).optional()
    })
    .strict()

// FAMILY HOUSING
//------------------------------------------------------

export const Family_housingIncludeSchema: z.ZodType<Prisma.Family_housingInclude> = z
    .object({
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        housings: z.union([z.boolean(), z.lazy(() => HousingsArgsSchema)]).optional()
    })
    .strict()

export const Family_housingArgsSchema: z.ZodType<Prisma.Family_housingArgs> = z
    .object({
        select: z.lazy(() => Family_housingSelectSchema).optional(),
        include: z.lazy(() => Family_housingIncludeSchema).optional()
    })
    .strict()

export const Family_housingSelectSchema: z.ZodType<Prisma.Family_housingSelect> = z
    .object({
        id: z.boolean().optional(),
        family_id: z.boolean().optional(),
        housing_id: z.boolean().optional(),
        value: z.boolean().optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        housings: z.union([z.boolean(), z.lazy(() => HousingsArgsSchema)]).optional()
    })
    .strict()

// FAMILY SPONSORSHIP
//------------------------------------------------------

export const Family_sponsorshipIncludeSchema: z.ZodType<Prisma.Family_sponsorshipInclude> = z
    .object({
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const Family_sponsorshipArgsSchema: z.ZodType<Prisma.Family_sponsorshipArgs> = z
    .object({
        select: z.lazy(() => Family_sponsorshipSelectSchema).optional(),
        include: z.lazy(() => Family_sponsorshipIncludeSchema).optional()
    })
    .strict()

export const Family_sponsorshipSelectSchema: z.ZodType<Prisma.Family_sponsorshipSelect> = z
    .object({
        id: z.boolean().optional(),
        family_id: z.boolean().optional(),
        type: z.boolean().optional(),
        value: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// FURNISHINGS
//------------------------------------------------------

export const FurnishingsIncludeSchema: z.ZodType<Prisma.FurnishingsInclude> = z
    .object({
        family_furnishing: z.union([z.boolean(), z.lazy(() => Family_furnishingFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => FurnishingsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const FurnishingsArgsSchema: z.ZodType<Prisma.FurnishingsArgs> = z
    .object({
        select: z.lazy(() => FurnishingsSelectSchema).optional(),
        include: z.lazy(() => FurnishingsIncludeSchema).optional()
    })
    .strict()

export const FurnishingsCountOutputTypeArgsSchema: z.ZodType<Prisma.FurnishingsCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => FurnishingsCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const FurnishingsCountOutputTypeSelectSchema: z.ZodType<Prisma.FurnishingsCountOutputTypeSelect> = z
    .object({
        family_furnishing: z.boolean().optional()
    })
    .strict()

export const FurnishingsSelectSchema: z.ZodType<Prisma.FurnishingsSelect> = z
    .object({
        id: z.boolean().optional(),
        name: z.boolean().optional(),
        family_furnishing: z.union([z.boolean(), z.lazy(() => Family_furnishingFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => FurnishingsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// HOUSINGS
//------------------------------------------------------

export const HousingsIncludeSchema: z.ZodType<Prisma.HousingsInclude> = z
    .object({
        family_housing: z.union([z.boolean(), z.lazy(() => Family_housingFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => HousingsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const HousingsArgsSchema: z.ZodType<Prisma.HousingsArgs> = z
    .object({
        select: z.lazy(() => HousingsSelectSchema).optional(),
        include: z.lazy(() => HousingsIncludeSchema).optional()
    })
    .strict()

export const HousingsCountOutputTypeArgsSchema: z.ZodType<Prisma.HousingsCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => HousingsCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const HousingsCountOutputTypeSelectSchema: z.ZodType<Prisma.HousingsCountOutputTypeSelect> = z
    .object({
        family_housing: z.boolean().optional()
    })
    .strict()

export const HousingsSelectSchema: z.ZodType<Prisma.HousingsSelect> = z
    .object({
        id: z.boolean().optional(),
        name: z.boolean().optional(),
        family_housing: z.union([z.boolean(), z.lazy(() => Family_housingFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => HousingsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// INCOME SPONSOR
//------------------------------------------------------

export const Income_sponsorIncludeSchema: z.ZodType<Prisma.Income_sponsorInclude> = z
    .object({
        incomes: z.union([z.boolean(), z.lazy(() => IncomesArgsSchema)]).optional(),
        sponsors: z.union([z.boolean(), z.lazy(() => SponsorsArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const Income_sponsorArgsSchema: z.ZodType<Prisma.Income_sponsorArgs> = z
    .object({
        select: z.lazy(() => Income_sponsorSelectSchema).optional(),
        include: z.lazy(() => Income_sponsorIncludeSchema).optional()
    })
    .strict()

export const Income_sponsorSelectSchema: z.ZodType<Prisma.Income_sponsorSelect> = z
    .object({
        id: z.boolean().optional(),
        income_id: z.boolean().optional(),
        sponsor_id: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        value: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        incomes: z.union([z.boolean(), z.lazy(() => IncomesArgsSchema)]).optional(),
        sponsors: z.union([z.boolean(), z.lazy(() => SponsorsArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// INCOMES
//------------------------------------------------------

export const IncomesIncludeSchema: z.ZodType<Prisma.IncomesInclude> = z
    .object({
        income_sponsor: z.union([z.boolean(), z.lazy(() => Income_sponsorFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => IncomesCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const IncomesArgsSchema: z.ZodType<Prisma.IncomesArgs> = z
    .object({
        select: z.lazy(() => IncomesSelectSchema).optional(),
        include: z.lazy(() => IncomesIncludeSchema).optional()
    })
    .strict()

export const IncomesCountOutputTypeArgsSchema: z.ZodType<Prisma.IncomesCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => IncomesCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const IncomesCountOutputTypeSelectSchema: z.ZodType<Prisma.IncomesCountOutputTypeSelect> = z
    .object({
        income_sponsor: z.boolean().optional()
    })
    .strict()

export const IncomesSelectSchema: z.ZodType<Prisma.IncomesSelect> = z
    .object({
        id: z.boolean().optional(),
        name: z.boolean().optional(),
        income_sponsor: z.union([z.boolean(), z.lazy(() => Income_sponsorFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => IncomesCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// MEDIA
//------------------------------------------------------

export const MediaSelectSchema: z.ZodType<Prisma.MediaSelect> = z
    .object({
        id: z.boolean().optional(),
        model_type: z.boolean().optional(),
        model_id: z.boolean().optional(),
        uuid: z.boolean().optional(),
        collection_name: z.boolean().optional(),
        name: z.boolean().optional(),
        file_name: z.boolean().optional(),
        mime_type: z.boolean().optional(),
        disk: z.boolean().optional(),
        conversions_disk: z.boolean().optional(),
        size: z.boolean().optional(),
        manipulations: z.boolean().optional(),
        custom_properties: z.boolean().optional(),
        generated_conversions: z.boolean().optional(),
        responsive_images: z.boolean().optional(),
        order_column: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional()
    })
    .strict()

// MODEL HAS PERMISSIONS
//------------------------------------------------------

export const Model_has_permissionsIncludeSchema: z.ZodType<Prisma.Model_has_permissionsInclude> = z
    .object({
        permissions: z.union([z.boolean(), z.lazy(() => PermissionsArgsSchema)]).optional()
    })
    .strict()

export const Model_has_permissionsArgsSchema: z.ZodType<Prisma.Model_has_permissionsArgs> = z
    .object({
        select: z.lazy(() => Model_has_permissionsSelectSchema).optional(),
        include: z.lazy(() => Model_has_permissionsIncludeSchema).optional()
    })
    .strict()

export const Model_has_permissionsSelectSchema: z.ZodType<Prisma.Model_has_permissionsSelect> = z
    .object({
        permission_id: z.boolean().optional(),
        model_type: z.boolean().optional(),
        model_uuid: z.boolean().optional(),
        permissions: z.union([z.boolean(), z.lazy(() => PermissionsArgsSchema)]).optional()
    })
    .strict()

// MODEL HAS ROLES
//------------------------------------------------------

export const Model_has_rolesIncludeSchema: z.ZodType<Prisma.Model_has_rolesInclude> = z
    .object({
        roles: z.union([z.boolean(), z.lazy(() => RolesArgsSchema)]).optional()
    })
    .strict()

export const Model_has_rolesArgsSchema: z.ZodType<Prisma.Model_has_rolesArgs> = z
    .object({
        select: z.lazy(() => Model_has_rolesSelectSchema).optional(),
        include: z.lazy(() => Model_has_rolesIncludeSchema).optional()
    })
    .strict()

export const Model_has_rolesSelectSchema: z.ZodType<Prisma.Model_has_rolesSelect> = z
    .object({
        role_id: z.boolean().optional(),
        model_type: z.boolean().optional(),
        model_uuid: z.boolean().optional(),
        roles: z.union([z.boolean(), z.lazy(() => RolesArgsSchema)]).optional()
    })
    .strict()

// ORPHAN SPONSORSHIP
//------------------------------------------------------

export const Orphan_sponsorshipIncludeSchema: z.ZodType<Prisma.Orphan_sponsorshipInclude> = z
    .object({
        orphans: z.union([z.boolean(), z.lazy(() => OrphansArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const Orphan_sponsorshipArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipArgs> = z
    .object({
        select: z.lazy(() => Orphan_sponsorshipSelectSchema).optional(),
        include: z.lazy(() => Orphan_sponsorshipIncludeSchema).optional()
    })
    .strict()

export const Orphan_sponsorshipSelectSchema: z.ZodType<Prisma.Orphan_sponsorshipSelect> = z
    .object({
        id: z.boolean().optional(),
        orphan_id: z.boolean().optional(),
        type: z.boolean().optional(),
        value: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        orphans: z.union([z.boolean(), z.lazy(() => OrphansArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// ORPHANS
//------------------------------------------------------

export const OrphansIncludeSchema: z.ZodType<Prisma.OrphansInclude> = z
    .object({
        orphan_sponsorship: z.union([z.boolean(), z.lazy(() => Orphan_sponsorshipFindManyArgsSchema)]).optional(),
        users_orphans_created_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        users_orphans_deleted_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => OrphansCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const OrphansArgsSchema: z.ZodType<Prisma.OrphansArgs> = z
    .object({
        select: z.lazy(() => OrphansSelectSchema).optional(),
        include: z.lazy(() => OrphansIncludeSchema).optional()
    })
    .strict()

export const OrphansCountOutputTypeArgsSchema: z.ZodType<Prisma.OrphansCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => OrphansCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const OrphansCountOutputTypeSelectSchema: z.ZodType<Prisma.OrphansCountOutputTypeSelect> = z
    .object({
        orphan_sponsorship: z.boolean().optional()
    })
    .strict()

export const OrphansSelectSchema: z.ZodType<Prisma.OrphansSelect> = z
    .object({
        id: z.boolean().optional(),
        first_name: z.boolean().optional(),
        last_name: z.boolean().optional(),
        birth_date: z.boolean().optional(),
        family_status: z.boolean().optional(),
        health_status: z.boolean().optional(),
        academic_level: z.boolean().optional(),
        shoes_size: z.boolean().optional(),
        pants_size: z.boolean().optional(),
        shirt_size: z.boolean().optional(),
        note: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        family_id: z.boolean().optional(),
        created_by: z.boolean().optional(),
        deleted_by: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        orphan_sponsorship: z.union([z.boolean(), z.lazy(() => Orphan_sponsorshipFindManyArgsSchema)]).optional(),
        users_orphans_created_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        users_orphans_deleted_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => OrphansCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// PASSWORD RESET TOKENS
//------------------------------------------------------

export const Password_reset_tokensSelectSchema: z.ZodType<Prisma.Password_reset_tokensSelect> = z
    .object({
        email: z.boolean().optional(),
        token: z.boolean().optional(),
        created_at: z.boolean().optional()
    })
    .strict()

// PERMISSIONS
//------------------------------------------------------

export const PermissionsIncludeSchema: z.ZodType<Prisma.PermissionsInclude> = z
    .object({
        model_has_permissions: z.union([z.boolean(), z.lazy(() => Model_has_permissionsFindManyArgsSchema)]).optional(),
        role_has_permissions: z.union([z.boolean(), z.lazy(() => Role_has_permissionsFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => PermissionsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const PermissionsArgsSchema: z.ZodType<Prisma.PermissionsArgs> = z
    .object({
        select: z.lazy(() => PermissionsSelectSchema).optional(),
        include: z.lazy(() => PermissionsIncludeSchema).optional()
    })
    .strict()

export const PermissionsCountOutputTypeArgsSchema: z.ZodType<Prisma.PermissionsCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => PermissionsCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const PermissionsCountOutputTypeSelectSchema: z.ZodType<Prisma.PermissionsCountOutputTypeSelect> = z
    .object({
        model_has_permissions: z.boolean().optional(),
        role_has_permissions: z.boolean().optional()
    })
    .strict()

export const PermissionsSelectSchema: z.ZodType<Prisma.PermissionsSelect> = z
    .object({
        uuid: z.boolean().optional(),
        name: z.boolean().optional(),
        guard_name: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        model_has_permissions: z.union([z.boolean(), z.lazy(() => Model_has_permissionsFindManyArgsSchema)]).optional(),
        role_has_permissions: z.union([z.boolean(), z.lazy(() => Role_has_permissionsFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => PermissionsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// PERSONAL ACCESS TOKENS
//------------------------------------------------------

export const Personal_access_tokensSelectSchema: z.ZodType<Prisma.Personal_access_tokensSelect> = z
    .object({
        id: z.boolean().optional(),
        tokenable_type: z.boolean().optional(),
        tokenable_id: z.boolean().optional(),
        name: z.boolean().optional(),
        token: z.boolean().optional(),
        abilities: z.boolean().optional(),
        last_used_at: z.boolean().optional(),
        expires_at: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional()
    })
    .strict()

// ROLE HAS PERMISSIONS
//------------------------------------------------------

export const Role_has_permissionsIncludeSchema: z.ZodType<Prisma.Role_has_permissionsInclude> = z
    .object({
        permissions: z.union([z.boolean(), z.lazy(() => PermissionsArgsSchema)]).optional(),
        roles: z.union([z.boolean(), z.lazy(() => RolesArgsSchema)]).optional()
    })
    .strict()

export const Role_has_permissionsArgsSchema: z.ZodType<Prisma.Role_has_permissionsArgs> = z
    .object({
        select: z.lazy(() => Role_has_permissionsSelectSchema).optional(),
        include: z.lazy(() => Role_has_permissionsIncludeSchema).optional()
    })
    .strict()

export const Role_has_permissionsSelectSchema: z.ZodType<Prisma.Role_has_permissionsSelect> = z
    .object({
        permission_id: z.boolean().optional(),
        role_id: z.boolean().optional(),
        permissions: z.union([z.boolean(), z.lazy(() => PermissionsArgsSchema)]).optional(),
        roles: z.union([z.boolean(), z.lazy(() => RolesArgsSchema)]).optional()
    })
    .strict()

// ROLES
//------------------------------------------------------

export const RolesIncludeSchema: z.ZodType<Prisma.RolesInclude> = z
    .object({
        model_has_roles: z.union([z.boolean(), z.lazy(() => Model_has_rolesFindManyArgsSchema)]).optional(),
        role_has_permissions: z.union([z.boolean(), z.lazy(() => Role_has_permissionsFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => RolesCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const RolesArgsSchema: z.ZodType<Prisma.RolesArgs> = z
    .object({
        select: z.lazy(() => RolesSelectSchema).optional(),
        include: z.lazy(() => RolesIncludeSchema).optional()
    })
    .strict()

export const RolesCountOutputTypeArgsSchema: z.ZodType<Prisma.RolesCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => RolesCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const RolesCountOutputTypeSelectSchema: z.ZodType<Prisma.RolesCountOutputTypeSelect> = z
    .object({
        model_has_roles: z.boolean().optional(),
        role_has_permissions: z.boolean().optional()
    })
    .strict()

export const RolesSelectSchema: z.ZodType<Prisma.RolesSelect> = z
    .object({
        uuid: z.boolean().optional(),
        name: z.boolean().optional(),
        guard_name: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        model_has_roles: z.union([z.boolean(), z.lazy(() => Model_has_rolesFindManyArgsSchema)]).optional(),
        role_has_permissions: z.union([z.boolean(), z.lazy(() => Role_has_permissionsFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => RolesCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// SECOND SPONSORS
//------------------------------------------------------

export const Second_sponsorsIncludeSchema: z.ZodType<Prisma.Second_sponsorsInclude> = z
    .object({
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const Second_sponsorsArgsSchema: z.ZodType<Prisma.Second_sponsorsArgs> = z
    .object({
        select: z.lazy(() => Second_sponsorsSelectSchema).optional(),
        include: z.lazy(() => Second_sponsorsIncludeSchema).optional()
    })
    .strict()

export const Second_sponsorsSelectSchema: z.ZodType<Prisma.Second_sponsorsSelect> = z
    .object({
        id: z.boolean().optional(),
        first_name: z.boolean().optional(),
        last_name: z.boolean().optional(),
        degree_of_kinship: z.boolean().optional(),
        phone_number: z.boolean().optional(),
        address: z.boolean().optional(),
        income: z.boolean().optional(),
        family_id: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        deleted_at: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// SESSIONS
//------------------------------------------------------

export const SessionsIncludeSchema: z.ZodType<Prisma.SessionsInclude> = z
    .object({
        users: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional()
    })
    .strict()

export const SessionsArgsSchema: z.ZodType<Prisma.SessionsArgs> = z
    .object({
        select: z.lazy(() => SessionsSelectSchema).optional(),
        include: z.lazy(() => SessionsIncludeSchema).optional()
    })
    .strict()

export const SessionsSelectSchema: z.ZodType<Prisma.SessionsSelect> = z
    .object({
        id: z.boolean().optional(),
        user_id: z.boolean().optional(),
        ip_address: z.boolean().optional(),
        user_agent: z.boolean().optional(),
        payload: z.boolean().optional(),
        last_activity: z.boolean().optional(),
        users: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional()
    })
    .strict()

// SETTINGS
//------------------------------------------------------

export const SettingsIncludeSchema: z.ZodType<Prisma.SettingsInclude> = z
    .object({
        users: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional()
    })
    .strict()

export const SettingsArgsSchema: z.ZodType<Prisma.SettingsArgs> = z
    .object({
        select: z.lazy(() => SettingsSelectSchema).optional(),
        include: z.lazy(() => SettingsIncludeSchema).optional()
    })
    .strict()

export const SettingsSelectSchema: z.ZodType<Prisma.SettingsSelect> = z
    .object({
        id: z.boolean().optional(),
        user_id: z.boolean().optional(),
        theme: z.boolean().optional(),
        color_scheme: z.boolean().optional(),
        layout: z.boolean().optional(),
        appearance: z.boolean().optional(),
        notifications: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        users: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional()
    })
    .strict()

// SPONSOR SPONSORSHIP
//------------------------------------------------------

export const Sponsor_sponsorshipIncludeSchema: z.ZodType<Prisma.Sponsor_sponsorshipInclude> = z
    .object({
        sponsors: z.union([z.boolean(), z.lazy(() => SponsorsArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const Sponsor_sponsorshipArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipArgs> = z
    .object({
        select: z.lazy(() => Sponsor_sponsorshipSelectSchema).optional(),
        include: z.lazy(() => Sponsor_sponsorshipIncludeSchema).optional()
    })
    .strict()

export const Sponsor_sponsorshipSelectSchema: z.ZodType<Prisma.Sponsor_sponsorshipSelect> = z
    .object({
        id: z.boolean().optional(),
        sponsor_id: z.boolean().optional(),
        type: z.boolean().optional(),
        value: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        sponsors: z.union([z.boolean(), z.lazy(() => SponsorsArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// SPONSORS
//------------------------------------------------------

export const SponsorsIncludeSchema: z.ZodType<Prisma.SponsorsInclude> = z
    .object({
        income_sponsor: z.union([z.boolean(), z.lazy(() => Income_sponsorFindManyArgsSchema)]).optional(),
        sponsor_sponsorship: z.union([z.boolean(), z.lazy(() => Sponsor_sponsorshipFindManyArgsSchema)]).optional(),
        users_sponsors_created_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        users_sponsors_deleted_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => SponsorsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const SponsorsArgsSchema: z.ZodType<Prisma.SponsorsArgs> = z
    .object({
        select: z.lazy(() => SponsorsSelectSchema).optional(),
        include: z.lazy(() => SponsorsIncludeSchema).optional()
    })
    .strict()

export const SponsorsCountOutputTypeArgsSchema: z.ZodType<Prisma.SponsorsCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => SponsorsCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const SponsorsCountOutputTypeSelectSchema: z.ZodType<Prisma.SponsorsCountOutputTypeSelect> = z
    .object({
        income_sponsor: z.boolean().optional(),
        sponsor_sponsorship: z.boolean().optional()
    })
    .strict()

export const SponsorsSelectSchema: z.ZodType<Prisma.SponsorsSelect> = z
    .object({
        id: z.boolean().optional(),
        zone_id: z.boolean().optional(),
        file_number: z.boolean().optional(),
        start_date: z.boolean().optional(),
        name: z.boolean().optional(),
        address: z.boolean().optional(),
        phone_number: z.boolean().optional(),
        sponsorship_type: z.boolean().optional(),
        birth_date: z.boolean().optional(),
        father_name: z.boolean().optional(),
        mother_name: z.boolean().optional(),
        birth_certificate_number: z.boolean().optional(),
        academic_level: z.boolean().optional(),
        function: z.boolean().optional(),
        health_status: z.boolean().optional(),
        diploma: z.boolean().optional(),
        card_number: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_by: z.boolean().optional(),
        deleted_by: z.boolean().optional(),
        deleted_at: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        income_sponsor: z.union([z.boolean(), z.lazy(() => Income_sponsorFindManyArgsSchema)]).optional(),
        sponsor_sponsorship: z.union([z.boolean(), z.lazy(() => Sponsor_sponsorshipFindManyArgsSchema)]).optional(),
        users_sponsors_created_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        users_sponsors_deleted_byTousers: z.union([z.boolean(), z.lazy(() => UsersArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => SponsorsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// SPONSORSHIPS
//------------------------------------------------------

export const SponsorshipsIncludeSchema: z.ZodType<Prisma.SponsorshipsInclude> = z
    .object({
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const SponsorshipsArgsSchema: z.ZodType<Prisma.SponsorshipsArgs> = z
    .object({
        select: z.lazy(() => SponsorshipsSelectSchema).optional(),
        include: z.lazy(() => SponsorshipsIncludeSchema).optional()
    })
    .strict()

export const SponsorshipsSelectSchema: z.ZodType<Prisma.SponsorshipsSelect> = z
    .object({
        id: z.boolean().optional(),
        type: z.boolean().optional(),
        name: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        deleted_at: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// SPOUSES
//------------------------------------------------------

export const SpousesIncludeSchema: z.ZodType<Prisma.SpousesInclude> = z
    .object({
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

export const SpousesArgsSchema: z.ZodType<Prisma.SpousesArgs> = z
    .object({
        select: z.lazy(() => SpousesSelectSchema).optional(),
        include: z.lazy(() => SpousesIncludeSchema).optional()
    })
    .strict()

export const SpousesSelectSchema: z.ZodType<Prisma.SpousesSelect> = z
    .object({
        id: z.boolean().optional(),
        first_name: z.boolean().optional(),
        last_name: z.boolean().optional(),
        birth_date: z.boolean().optional(),
        death_date: z.boolean().optional(),
        function: z.boolean().optional(),
        income: z.boolean().optional(),
        family_id: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesArgsSchema)]).optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional()
    })
    .strict()

// TENANTS
//------------------------------------------------------

export const TenantsIncludeSchema: z.ZodType<Prisma.TenantsInclude> = z
    .object({
        benefactors: z.union([z.boolean(), z.lazy(() => BenefactorsFindManyArgsSchema)]).optional(),
        domains: z.union([z.boolean(), z.lazy(() => DomainsFindManyArgsSchema)]).optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesFindManyArgsSchema)]).optional(),
        family_sponsorship: z.union([z.boolean(), z.lazy(() => Family_sponsorshipFindManyArgsSchema)]).optional(),
        income_sponsor: z.union([z.boolean(), z.lazy(() => Income_sponsorFindManyArgsSchema)]).optional(),
        orphan_sponsorship: z.union([z.boolean(), z.lazy(() => Orphan_sponsorshipFindManyArgsSchema)]).optional(),
        orphans: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        second_sponsors: z.union([z.boolean(), z.lazy(() => Second_sponsorsFindManyArgsSchema)]).optional(),
        sponsor_sponsorship: z.union([z.boolean(), z.lazy(() => Sponsor_sponsorshipFindManyArgsSchema)]).optional(),
        sponsors: z.union([z.boolean(), z.lazy(() => SponsorsFindManyArgsSchema)]).optional(),
        sponsorships: z.union([z.boolean(), z.lazy(() => SponsorshipsFindManyArgsSchema)]).optional(),
        spouses: z.union([z.boolean(), z.lazy(() => SpousesFindManyArgsSchema)]).optional(),
        users: z.union([z.boolean(), z.lazy(() => UsersFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => TenantsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const TenantsArgsSchema: z.ZodType<Prisma.TenantsArgs> = z
    .object({
        select: z.lazy(() => TenantsSelectSchema).optional(),
        include: z.lazy(() => TenantsIncludeSchema).optional()
    })
    .strict()

export const TenantsCountOutputTypeArgsSchema: z.ZodType<Prisma.TenantsCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => TenantsCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const TenantsCountOutputTypeSelectSchema: z.ZodType<Prisma.TenantsCountOutputTypeSelect> = z
    .object({
        benefactors: z.boolean().optional(),
        domains: z.boolean().optional(),
        families: z.boolean().optional(),
        family_sponsorship: z.boolean().optional(),
        income_sponsor: z.boolean().optional(),
        orphan_sponsorship: z.boolean().optional(),
        orphans: z.boolean().optional(),
        second_sponsors: z.boolean().optional(),
        sponsor_sponsorship: z.boolean().optional(),
        sponsors: z.boolean().optional(),
        sponsorships: z.boolean().optional(),
        spouses: z.boolean().optional(),
        users: z.boolean().optional()
    })
    .strict()

export const TenantsSelectSchema: z.ZodType<Prisma.TenantsSelect> = z
    .object({
        id: z.boolean().optional(),
        data: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        benefactors: z.union([z.boolean(), z.lazy(() => BenefactorsFindManyArgsSchema)]).optional(),
        domains: z.union([z.boolean(), z.lazy(() => DomainsFindManyArgsSchema)]).optional(),
        families: z.union([z.boolean(), z.lazy(() => FamiliesFindManyArgsSchema)]).optional(),
        family_sponsorship: z.union([z.boolean(), z.lazy(() => Family_sponsorshipFindManyArgsSchema)]).optional(),
        income_sponsor: z.union([z.boolean(), z.lazy(() => Income_sponsorFindManyArgsSchema)]).optional(),
        orphan_sponsorship: z.union([z.boolean(), z.lazy(() => Orphan_sponsorshipFindManyArgsSchema)]).optional(),
        orphans: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        second_sponsors: z.union([z.boolean(), z.lazy(() => Second_sponsorsFindManyArgsSchema)]).optional(),
        sponsor_sponsorship: z.union([z.boolean(), z.lazy(() => Sponsor_sponsorshipFindManyArgsSchema)]).optional(),
        sponsors: z.union([z.boolean(), z.lazy(() => SponsorsFindManyArgsSchema)]).optional(),
        sponsorships: z.union([z.boolean(), z.lazy(() => SponsorshipsFindManyArgsSchema)]).optional(),
        spouses: z.union([z.boolean(), z.lazy(() => SpousesFindManyArgsSchema)]).optional(),
        users: z.union([z.boolean(), z.lazy(() => UsersFindManyArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => TenantsCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

// USERS
//------------------------------------------------------

export const UsersIncludeSchema: z.ZodType<Prisma.UsersInclude> = z
    .object({
        orphans_orphans_created_byTousers: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        orphans_orphans_deleted_byTousers: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        sessions: z.union([z.boolean(), z.lazy(() => SessionsFindManyArgsSchema)]).optional(),
        settings: z.union([z.boolean(), z.lazy(() => SettingsFindManyArgsSchema)]).optional(),
        sponsors_sponsors_created_byTousers: z
            .union([z.boolean(), z.lazy(() => SponsorsFindManyArgsSchema)])
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .union([z.boolean(), z.lazy(() => SponsorsFindManyArgsSchema)])
            .optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

export const UsersArgsSchema: z.ZodType<Prisma.UsersArgs> = z
    .object({
        select: z.lazy(() => UsersSelectSchema).optional(),
        include: z.lazy(() => UsersIncludeSchema).optional()
    })
    .strict()

export const UsersCountOutputTypeArgsSchema: z.ZodType<Prisma.UsersCountOutputTypeArgs> = z
    .object({
        select: z.lazy(() => UsersCountOutputTypeSelectSchema).nullish()
    })
    .strict()

export const UsersCountOutputTypeSelectSchema: z.ZodType<Prisma.UsersCountOutputTypeSelect> = z
    .object({
        orphans_orphans_created_byTousers: z.boolean().optional(),
        orphans_orphans_deleted_byTousers: z.boolean().optional(),
        sessions: z.boolean().optional(),
        settings: z.boolean().optional(),
        sponsors_sponsors_created_byTousers: z.boolean().optional(),
        sponsors_sponsors_deleted_byTousers: z.boolean().optional()
    })
    .strict()

export const UsersSelectSchema: z.ZodType<Prisma.UsersSelect> = z
    .object({
        id: z.boolean().optional(),
        first_name: z.boolean().optional(),
        last_name: z.boolean().optional(),
        phone: z.boolean().optional(),
        email: z.boolean().optional(),
        email_verified_at: z.boolean().optional(),
        password: z.boolean().optional(),
        remember_token: z.boolean().optional(),
        tenant_id: z.boolean().optional(),
        created_at: z.boolean().optional(),
        updated_at: z.boolean().optional(),
        orphans_orphans_created_byTousers: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        orphans_orphans_deleted_byTousers: z.union([z.boolean(), z.lazy(() => OrphansFindManyArgsSchema)]).optional(),
        sessions: z.union([z.boolean(), z.lazy(() => SessionsFindManyArgsSchema)]).optional(),
        settings: z.union([z.boolean(), z.lazy(() => SettingsFindManyArgsSchema)]).optional(),
        sponsors_sponsors_created_byTousers: z
            .union([z.boolean(), z.lazy(() => SponsorsFindManyArgsSchema)])
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .union([z.boolean(), z.lazy(() => SponsorsFindManyArgsSchema)])
            .optional(),
        tenants: z.union([z.boolean(), z.lazy(() => TenantsArgsSchema)]).optional(),
        _count: z.union([z.boolean(), z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional()
    })
    .strict()

/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const BenefactorsWhereInputSchema: z.ZodType<Prisma.BenefactorsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => BenefactorsWhereInputSchema), z.lazy(() => BenefactorsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => BenefactorsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => BenefactorsWhereInputSchema), z.lazy(() => BenefactorsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const BenefactorsOrderByWithRelationInputSchema: z.ZodType<Prisma.BenefactorsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const BenefactorsWhereUniqueInputSchema: z.ZodType<Prisma.BenefactorsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const BenefactorsOrderByWithAggregationInputSchema: z.ZodType<Prisma.BenefactorsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => BenefactorsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => BenefactorsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => BenefactorsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const BenefactorsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BenefactorsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => BenefactorsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => BenefactorsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => BenefactorsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => BenefactorsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => BenefactorsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            deleted_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const CacheWhereInputSchema: z.ZodType<Prisma.CacheWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => CacheWhereInputSchema), z.lazy(() => CacheWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => CacheWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => CacheWhereInputSchema), z.lazy(() => CacheWhereInputSchema).array()]).optional(),
        key: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        expiration: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional()
    })
    .strict()

export const CacheOrderByWithRelationInputSchema: z.ZodType<Prisma.CacheOrderByWithRelationInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CacheWhereUniqueInputSchema: z.ZodType<Prisma.CacheWhereUniqueInput> = z
    .object({
        key: z.string().optional()
    })
    .strict()

export const CacheOrderByWithAggregationInputSchema: z.ZodType<Prisma.CacheOrderByWithAggregationInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => CacheCountOrderByAggregateInputSchema).optional(),
        _avg: z.lazy(() => CacheAvgOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => CacheMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => CacheMinOrderByAggregateInputSchema).optional(),
        _sum: z.lazy(() => CacheSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const CacheScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CacheScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => CacheScalarWhereWithAggregatesInputSchema),
                z.lazy(() => CacheScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => CacheScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => CacheScalarWhereWithAggregatesInputSchema),
                z.lazy(() => CacheScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        key: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        expiration: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional()
    })
    .strict()

export const Cache_locksWhereInputSchema: z.ZodType<Prisma.Cache_locksWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => Cache_locksWhereInputSchema), z.lazy(() => Cache_locksWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => Cache_locksWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => Cache_locksWhereInputSchema), z.lazy(() => Cache_locksWhereInputSchema).array()])
            .optional(),
        key: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        owner: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        expiration: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional()
    })
    .strict()

export const Cache_locksOrderByWithRelationInputSchema: z.ZodType<Prisma.Cache_locksOrderByWithRelationInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        owner: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Cache_locksWhereUniqueInputSchema: z.ZodType<Prisma.Cache_locksWhereUniqueInput> = z
    .object({
        key: z.string().optional()
    })
    .strict()

export const Cache_locksOrderByWithAggregationInputSchema: z.ZodType<Prisma.Cache_locksOrderByWithAggregationInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        owner: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => Cache_locksCountOrderByAggregateInputSchema).optional(),
        _avg: z.lazy(() => Cache_locksAvgOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => Cache_locksMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => Cache_locksMinOrderByAggregateInputSchema).optional(),
        _sum: z.lazy(() => Cache_locksSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const Cache_locksScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Cache_locksScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Cache_locksScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Cache_locksScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Cache_locksScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Cache_locksScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Cache_locksScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            key: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            owner: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            expiration: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional()
        })
        .strict()

export const DomainsWhereInputSchema: z.ZodType<Prisma.DomainsWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => DomainsWhereInputSchema), z.lazy(() => DomainsWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => DomainsWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => DomainsWhereInputSchema), z.lazy(() => DomainsWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        domain: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const DomainsOrderByWithRelationInputSchema: z.ZodType<Prisma.DomainsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        domain: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const DomainsWhereUniqueInputSchema: z.ZodType<Prisma.DomainsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const DomainsOrderByWithAggregationInputSchema: z.ZodType<Prisma.DomainsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        domain: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => DomainsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => DomainsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => DomainsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const DomainsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DomainsScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => DomainsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => DomainsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => DomainsScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => DomainsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => DomainsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        domain: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const FamiliesWhereInputSchema: z.ZodType<Prisma.FamiliesWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => FamiliesWhereInputSchema), z.lazy(() => FamiliesWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => FamiliesWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => FamiliesWhereInputSchema), z.lazy(() => FamiliesWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        report: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional(),
        family_furnishing: z.lazy(() => Family_furnishingListRelationFilterSchema).optional(),
        family_housing: z.lazy(() => Family_housingListRelationFilterSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipListRelationFilterSchema).optional(),
        orphans: z.lazy(() => OrphansListRelationFilterSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsListRelationFilterSchema).optional(),
        spouses: z.lazy(() => SpousesListRelationFilterSchema).optional()
    })
    .strict()

export const FamiliesOrderByWithRelationInputSchema: z.ZodType<Prisma.FamiliesOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        report: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional(),
        family_furnishing: z.lazy(() => Family_furnishingOrderByRelationAggregateInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingOrderByRelationAggregateInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipOrderByRelationAggregateInputSchema).optional(),
        orphans: z.lazy(() => OrphansOrderByRelationAggregateInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsOrderByRelationAggregateInputSchema).optional(),
        spouses: z.lazy(() => SpousesOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const FamiliesWhereUniqueInputSchema: z.ZodType<Prisma.FamiliesWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const FamiliesOrderByWithAggregationInputSchema: z.ZodType<Prisma.FamiliesOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        report: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => FamiliesCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => FamiliesMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => FamiliesMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const FamiliesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FamiliesScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => FamiliesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => FamiliesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => FamiliesScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => FamiliesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => FamiliesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        report: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Family_furnishingWhereInputSchema: z.ZodType<Prisma.Family_furnishingWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Family_furnishingWhereInputSchema),
                z.lazy(() => Family_furnishingWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Family_furnishingWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Family_furnishingWhereInputSchema),
                z.lazy(() => Family_furnishingWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        furnishing_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        families: z
            .union([z.lazy(() => FamiliesRelationFilterSchema), z.lazy(() => FamiliesWhereInputSchema)])
            .optional(),
        furnishings: z
            .union([z.lazy(() => FurnishingsRelationFilterSchema), z.lazy(() => FurnishingsWhereInputSchema)])
            .optional()
    })
    .strict()

export const Family_furnishingOrderByWithRelationInputSchema: z.ZodType<Prisma.Family_furnishingOrderByWithRelationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            furnishing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            families: z.lazy(() => FamiliesOrderByWithRelationInputSchema).optional(),
            furnishings: z.lazy(() => FurnishingsOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Family_furnishingWhereUniqueInputSchema: z.ZodType<Prisma.Family_furnishingWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Family_furnishingOrderByWithAggregationInputSchema: z.ZodType<Prisma.Family_furnishingOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            furnishing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Family_furnishingCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Family_furnishingMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Family_furnishingMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Family_furnishingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Family_furnishingScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Family_furnishingScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Family_furnishingScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Family_furnishingScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Family_furnishingScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Family_furnishingScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            family_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            furnishing_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            value: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional()
        })
        .strict()

export const Family_housingWhereInputSchema: z.ZodType<Prisma.Family_housingWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => Family_housingWhereInputSchema), z.lazy(() => Family_housingWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => Family_housingWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => Family_housingWhereInputSchema), z.lazy(() => Family_housingWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        housing_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        families: z
            .union([z.lazy(() => FamiliesRelationFilterSchema), z.lazy(() => FamiliesWhereInputSchema)])
            .optional(),
        housings: z
            .union([z.lazy(() => HousingsRelationFilterSchema), z.lazy(() => HousingsWhereInputSchema)])
            .optional()
    })
    .strict()

export const Family_housingOrderByWithRelationInputSchema: z.ZodType<Prisma.Family_housingOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        housing_id: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        families: z.lazy(() => FamiliesOrderByWithRelationInputSchema).optional(),
        housings: z.lazy(() => HousingsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const Family_housingWhereUniqueInputSchema: z.ZodType<Prisma.Family_housingWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Family_housingOrderByWithAggregationInputSchema: z.ZodType<Prisma.Family_housingOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            housing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Family_housingCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Family_housingMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Family_housingMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Family_housingScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Family_housingScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Family_housingScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Family_housingScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Family_housingScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Family_housingScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Family_housingScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            family_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            housing_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            value: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional()
        })
        .strict()

export const Family_sponsorshipWhereInputSchema: z.ZodType<Prisma.Family_sponsorshipWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Family_sponsorshipWhereInputSchema),
                z.lazy(() => Family_sponsorshipWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Family_sponsorshipWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Family_sponsorshipWhereInputSchema),
                z.lazy(() => Family_sponsorshipWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([z.lazy(() => Enumfamily_sponsorship_typeFilterSchema), z.lazy(() => family_sponsorship_typeSchema)])
            .optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        families: z
            .union([z.lazy(() => FamiliesRelationFilterSchema), z.lazy(() => FamiliesWhereInputSchema)])
            .optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const Family_sponsorshipOrderByWithRelationInputSchema: z.ZodType<Prisma.Family_sponsorshipOrderByWithRelationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            families: z.lazy(() => FamiliesOrderByWithRelationInputSchema).optional(),
            tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Family_sponsorshipWhereUniqueInputSchema: z.ZodType<Prisma.Family_sponsorshipWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Family_sponsorshipOrderByWithAggregationInputSchema: z.ZodType<Prisma.Family_sponsorshipOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Family_sponsorshipCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Family_sponsorshipMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Family_sponsorshipMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Family_sponsorshipScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Family_sponsorshipScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Family_sponsorshipScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Family_sponsorshipScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Family_sponsorshipScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Family_sponsorshipScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Family_sponsorshipScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            family_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            type: z
                .union([
                    z.lazy(() => Enumfamily_sponsorship_typeWithAggregatesFilterSchema),
                    z.lazy(() => family_sponsorship_typeSchema)
                ])
                .optional(),
            value: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const FurnishingsWhereInputSchema: z.ZodType<Prisma.FurnishingsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => FurnishingsWhereInputSchema), z.lazy(() => FurnishingsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => FurnishingsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => FurnishingsWhereInputSchema), z.lazy(() => FurnishingsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        family_furnishing: z.lazy(() => Family_furnishingListRelationFilterSchema).optional()
    })
    .strict()

export const FurnishingsOrderByWithRelationInputSchema: z.ZodType<Prisma.FurnishingsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        family_furnishing: z.lazy(() => Family_furnishingOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const FurnishingsWhereUniqueInputSchema: z.ZodType<Prisma.FurnishingsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const FurnishingsOrderByWithAggregationInputSchema: z.ZodType<Prisma.FurnishingsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => FurnishingsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => FurnishingsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => FurnishingsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const FurnishingsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FurnishingsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => FurnishingsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => FurnishingsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => FurnishingsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => FurnishingsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => FurnishingsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional()
        })
        .strict()

export const HousingsWhereInputSchema: z.ZodType<Prisma.HousingsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => HousingsWhereInputSchema), z.lazy(() => HousingsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => HousingsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => HousingsWhereInputSchema), z.lazy(() => HousingsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        family_housing: z.lazy(() => Family_housingListRelationFilterSchema).optional()
    })
    .strict()

export const HousingsOrderByWithRelationInputSchema: z.ZodType<Prisma.HousingsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        family_housing: z.lazy(() => Family_housingOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const HousingsWhereUniqueInputSchema: z.ZodType<Prisma.HousingsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const HousingsOrderByWithAggregationInputSchema: z.ZodType<Prisma.HousingsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => HousingsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => HousingsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => HousingsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const HousingsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.HousingsScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => HousingsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => HousingsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => HousingsScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => HousingsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => HousingsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional()
    })
    .strict()

export const Income_sponsorWhereInputSchema: z.ZodType<Prisma.Income_sponsorWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => Income_sponsorWhereInputSchema), z.lazy(() => Income_sponsorWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => Income_sponsorWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => Income_sponsorWhereInputSchema), z.lazy(() => Income_sponsorWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        income_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        sponsor_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        incomes: z.union([z.lazy(() => IncomesRelationFilterSchema), z.lazy(() => IncomesWhereInputSchema)]).optional(),
        sponsors: z
            .union([z.lazy(() => SponsorsRelationFilterSchema), z.lazy(() => SponsorsWhereInputSchema)])
            .optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const Income_sponsorOrderByWithRelationInputSchema: z.ZodType<Prisma.Income_sponsorOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        income_id: z.lazy(() => SortOrderSchema).optional(),
        sponsor_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        incomes: z.lazy(() => IncomesOrderByWithRelationInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsOrderByWithRelationInputSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const Income_sponsorWhereUniqueInputSchema: z.ZodType<Prisma.Income_sponsorWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Income_sponsorOrderByWithAggregationInputSchema: z.ZodType<Prisma.Income_sponsorOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            income_id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Income_sponsorCountOrderByAggregateInputSchema).optional(),
            _avg: z.lazy(() => Income_sponsorAvgOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Income_sponsorMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Income_sponsorMinOrderByAggregateInputSchema).optional(),
            _sum: z.lazy(() => Income_sponsorSumOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Income_sponsorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Income_sponsorScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Income_sponsorScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            income_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            sponsor_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            value: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const IncomesWhereInputSchema: z.ZodType<Prisma.IncomesWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => IncomesWhereInputSchema), z.lazy(() => IncomesWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => IncomesWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => IncomesWhereInputSchema), z.lazy(() => IncomesWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        income_sponsor: z.lazy(() => Income_sponsorListRelationFilterSchema).optional()
    })
    .strict()

export const IncomesOrderByWithRelationInputSchema: z.ZodType<Prisma.IncomesOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const IncomesWhereUniqueInputSchema: z.ZodType<Prisma.IncomesWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const IncomesOrderByWithAggregationInputSchema: z.ZodType<Prisma.IncomesOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => IncomesCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => IncomesMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => IncomesMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const IncomesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.IncomesScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => IncomesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => IncomesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => IncomesScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => IncomesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => IncomesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional()
    })
    .strict()

export const MediaWhereInputSchema: z.ZodType<Prisma.MediaWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => MediaWhereInputSchema), z.lazy(() => MediaWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => MediaWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => MediaWhereInputSchema), z.lazy(() => MediaWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        model_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        model_id: z
            .union([
                z.lazy(() => BigIntFilterSchema),
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ])
            ])
            .optional(),
        uuid: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        collection_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        file_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        mime_type: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        disk: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        conversions_disk: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        size: z
            .union([
                z.lazy(() => BigIntFilterSchema),
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ])
            ])
            .optional(),
        manipulations: z.lazy(() => JsonFilterSchema).optional(),
        custom_properties: z.lazy(() => JsonFilterSchema).optional(),
        generated_conversions: z.lazy(() => JsonFilterSchema).optional(),
        responsive_images: z.lazy(() => JsonFilterSchema).optional(),
        order_column: z
            .union([z.lazy(() => IntNullableFilterSchema), z.number()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const MediaOrderByWithRelationInputSchema: z.ZodType<Prisma.MediaOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        model_type: z.lazy(() => SortOrderSchema).optional(),
        model_id: z.lazy(() => SortOrderSchema).optional(),
        uuid: z.lazy(() => SortOrderSchema).optional(),
        collection_name: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        file_name: z.lazy(() => SortOrderSchema).optional(),
        mime_type: z.lazy(() => SortOrderSchema).optional(),
        disk: z.lazy(() => SortOrderSchema).optional(),
        conversions_disk: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        manipulations: z.lazy(() => SortOrderSchema).optional(),
        custom_properties: z.lazy(() => SortOrderSchema).optional(),
        generated_conversions: z.lazy(() => SortOrderSchema).optional(),
        responsive_images: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const MediaWhereUniqueInputSchema: z.ZodType<Prisma.MediaWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const MediaOrderByWithAggregationInputSchema: z.ZodType<Prisma.MediaOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        model_type: z.lazy(() => SortOrderSchema).optional(),
        model_id: z.lazy(() => SortOrderSchema).optional(),
        uuid: z.lazy(() => SortOrderSchema).optional(),
        collection_name: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        file_name: z.lazy(() => SortOrderSchema).optional(),
        mime_type: z.lazy(() => SortOrderSchema).optional(),
        disk: z.lazy(() => SortOrderSchema).optional(),
        conversions_disk: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        manipulations: z.lazy(() => SortOrderSchema).optional(),
        custom_properties: z.lazy(() => SortOrderSchema).optional(),
        generated_conversions: z.lazy(() => SortOrderSchema).optional(),
        responsive_images: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => MediaCountOrderByAggregateInputSchema).optional(),
        _avg: z.lazy(() => MediaAvgOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => MediaMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => MediaMinOrderByAggregateInputSchema).optional(),
        _sum: z.lazy(() => MediaSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const MediaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MediaScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => MediaScalarWhereWithAggregatesInputSchema),
                z.lazy(() => MediaScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => MediaScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => MediaScalarWhereWithAggregatesInputSchema),
                z.lazy(() => MediaScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        model_type: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        model_id: z
            .union([
                z.lazy(() => BigIntWithAggregatesFilterSchema),
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ])
            ])
            .optional(),
        uuid: z
            .union([z.lazy(() => UuidNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        collection_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        file_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        mime_type: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        disk: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        conversions_disk: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        size: z
            .union([
                z.lazy(() => BigIntWithAggregatesFilterSchema),
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ])
            ])
            .optional(),
        manipulations: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
        custom_properties: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
        generated_conversions: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
        responsive_images: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
        order_column: z
            .union([z.lazy(() => IntNullableWithAggregatesFilterSchema), z.number()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Model_has_permissionsWhereInputSchema: z.ZodType<Prisma.Model_has_permissionsWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Model_has_permissionsWhereInputSchema),
                z.lazy(() => Model_has_permissionsWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Model_has_permissionsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Model_has_permissionsWhereInputSchema),
                z.lazy(() => Model_has_permissionsWhereInputSchema).array()
            ])
            .optional(),
        permission_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        model_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        model_uuid: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        permissions: z
            .union([z.lazy(() => PermissionsRelationFilterSchema), z.lazy(() => PermissionsWhereInputSchema)])
            .optional()
    })
    .strict()

export const Model_has_permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Model_has_permissionsOrderByWithRelationInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional(),
            permissions: z.lazy(() => PermissionsOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Model_has_permissionsWhereUniqueInputSchema: z.ZodType<Prisma.Model_has_permissionsWhereUniqueInput> = z
    .object({
        permission_id_model_uuid_model_type: z
            .lazy(() => Model_has_permissionsPermission_idModel_uuidModel_typeCompoundUniqueInputSchema)
            .optional()
    })
    .strict()

export const Model_has_permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Model_has_permissionsOrderByWithAggregationInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Model_has_permissionsCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Model_has_permissionsMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Model_has_permissionsMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Model_has_permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Model_has_permissionsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Model_has_permissionsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Model_has_permissionsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Model_has_permissionsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Model_has_permissionsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Model_has_permissionsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            permission_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            model_type: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            model_uuid: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional()
        })
        .strict()

export const Model_has_rolesWhereInputSchema: z.ZodType<Prisma.Model_has_rolesWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Model_has_rolesWhereInputSchema),
                z.lazy(() => Model_has_rolesWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Model_has_rolesWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Model_has_rolesWhereInputSchema),
                z.lazy(() => Model_has_rolesWhereInputSchema).array()
            ])
            .optional(),
        role_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        model_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        model_uuid: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        roles: z.union([z.lazy(() => RolesRelationFilterSchema), z.lazy(() => RolesWhereInputSchema)]).optional()
    })
    .strict()

export const Model_has_rolesOrderByWithRelationInputSchema: z.ZodType<Prisma.Model_has_rolesOrderByWithRelationInput> =
    z
        .object({
            role_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional(),
            roles: z.lazy(() => RolesOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Model_has_rolesWhereUniqueInputSchema: z.ZodType<Prisma.Model_has_rolesWhereUniqueInput> = z
    .object({
        role_id_model_uuid_model_type: z
            .lazy(() => Model_has_rolesRole_idModel_uuidModel_typeCompoundUniqueInputSchema)
            .optional()
    })
    .strict()

export const Model_has_rolesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Model_has_rolesOrderByWithAggregationInput> =
    z
        .object({
            role_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Model_has_rolesCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Model_has_rolesMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Model_has_rolesMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Model_has_rolesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Model_has_rolesScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Model_has_rolesScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Model_has_rolesScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Model_has_rolesScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Model_has_rolesScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Model_has_rolesScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            role_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            model_type: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            model_uuid: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional()
        })
        .strict()

export const Orphan_sponsorshipWhereInputSchema: z.ZodType<Prisma.Orphan_sponsorshipWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Orphan_sponsorshipWhereInputSchema),
                z.lazy(() => Orphan_sponsorshipWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Orphan_sponsorshipWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Orphan_sponsorshipWhereInputSchema),
                z.lazy(() => Orphan_sponsorshipWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        orphan_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([z.lazy(() => Enumorphan_sponsorship_typeFilterSchema), z.lazy(() => orphan_sponsorship_typeSchema)])
            .optional(),
        value: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        orphans: z.union([z.lazy(() => OrphansRelationFilterSchema), z.lazy(() => OrphansWhereInputSchema)]).optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const Orphan_sponsorshipOrderByWithRelationInputSchema: z.ZodType<Prisma.Orphan_sponsorshipOrderByWithRelationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            orphan_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            orphans: z.lazy(() => OrphansOrderByWithRelationInputSchema).optional(),
            tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipWhereUniqueInputSchema: z.ZodType<Prisma.Orphan_sponsorshipWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Orphan_sponsorshipOrderByWithAggregationInputSchema: z.ZodType<Prisma.Orphan_sponsorshipOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            orphan_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Orphan_sponsorshipCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Orphan_sponsorshipMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Orphan_sponsorshipMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Orphan_sponsorshipScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Orphan_sponsorshipScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Orphan_sponsorshipScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Orphan_sponsorshipScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Orphan_sponsorshipScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Orphan_sponsorshipScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            orphan_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            type: z
                .union([
                    z.lazy(() => Enumorphan_sponsorship_typeWithAggregatesFilterSchema),
                    z.lazy(() => orphan_sponsorship_typeSchema)
                ])
                .optional(),
            value: z
                .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
                .optional()
                .nullable(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const OrphansWhereInputSchema: z.ZodType<Prisma.OrphansWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => OrphansWhereInputSchema), z.lazy(() => OrphansWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => OrphansWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => OrphansWhereInputSchema), z.lazy(() => OrphansWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        family_status: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        health_status: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        academic_level: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        shoes_size: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        pants_size: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        shirt_size: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        note: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        created_by: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        deleted_by: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipListRelationFilterSchema).optional(),
        users_orphans_created_byTousers: z
            .union([z.lazy(() => UsersRelationFilterSchema), z.lazy(() => UsersWhereInputSchema)])
            .optional(),
        users_orphans_deleted_byTousers: z
            .union([z.lazy(() => UsersRelationFilterSchema), z.lazy(() => UsersWhereInputSchema)])
            .optional()
            .nullable(),
        families: z
            .union([z.lazy(() => FamiliesRelationFilterSchema), z.lazy(() => FamiliesWhereInputSchema)])
            .optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const OrphansOrderByWithRelationInputSchema: z.ZodType<Prisma.OrphansOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        family_status: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        shoes_size: z.lazy(() => SortOrderSchema).optional(),
        pants_size: z.lazy(() => SortOrderSchema).optional(),
        shirt_size: z.lazy(() => SortOrderSchema).optional(),
        note: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipOrderByRelationAggregateInputSchema).optional(),
        users_orphans_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
        users_orphans_deleted_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
        families: z.lazy(() => FamiliesOrderByWithRelationInputSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const OrphansWhereUniqueInputSchema: z.ZodType<Prisma.OrphansWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const OrphansOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrphansOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        family_status: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        shoes_size: z.lazy(() => SortOrderSchema).optional(),
        pants_size: z.lazy(() => SortOrderSchema).optional(),
        shirt_size: z.lazy(() => SortOrderSchema).optional(),
        note: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => OrphansCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => OrphansMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => OrphansMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const OrphansScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrphansScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => OrphansScalarWhereWithAggregatesInputSchema),
                z.lazy(() => OrphansScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => OrphansScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => OrphansScalarWhereWithAggregatesInputSchema),
                z.lazy(() => OrphansScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
        family_status: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        health_status: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        academic_level: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        shoes_size: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        pants_size: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        shirt_size: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        note: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        created_by: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        deleted_by: z
            .union([z.lazy(() => UuidNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Password_reset_tokensWhereInputSchema: z.ZodType<Prisma.Password_reset_tokensWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Password_reset_tokensWhereInputSchema),
                z.lazy(() => Password_reset_tokensWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Password_reset_tokensWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Password_reset_tokensWhereInputSchema),
                z.lazy(() => Password_reset_tokensWhereInputSchema).array()
            ])
            .optional(),
        email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        token: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Password_reset_tokensOrderByWithRelationInputSchema: z.ZodType<Prisma.Password_reset_tokensOrderByWithRelationInput> =
    z
        .object({
            email: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Password_reset_tokensWhereUniqueInputSchema: z.ZodType<Prisma.Password_reset_tokensWhereUniqueInput> = z
    .object({
        email: z.string().optional()
    })
    .strict()

export const Password_reset_tokensOrderByWithAggregationInputSchema: z.ZodType<Prisma.Password_reset_tokensOrderByWithAggregationInput> =
    z
        .object({
            email: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Password_reset_tokensCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Password_reset_tokensMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Password_reset_tokensMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Password_reset_tokensScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Password_reset_tokensScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Password_reset_tokensScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Password_reset_tokensScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Password_reset_tokensScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Password_reset_tokensScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Password_reset_tokensScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            email: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            token: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const PermissionsWhereInputSchema: z.ZodType<Prisma.PermissionsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => PermissionsWhereInputSchema), z.lazy(() => PermissionsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => PermissionsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => PermissionsWhereInputSchema), z.lazy(() => PermissionsWhereInputSchema).array()])
            .optional(),
        uuid: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        guard_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        model_has_permissions: z.lazy(() => Model_has_permissionsListRelationFilterSchema).optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsListRelationFilterSchema).optional()
    })
    .strict()

export const PermissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.PermissionsOrderByWithRelationInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        model_has_permissions: z.lazy(() => Model_has_permissionsOrderByRelationAggregateInputSchema).optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const PermissionsWhereUniqueInputSchema: z.ZodType<Prisma.PermissionsWhereUniqueInput> = z
    .object({
        uuid: z.string().uuid().optional()
    })
    .strict()

export const PermissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.PermissionsOrderByWithAggregationInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => PermissionsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => PermissionsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => PermissionsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const PermissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PermissionsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => PermissionsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            uuid: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            guard_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const Personal_access_tokensWhereInputSchema: z.ZodType<Prisma.Personal_access_tokensWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Personal_access_tokensWhereInputSchema),
                z.lazy(() => Personal_access_tokensWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Personal_access_tokensWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Personal_access_tokensWhereInputSchema),
                z.lazy(() => Personal_access_tokensWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tokenable_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tokenable_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        token: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        abilities: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        last_used_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        expires_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Personal_access_tokensOrderByWithRelationInputSchema: z.ZodType<Prisma.Personal_access_tokensOrderByWithRelationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            tokenable_type: z.lazy(() => SortOrderSchema).optional(),
            tokenable_id: z.lazy(() => SortOrderSchema).optional(),
            name: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            abilities: z.lazy(() => SortOrderSchema).optional(),
            last_used_at: z.lazy(() => SortOrderSchema).optional(),
            expires_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Personal_access_tokensWhereUniqueInputSchema: z.ZodType<Prisma.Personal_access_tokensWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Personal_access_tokensOrderByWithAggregationInputSchema: z.ZodType<Prisma.Personal_access_tokensOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            tokenable_type: z.lazy(() => SortOrderSchema).optional(),
            tokenable_id: z.lazy(() => SortOrderSchema).optional(),
            name: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            abilities: z.lazy(() => SortOrderSchema).optional(),
            last_used_at: z.lazy(() => SortOrderSchema).optional(),
            expires_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Personal_access_tokensCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Personal_access_tokensMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Personal_access_tokensMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Personal_access_tokensScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Personal_access_tokensScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Personal_access_tokensScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Personal_access_tokensScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Personal_access_tokensScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Personal_access_tokensScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Personal_access_tokensScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            tokenable_type: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            tokenable_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            token: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            abilities: z
                .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
                .optional()
                .nullable(),
            last_used_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            expires_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const Role_has_permissionsWhereInputSchema: z.ZodType<Prisma.Role_has_permissionsWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Role_has_permissionsWhereInputSchema),
                z.lazy(() => Role_has_permissionsWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Role_has_permissionsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Role_has_permissionsWhereInputSchema),
                z.lazy(() => Role_has_permissionsWhereInputSchema).array()
            ])
            .optional(),
        permission_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        role_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        permissions: z
            .union([z.lazy(() => PermissionsRelationFilterSchema), z.lazy(() => PermissionsWhereInputSchema)])
            .optional(),
        roles: z.union([z.lazy(() => RolesRelationFilterSchema), z.lazy(() => RolesWhereInputSchema)]).optional()
    })
    .strict()

export const Role_has_permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Role_has_permissionsOrderByWithRelationInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            role_id: z.lazy(() => SortOrderSchema).optional(),
            permissions: z.lazy(() => PermissionsOrderByWithRelationInputSchema).optional(),
            roles: z.lazy(() => RolesOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Role_has_permissionsWhereUniqueInputSchema: z.ZodType<Prisma.Role_has_permissionsWhereUniqueInput> = z
    .object({
        permission_id_role_id: z
            .lazy(() => Role_has_permissionsPermission_idRole_idCompoundUniqueInputSchema)
            .optional()
    })
    .strict()

export const Role_has_permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Role_has_permissionsOrderByWithAggregationInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            role_id: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Role_has_permissionsCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Role_has_permissionsMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Role_has_permissionsMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Role_has_permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Role_has_permissionsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Role_has_permissionsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Role_has_permissionsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Role_has_permissionsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Role_has_permissionsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Role_has_permissionsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            permission_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            role_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional()
        })
        .strict()

export const RolesWhereInputSchema: z.ZodType<Prisma.RolesWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => RolesWhereInputSchema), z.lazy(() => RolesWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => RolesWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => RolesWhereInputSchema), z.lazy(() => RolesWhereInputSchema).array()]).optional(),
        uuid: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        guard_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        model_has_roles: z.lazy(() => Model_has_rolesListRelationFilterSchema).optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsListRelationFilterSchema).optional()
    })
    .strict()

export const RolesOrderByWithRelationInputSchema: z.ZodType<Prisma.RolesOrderByWithRelationInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        model_has_roles: z.lazy(() => Model_has_rolesOrderByRelationAggregateInputSchema).optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const RolesWhereUniqueInputSchema: z.ZodType<Prisma.RolesWhereUniqueInput> = z
    .object({
        uuid: z.string().uuid().optional()
    })
    .strict()

export const RolesOrderByWithAggregationInputSchema: z.ZodType<Prisma.RolesOrderByWithAggregationInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => RolesCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => RolesMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => RolesMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const RolesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RolesScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => RolesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => RolesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => RolesScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => RolesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => RolesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        uuid: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        guard_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Second_sponsorsWhereInputSchema: z.ZodType<Prisma.Second_sponsorsWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Second_sponsorsWhereInputSchema),
                z.lazy(() => Second_sponsorsWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Second_sponsorsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Second_sponsorsWhereInputSchema),
                z.lazy(() => Second_sponsorsWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        degree_of_kinship: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        phone_number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        address: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        income: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        families: z
            .union([z.lazy(() => FamiliesRelationFilterSchema), z.lazy(() => FamiliesWhereInputSchema)])
            .optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const Second_sponsorsOrderByWithRelationInputSchema: z.ZodType<Prisma.Second_sponsorsOrderByWithRelationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            first_name: z.lazy(() => SortOrderSchema).optional(),
            last_name: z.lazy(() => SortOrderSchema).optional(),
            degree_of_kinship: z.lazy(() => SortOrderSchema).optional(),
            phone_number: z.lazy(() => SortOrderSchema).optional(),
            address: z.lazy(() => SortOrderSchema).optional(),
            income: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            deleted_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            families: z.lazy(() => FamiliesOrderByWithRelationInputSchema).optional(),
            tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Second_sponsorsWhereUniqueInputSchema: z.ZodType<Prisma.Second_sponsorsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Second_sponsorsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Second_sponsorsOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            first_name: z.lazy(() => SortOrderSchema).optional(),
            last_name: z.lazy(() => SortOrderSchema).optional(),
            degree_of_kinship: z.lazy(() => SortOrderSchema).optional(),
            phone_number: z.lazy(() => SortOrderSchema).optional(),
            address: z.lazy(() => SortOrderSchema).optional(),
            income: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            deleted_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Second_sponsorsCountOrderByAggregateInputSchema).optional(),
            _avg: z.lazy(() => Second_sponsorsAvgOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Second_sponsorsMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Second_sponsorsMinOrderByAggregateInputSchema).optional(),
            _sum: z.lazy(() => Second_sponsorsSumOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Second_sponsorsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Second_sponsorsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Second_sponsorsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Second_sponsorsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Second_sponsorsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Second_sponsorsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Second_sponsorsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            first_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            last_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            degree_of_kinship: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            phone_number: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            address: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            income: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
            family_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            deleted_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const SessionsWhereInputSchema: z.ZodType<Prisma.SessionsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SessionsWhereInputSchema), z.lazy(() => SessionsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SessionsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SessionsWhereInputSchema), z.lazy(() => SessionsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        user_id: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        ip_address: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        payload: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_activity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
        users: z
            .union([z.lazy(() => UsersRelationFilterSchema), z.lazy(() => UsersWhereInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SessionsOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        ip_address: z.lazy(() => SortOrderSchema).optional(),
        user_agent: z.lazy(() => SortOrderSchema).optional(),
        payload: z.lazy(() => SortOrderSchema).optional(),
        last_activity: z.lazy(() => SortOrderSchema).optional(),
        users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const SessionsWhereUniqueInputSchema: z.ZodType<Prisma.SessionsWhereUniqueInput> = z
    .object({
        id: z.string().optional()
    })
    .strict()

export const SessionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        ip_address: z.lazy(() => SortOrderSchema).optional(),
        user_agent: z.lazy(() => SortOrderSchema).optional(),
        payload: z.lazy(() => SortOrderSchema).optional(),
        last_activity: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => SessionsCountOrderByAggregateInputSchema).optional(),
        _avg: z.lazy(() => SessionsAvgOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => SessionsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => SessionsMinOrderByAggregateInputSchema).optional(),
        _sum: z.lazy(() => SessionsSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const SessionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionsScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => SessionsScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        user_id: z
            .union([z.lazy(() => UuidNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        ip_address: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        payload: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        last_activity: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional()
    })
    .strict()

export const SettingsWhereInputSchema: z.ZodType<Prisma.SettingsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SettingsWhereInputSchema), z.lazy(() => SettingsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SettingsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SettingsWhereInputSchema), z.lazy(() => SettingsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        user_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        theme: z.union([z.lazy(() => EnumthemeFilterSchema), z.lazy(() => themeSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => Enumcolor_schemeFilterSchema), z.lazy(() => color_schemeSchema)])
            .optional(),
        layout: z.union([z.lazy(() => EnumlayoutFilterSchema), z.lazy(() => layoutSchema)]).optional(),
        appearance: z.union([z.lazy(() => EnumappearanceFilterSchema), z.lazy(() => appearanceSchema)]).optional(),
        notifications: z.lazy(() => JsonNullableFilterSchema).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        users: z.union([z.lazy(() => UsersRelationFilterSchema), z.lazy(() => UsersWhereInputSchema)]).optional()
    })
    .strict()

export const SettingsOrderByWithRelationInputSchema: z.ZodType<Prisma.SettingsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        theme: z.lazy(() => SortOrderSchema).optional(),
        color_scheme: z.lazy(() => SortOrderSchema).optional(),
        layout: z.lazy(() => SortOrderSchema).optional(),
        appearance: z.lazy(() => SortOrderSchema).optional(),
        notifications: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const SettingsWhereUniqueInputSchema: z.ZodType<Prisma.SettingsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const SettingsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SettingsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        theme: z.lazy(() => SortOrderSchema).optional(),
        color_scheme: z.lazy(() => SortOrderSchema).optional(),
        layout: z.lazy(() => SortOrderSchema).optional(),
        appearance: z.lazy(() => SortOrderSchema).optional(),
        notifications: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => SettingsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => SettingsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => SettingsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const SettingsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SettingsScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => SettingsScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SettingsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        user_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        theme: z.union([z.lazy(() => EnumthemeWithAggregatesFilterSchema), z.lazy(() => themeSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => Enumcolor_schemeWithAggregatesFilterSchema), z.lazy(() => color_schemeSchema)])
            .optional(),
        layout: z.union([z.lazy(() => EnumlayoutWithAggregatesFilterSchema), z.lazy(() => layoutSchema)]).optional(),
        appearance: z
            .union([z.lazy(() => EnumappearanceWithAggregatesFilterSchema), z.lazy(() => appearanceSchema)])
            .optional(),
        notifications: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Sponsor_sponsorshipWhereInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Sponsor_sponsorshipWhereInputSchema),
                z.lazy(() => Sponsor_sponsorshipWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Sponsor_sponsorshipWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Sponsor_sponsorshipWhereInputSchema),
                z.lazy(() => Sponsor_sponsorshipWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        sponsor_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([
                z.lazy(() => Enumsponsor_sponsorship_typeFilterSchema),
                z.lazy(() => sponsor_sponsorship_typeSchema)
            ])
            .optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        sponsors: z
            .union([z.lazy(() => SponsorsRelationFilterSchema), z.lazy(() => SponsorsWhereInputSchema)])
            .optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const Sponsor_sponsorshipOrderByWithRelationInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipOrderByWithRelationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            sponsors: z.lazy(() => SponsorsOrderByWithRelationInputSchema).optional(),
            tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipWhereUniqueInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const Sponsor_sponsorshipOrderByWithAggregationInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => Sponsor_sponsorshipCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => Sponsor_sponsorshipMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => Sponsor_sponsorshipMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            sponsor_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            type: z
                .union([
                    z.lazy(() => Enumsponsor_sponsorship_typeWithAggregatesFilterSchema),
                    z.lazy(() => sponsor_sponsorship_typeSchema)
                ])
                .optional(),
            value: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorsWhereInputSchema: z.ZodType<Prisma.SponsorsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SponsorsWhereInputSchema), z.lazy(() => SponsorsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SponsorsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SponsorsWhereInputSchema), z.lazy(() => SponsorsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        zone_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        file_number: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
        start_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        address: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        phone_number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        sponsorship_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        father_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        mother_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_certificate_number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        academic_level: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        function: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        health_status: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        diploma: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        card_number: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_by: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        deleted_by: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        income_sponsor: z.lazy(() => Income_sponsorListRelationFilterSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipListRelationFilterSchema).optional(),
        users_sponsors_created_byTousers: z
            .union([z.lazy(() => UsersRelationFilterSchema), z.lazy(() => UsersWhereInputSchema)])
            .optional(),
        users_sponsors_deleted_byTousers: z
            .union([z.lazy(() => UsersRelationFilterSchema), z.lazy(() => UsersWhereInputSchema)])
            .optional()
            .nullable(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const SponsorsOrderByWithRelationInputSchema: z.ZodType<Prisma.SponsorsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        zone_id: z.lazy(() => SortOrderSchema).optional(),
        file_number: z.lazy(() => SortOrderSchema).optional(),
        start_date: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        address: z.lazy(() => SortOrderSchema).optional(),
        phone_number: z.lazy(() => SortOrderSchema).optional(),
        sponsorship_type: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        father_name: z.lazy(() => SortOrderSchema).optional(),
        mother_name: z.lazy(() => SortOrderSchema).optional(),
        birth_certificate_number: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        diploma: z.lazy(() => SortOrderSchema).optional(),
        card_number: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorOrderByRelationAggregateInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipOrderByRelationAggregateInputSchema).optional(),
        users_sponsors_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
        users_sponsors_deleted_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const SponsorsWhereUniqueInputSchema: z.ZodType<Prisma.SponsorsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const SponsorsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SponsorsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        zone_id: z.lazy(() => SortOrderSchema).optional(),
        file_number: z.lazy(() => SortOrderSchema).optional(),
        start_date: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        address: z.lazy(() => SortOrderSchema).optional(),
        phone_number: z.lazy(() => SortOrderSchema).optional(),
        sponsorship_type: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        father_name: z.lazy(() => SortOrderSchema).optional(),
        mother_name: z.lazy(() => SortOrderSchema).optional(),
        birth_certificate_number: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        diploma: z.lazy(() => SortOrderSchema).optional(),
        card_number: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => SponsorsCountOrderByAggregateInputSchema).optional(),
        _avg: z.lazy(() => SponsorsAvgOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => SponsorsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => SponsorsMinOrderByAggregateInputSchema).optional(),
        _sum: z.lazy(() => SponsorsSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const SponsorsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SponsorsScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => SponsorsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SponsorsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => SponsorsScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => SponsorsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SponsorsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        zone_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        file_number: z.union([z.lazy(() => IntWithAggregatesFilterSchema), z.number()]).optional(),
        start_date: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
        name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        address: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        phone_number: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        sponsorship_type: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
        father_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        mother_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        birth_certificate_number: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        academic_level: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        function: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        health_status: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        diploma: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        card_number: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        created_by: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        deleted_by: z
            .union([z.lazy(() => UuidNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorshipsWhereInputSchema: z.ZodType<Prisma.SponsorshipsWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SponsorshipsWhereInputSchema), z.lazy(() => SponsorshipsWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SponsorshipsWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SponsorshipsWhereInputSchema), z.lazy(() => SponsorshipsWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([z.lazy(() => Enumsponsorship_typeFilterSchema), z.lazy(() => sponsorship_typeSchema)])
            .optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const SponsorshipsOrderByWithRelationInputSchema: z.ZodType<Prisma.SponsorshipsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        type: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const SponsorshipsWhereUniqueInputSchema: z.ZodType<Prisma.SponsorshipsWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const SponsorshipsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SponsorshipsOrderByWithAggregationInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            name: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            deleted_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional(),
            _count: z.lazy(() => SponsorshipsCountOrderByAggregateInputSchema).optional(),
            _max: z.lazy(() => SponsorshipsMaxOrderByAggregateInputSchema).optional(),
            _min: z.lazy(() => SponsorshipsMinOrderByAggregateInputSchema).optional()
        })
        .strict()

export const SponsorshipsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SponsorshipsScalarWhereWithAggregatesInput> =
    z
        .object({
            AND: z
                .union([
                    z.lazy(() => SponsorshipsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => SponsorshipsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            OR: z
                .lazy(() => SponsorshipsScalarWhereWithAggregatesInputSchema)
                .array()
                .optional(),
            NOT: z
                .union([
                    z.lazy(() => SponsorshipsScalarWhereWithAggregatesInputSchema),
                    z.lazy(() => SponsorshipsScalarWhereWithAggregatesInputSchema).array()
                ])
                .optional(),
            id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
            type: z
                .union([
                    z.lazy(() => Enumsponsorship_typeWithAggregatesFilterSchema),
                    z.lazy(() => sponsorship_typeSchema)
                ])
                .optional(),
            name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
            deleted_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            created_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
                .optional()
                .nullable()
        })
        .strict()

export const SpousesWhereInputSchema: z.ZodType<Prisma.SpousesWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => SpousesWhereInputSchema), z.lazy(() => SpousesWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => SpousesWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => SpousesWhereInputSchema), z.lazy(() => SpousesWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        death_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        function: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        income: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        families: z
            .union([z.lazy(() => FamiliesRelationFilterSchema), z.lazy(() => FamiliesWhereInputSchema)])
            .optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const SpousesOrderByWithRelationInputSchema: z.ZodType<Prisma.SpousesOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        death_date: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        income: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        families: z.lazy(() => FamiliesOrderByWithRelationInputSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const SpousesWhereUniqueInputSchema: z.ZodType<Prisma.SpousesWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const SpousesOrderByWithAggregationInputSchema: z.ZodType<Prisma.SpousesOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        death_date: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        income: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => SpousesCountOrderByAggregateInputSchema).optional(),
        _avg: z.lazy(() => SpousesAvgOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => SpousesMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => SpousesMinOrderByAggregateInputSchema).optional(),
        _sum: z.lazy(() => SpousesSumOrderByAggregateInputSchema).optional()
    })
    .strict()

export const SpousesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SpousesScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => SpousesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SpousesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => SpousesScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => SpousesScalarWhereWithAggregatesInputSchema),
                z.lazy(() => SpousesScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
        death_date: z.union([z.lazy(() => DateTimeWithAggregatesFilterSchema), z.coerce.date()]).optional(),
        function: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        income: z.union([z.lazy(() => FloatWithAggregatesFilterSchema), z.number()]).optional(),
        family_id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const TenantsWhereInputSchema: z.ZodType<Prisma.TenantsWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => TenantsWhereInputSchema), z.lazy(() => TenantsWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => TenantsWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => TenantsWhereInputSchema), z.lazy(() => TenantsWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        data: z.lazy(() => JsonNullableFilterSchema).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsListRelationFilterSchema).optional(),
        domains: z.lazy(() => DomainsListRelationFilterSchema).optional(),
        families: z.lazy(() => FamiliesListRelationFilterSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipListRelationFilterSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorListRelationFilterSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipListRelationFilterSchema).optional(),
        orphans: z.lazy(() => OrphansListRelationFilterSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsListRelationFilterSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipListRelationFilterSchema).optional(),
        sponsors: z.lazy(() => SponsorsListRelationFilterSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsListRelationFilterSchema).optional(),
        spouses: z.lazy(() => SpousesListRelationFilterSchema).optional(),
        users: z.lazy(() => UsersListRelationFilterSchema).optional()
    })
    .strict()

export const TenantsOrderByWithRelationInputSchema: z.ZodType<Prisma.TenantsOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        data: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        benefactors: z.lazy(() => BenefactorsOrderByRelationAggregateInputSchema).optional(),
        domains: z.lazy(() => DomainsOrderByRelationAggregateInputSchema).optional(),
        families: z.lazy(() => FamiliesOrderByRelationAggregateInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipOrderByRelationAggregateInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorOrderByRelationAggregateInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipOrderByRelationAggregateInputSchema).optional(),
        orphans: z.lazy(() => OrphansOrderByRelationAggregateInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsOrderByRelationAggregateInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipOrderByRelationAggregateInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsOrderByRelationAggregateInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsOrderByRelationAggregateInputSchema).optional(),
        spouses: z.lazy(() => SpousesOrderByRelationAggregateInputSchema).optional(),
        users: z.lazy(() => UsersOrderByRelationAggregateInputSchema).optional()
    })
    .strict()

export const TenantsWhereUniqueInputSchema: z.ZodType<Prisma.TenantsWhereUniqueInput> = z
    .object({
        id: z.string().optional()
    })
    .strict()

export const TenantsOrderByWithAggregationInputSchema: z.ZodType<Prisma.TenantsOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        data: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => TenantsCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => TenantsMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => TenantsMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const TenantsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TenantsScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => TenantsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => TenantsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => TenantsScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => TenantsScalarWhereWithAggregatesInputSchema),
                z.lazy(() => TenantsScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const UsersWhereInputSchema: z.ZodType<Prisma.UsersWhereInput> = z
    .object({
        AND: z.union([z.lazy(() => UsersWhereInputSchema), z.lazy(() => UsersWhereInputSchema).array()]).optional(),
        OR: z
            .lazy(() => UsersWhereInputSchema)
            .array()
            .optional(),
        NOT: z.union([z.lazy(() => UsersWhereInputSchema), z.lazy(() => UsersWhereInputSchema).array()]).optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        phone: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        email_verified_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        password: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        remember_token: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        orphans_orphans_created_byTousers: z.lazy(() => OrphansListRelationFilterSchema).optional(),
        orphans_orphans_deleted_byTousers: z.lazy(() => OrphansListRelationFilterSchema).optional(),
        sessions: z.lazy(() => SessionsListRelationFilterSchema).optional(),
        settings: z.lazy(() => SettingsListRelationFilterSchema).optional(),
        sponsors_sponsors_created_byTousers: z.lazy(() => SponsorsListRelationFilterSchema).optional(),
        sponsors_sponsors_deleted_byTousers: z.lazy(() => SponsorsListRelationFilterSchema).optional(),
        tenants: z.union([z.lazy(() => TenantsRelationFilterSchema), z.lazy(() => TenantsWhereInputSchema)]).optional()
    })
    .strict()

export const UsersOrderByWithRelationInputSchema: z.ZodType<Prisma.UsersOrderByWithRelationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        phone: z.lazy(() => SortOrderSchema).optional(),
        email: z.lazy(() => SortOrderSchema).optional(),
        email_verified_at: z.lazy(() => SortOrderSchema).optional(),
        password: z.lazy(() => SortOrderSchema).optional(),
        remember_token: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        orphans_orphans_created_byTousers: z.lazy(() => OrphansOrderByRelationAggregateInputSchema).optional(),
        orphans_orphans_deleted_byTousers: z.lazy(() => OrphansOrderByRelationAggregateInputSchema).optional(),
        sessions: z.lazy(() => SessionsOrderByRelationAggregateInputSchema).optional(),
        settings: z.lazy(() => SettingsOrderByRelationAggregateInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z.lazy(() => SponsorsOrderByRelationAggregateInputSchema).optional(),
        sponsors_sponsors_deleted_byTousers: z.lazy(() => SponsorsOrderByRelationAggregateInputSchema).optional(),
        tenants: z.lazy(() => TenantsOrderByWithRelationInputSchema).optional()
    })
    .strict()

export const UsersWhereUniqueInputSchema: z.ZodType<Prisma.UsersWhereUniqueInput> = z
    .object({
        id: z.string().uuid().optional()
    })
    .strict()

export const UsersOrderByWithAggregationInputSchema: z.ZodType<Prisma.UsersOrderByWithAggregationInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        phone: z.lazy(() => SortOrderSchema).optional(),
        email: z.lazy(() => SortOrderSchema).optional(),
        email_verified_at: z.lazy(() => SortOrderSchema).optional(),
        password: z.lazy(() => SortOrderSchema).optional(),
        remember_token: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional(),
        _count: z.lazy(() => UsersCountOrderByAggregateInputSchema).optional(),
        _max: z.lazy(() => UsersMaxOrderByAggregateInputSchema).optional(),
        _min: z.lazy(() => UsersMinOrderByAggregateInputSchema).optional()
    })
    .strict()

export const UsersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UsersScalarWhereWithAggregatesInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),
                z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => UsersScalarWhereWithAggregatesInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),
                z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidWithAggregatesFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        phone: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        email: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        email_verified_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        password: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        remember_token: z
            .union([z.lazy(() => StringNullableWithAggregatesFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringWithAggregatesFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const BenefactorsCreateInputSchema: z.ZodType<Prisma.BenefactorsCreateInput> = z
    .object({
        id: z.string().uuid(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutBenefactorsInputSchema)
    })
    .strict()

export const BenefactorsUncheckedCreateInputSchema: z.ZodType<Prisma.BenefactorsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const BenefactorsUpdateInputSchema: z.ZodType<Prisma.BenefactorsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutBenefactorsNestedInputSchema).optional()
    })
    .strict()

export const BenefactorsUncheckedUpdateInputSchema: z.ZodType<Prisma.BenefactorsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const BenefactorsCreateManyInputSchema: z.ZodType<Prisma.BenefactorsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const BenefactorsUpdateManyMutationInputSchema: z.ZodType<Prisma.BenefactorsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const BenefactorsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BenefactorsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const CacheCreateInputSchema: z.ZodType<Prisma.CacheCreateInput> = z
    .object({
        key: z.string(),
        value: z.string(),
        expiration: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const CacheUncheckedCreateInputSchema: z.ZodType<Prisma.CacheUncheckedCreateInput> = z
    .object({
        key: z.string(),
        value: z.string(),
        expiration: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const CacheUpdateInputSchema: z.ZodType<Prisma.CacheUpdateInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const CacheUncheckedUpdateInputSchema: z.ZodType<Prisma.CacheUncheckedUpdateInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const CacheCreateManyInputSchema: z.ZodType<Prisma.CacheCreateManyInput> = z
    .object({
        key: z.string(),
        value: z.string(),
        expiration: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const CacheUpdateManyMutationInputSchema: z.ZodType<Prisma.CacheUpdateManyMutationInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const CacheUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CacheUncheckedUpdateManyInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const Cache_locksCreateInputSchema: z.ZodType<Prisma.Cache_locksCreateInput> = z
    .object({
        key: z.string(),
        owner: z.string(),
        expiration: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const Cache_locksUncheckedCreateInputSchema: z.ZodType<Prisma.Cache_locksUncheckedCreateInput> = z
    .object({
        key: z.string(),
        owner: z.string(),
        expiration: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const Cache_locksUpdateInputSchema: z.ZodType<Prisma.Cache_locksUpdateInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        owner: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const Cache_locksUncheckedUpdateInputSchema: z.ZodType<Prisma.Cache_locksUncheckedUpdateInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        owner: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const Cache_locksCreateManyInputSchema: z.ZodType<Prisma.Cache_locksCreateManyInput> = z
    .object({
        key: z.string(),
        owner: z.string(),
        expiration: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const Cache_locksUpdateManyMutationInputSchema: z.ZodType<Prisma.Cache_locksUpdateManyMutationInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        owner: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const Cache_locksUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Cache_locksUncheckedUpdateManyInput> = z
    .object({
        key: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        owner: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        expiration: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const DomainsCreateInputSchema: z.ZodType<Prisma.DomainsCreateInput> = z
    .object({
        id: z.string().uuid(),
        domain: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutDomainsInputSchema)
    })
    .strict()

export const DomainsUncheckedCreateInputSchema: z.ZodType<Prisma.DomainsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        domain: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const DomainsUpdateInputSchema: z.ZodType<Prisma.DomainsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutDomainsNestedInputSchema).optional()
    })
    .strict()

export const DomainsUncheckedUpdateInputSchema: z.ZodType<Prisma.DomainsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const DomainsCreateManyInputSchema: z.ZodType<Prisma.DomainsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        domain: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const DomainsUpdateManyMutationInputSchema: z.ZodType<Prisma.DomainsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const DomainsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DomainsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const FamiliesCreateInputSchema: z.ZodType<Prisma.FamiliesCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        report: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
        family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedCreateInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        report: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        family_furnishing: z
            .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
            .optional(),
        family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_sponsorship: z
            .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
            .optional(),
        orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
        spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
    })
    .strict()

export const FamiliesUpdateInputSchema: z.ZodType<Prisma.FamiliesUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
        family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedUpdateInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        family_furnishing: z
            .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
            .optional(),
        family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_sponsorship: z
            .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
            .optional(),
        orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
    })
    .strict()

export const FamiliesCreateManyInputSchema: z.ZodType<Prisma.FamiliesCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        report: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const FamiliesUpdateManyMutationInputSchema: z.ZodType<Prisma.FamiliesUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const FamiliesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Family_furnishingCreateInputSchema: z.ZodType<Prisma.Family_furnishingCreateInput> = z
    .object({
        id: z.string().uuid(),
        value: z.string(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutFamily_furnishingInputSchema),
        furnishings: z.lazy(() => FurnishingsCreateNestedOneWithoutFamily_furnishingInputSchema)
    })
    .strict()

export const Family_furnishingUncheckedCreateInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        furnishing_id: z.string().uuid(),
        value: z.string()
    })
    .strict()

export const Family_furnishingUpdateInputSchema: z.ZodType<Prisma.Family_furnishingUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutFamily_furnishingNestedInputSchema).optional(),
        furnishings: z.lazy(() => FurnishingsUpdateOneRequiredWithoutFamily_furnishingNestedInputSchema).optional()
    })
    .strict()

export const Family_furnishingUncheckedUpdateInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        furnishing_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Family_furnishingCreateManyInputSchema: z.ZodType<Prisma.Family_furnishingCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        furnishing_id: z.string().uuid(),
        value: z.string()
    })
    .strict()

export const Family_furnishingUpdateManyMutationInputSchema: z.ZodType<Prisma.Family_furnishingUpdateManyMutationInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_furnishingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateManyInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            furnishing_id: z
                .union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_housingCreateInputSchema: z.ZodType<Prisma.Family_housingCreateInput> = z
    .object({
        id: z.string().uuid(),
        value: z.string(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutFamily_housingInputSchema),
        housings: z.lazy(() => HousingsCreateNestedOneWithoutFamily_housingInputSchema)
    })
    .strict()

export const Family_housingUncheckedCreateInputSchema: z.ZodType<Prisma.Family_housingUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        housing_id: z.string().uuid(),
        value: z.string()
    })
    .strict()

export const Family_housingUpdateInputSchema: z.ZodType<Prisma.Family_housingUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutFamily_housingNestedInputSchema).optional(),
        housings: z.lazy(() => HousingsUpdateOneRequiredWithoutFamily_housingNestedInputSchema).optional()
    })
    .strict()

export const Family_housingUncheckedUpdateInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        housing_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Family_housingCreateManyInputSchema: z.ZodType<Prisma.Family_housingCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        housing_id: z.string().uuid(),
        value: z.string()
    })
    .strict()

export const Family_housingUpdateManyMutationInputSchema: z.ZodType<Prisma.Family_housingUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Family_housingUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        housing_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Family_sponsorshipCreateInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => family_sponsorship_typeSchema),
        value: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutFamily_sponsorshipInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamily_sponsorshipInputSchema)
    })
    .strict()

export const Family_sponsorshipUncheckedCreateInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        type: z.lazy(() => family_sponsorship_typeSchema),
        value: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Family_sponsorshipUpdateInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => family_sponsorship_typeSchema),
                z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutFamily_sponsorshipNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamily_sponsorshipNestedInputSchema).optional()
    })
    .strict()

export const Family_sponsorshipUncheckedUpdateInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => family_sponsorship_typeSchema),
                z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Family_sponsorshipCreateManyInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        type: z.lazy(() => family_sponsorship_typeSchema),
        value: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Family_sponsorshipUpdateManyMutationInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateManyMutationInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Family_sponsorshipUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateManyInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const FurnishingsCreateInputSchema: z.ZodType<Prisma.FurnishingsCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFurnishingsInputSchema).optional()
    })
    .strict()

export const FurnishingsUncheckedCreateInputSchema: z.ZodType<Prisma.FurnishingsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        family_furnishing: z
            .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFurnishingsInputSchema)
            .optional()
    })
    .strict()

export const FurnishingsUpdateInputSchema: z.ZodType<Prisma.FurnishingsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFurnishingsNestedInputSchema).optional()
    })
    .strict()

export const FurnishingsUncheckedUpdateInputSchema: z.ZodType<Prisma.FurnishingsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_furnishing: z
            .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFurnishingsNestedInputSchema)
            .optional()
    })
    .strict()

export const FurnishingsCreateManyInputSchema: z.ZodType<Prisma.FurnishingsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string()
    })
    .strict()

export const FurnishingsUpdateManyMutationInputSchema: z.ZodType<Prisma.FurnishingsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const FurnishingsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FurnishingsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const HousingsCreateInputSchema: z.ZodType<Prisma.HousingsCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutHousingsInputSchema).optional()
    })
    .strict()

export const HousingsUncheckedCreateInputSchema: z.ZodType<Prisma.HousingsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutHousingsInputSchema).optional()
    })
    .strict()

export const HousingsUpdateInputSchema: z.ZodType<Prisma.HousingsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_housing: z.lazy(() => Family_housingUpdateManyWithoutHousingsNestedInputSchema).optional()
    })
    .strict()

export const HousingsUncheckedUpdateInputSchema: z.ZodType<Prisma.HousingsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutHousingsNestedInputSchema).optional()
    })
    .strict()

export const HousingsCreateManyInputSchema: z.ZodType<Prisma.HousingsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string()
    })
    .strict()

export const HousingsUpdateManyMutationInputSchema: z.ZodType<Prisma.HousingsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const HousingsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.HousingsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Income_sponsorCreateInputSchema: z.ZodType<Prisma.Income_sponsorCreateInput> = z
    .object({
        id: z.string().uuid(),
        value: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        incomes: z.lazy(() => IncomesCreateNestedOneWithoutIncome_sponsorInputSchema),
        sponsors: z.lazy(() => SponsorsCreateNestedOneWithoutIncome_sponsorInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutIncome_sponsorInputSchema)
    })
    .strict()

export const Income_sponsorUncheckedCreateInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        income_id: z.string().uuid(),
        sponsor_id: z.string().uuid(),
        tenant_id: z.string(),
        value: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Income_sponsorUpdateInputSchema: z.ZodType<Prisma.Income_sponsorUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        incomes: z.lazy(() => IncomesUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional()
    })
    .strict()

export const Income_sponsorUncheckedUpdateInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsor_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Income_sponsorCreateManyInputSchema: z.ZodType<Prisma.Income_sponsorCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        income_id: z.string().uuid(),
        sponsor_id: z.string().uuid(),
        tenant_id: z.string(),
        value: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Income_sponsorUpdateManyMutationInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Income_sponsorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsor_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        value: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const IncomesCreateInputSchema: z.ZodType<Prisma.IncomesCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutIncomesInputSchema).optional()
    })
    .strict()

export const IncomesUncheckedCreateInputSchema: z.ZodType<Prisma.IncomesUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutIncomesInputSchema).optional()
    })
    .strict()

export const IncomesUpdateInputSchema: z.ZodType<Prisma.IncomesUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutIncomesNestedInputSchema).optional()
    })
    .strict()

export const IncomesUncheckedUpdateInputSchema: z.ZodType<Prisma.IncomesUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutIncomesNestedInputSchema).optional()
    })
    .strict()

export const IncomesCreateManyInputSchema: z.ZodType<Prisma.IncomesCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string()
    })
    .strict()

export const IncomesUpdateManyMutationInputSchema: z.ZodType<Prisma.IncomesUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const IncomesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.IncomesUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const MediaCreateInputSchema: z.ZodType<Prisma.MediaCreateInput> = z
    .object({
        id: z.string().uuid(),
        model_type: z.string(),
        model_id: z.union([
            z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
            z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
        ]),
        uuid: z.string().uuid().optional().nullable(),
        collection_name: z.string(),
        name: z.string(),
        file_name: z.string(),
        mime_type: z.string().optional().nullable(),
        disk: z.string(),
        conversions_disk: z.string().optional().nullable(),
        size: z.union([
            z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
            z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
        ]),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        order_column: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const MediaUncheckedCreateInputSchema: z.ZodType<Prisma.MediaUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        model_type: z.string(),
        model_id: z.union([
            z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
            z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
        ]),
        uuid: z.string().uuid().optional().nullable(),
        collection_name: z.string(),
        name: z.string(),
        file_name: z.string(),
        mime_type: z.string().optional().nullable(),
        disk: z.string(),
        conversions_disk: z.string().optional().nullable(),
        size: z.union([
            z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
            z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
        ]),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        order_column: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const MediaUpdateInputSchema: z.ZodType<Prisma.MediaUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_id: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        uuid: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        collection_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mime_type: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        disk: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        conversions_disk: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        size: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        order_column: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
            ])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const MediaUncheckedUpdateInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_id: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        uuid: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        collection_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mime_type: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        disk: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        conversions_disk: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        size: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        order_column: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
            ])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const MediaCreateManyInputSchema: z.ZodType<Prisma.MediaCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        model_type: z.string(),
        model_id: z.union([
            z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
            z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
        ]),
        uuid: z.string().uuid().optional().nullable(),
        collection_name: z.string(),
        name: z.string(),
        file_name: z.string(),
        mime_type: z.string().optional().nullable(),
        disk: z.string(),
        conversions_disk: z.string().optional().nullable(),
        size: z.union([
            z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
            z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
        ]),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]),
        order_column: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const MediaUpdateManyMutationInputSchema: z.ZodType<Prisma.MediaUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_id: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        uuid: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        collection_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mime_type: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        disk: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        conversions_disk: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        size: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        order_column: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
            ])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const MediaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_id: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        uuid: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        collection_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mime_type: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        disk: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        conversions_disk: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        size: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => BigIntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        manipulations: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        custom_properties: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        generated_conversions: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        responsive_images: z.union([z.lazy(() => JsonNullValueInputSchema), InputJsonValue]).optional(),
        order_column: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)
            ])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Model_has_permissionsCreateInputSchema: z.ZodType<Prisma.Model_has_permissionsCreateInput> = z
    .object({
        model_type: z.string(),
        model_uuid: z.string().uuid(),
        permissions: z.lazy(() => PermissionsCreateNestedOneWithoutModel_has_permissionsInputSchema)
    })
    .strict()

export const Model_has_permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedCreateInput> =
    z
        .object({
            permission_id: z.string().uuid(),
            model_type: z.string(),
            model_uuid: z.string().uuid()
        })
        .strict()

export const Model_has_permissionsUpdateInputSchema: z.ZodType<Prisma.Model_has_permissionsUpdateInput> = z
    .object({
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutModel_has_permissionsNestedInputSchema).optional()
    })
    .strict()

export const Model_has_permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedUpdateInput> =
    z
        .object({
            permission_id: z
                .union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_permissionsCreateManyInputSchema: z.ZodType<Prisma.Model_has_permissionsCreateManyInput> = z
    .object({
        permission_id: z.string().uuid(),
        model_type: z.string(),
        model_uuid: z.string().uuid()
    })
    .strict()

export const Model_has_permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Model_has_permissionsUpdateManyMutationInput> =
    z
        .object({
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedUpdateManyInput> =
    z
        .object({
            permission_id: z
                .union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_rolesCreateInputSchema: z.ZodType<Prisma.Model_has_rolesCreateInput> = z
    .object({
        model_type: z.string(),
        model_uuid: z.string().uuid(),
        roles: z.lazy(() => RolesCreateNestedOneWithoutModel_has_rolesInputSchema)
    })
    .strict()

export const Model_has_rolesUncheckedCreateInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedCreateInput> = z
    .object({
        role_id: z.string().uuid(),
        model_type: z.string(),
        model_uuid: z.string().uuid()
    })
    .strict()

export const Model_has_rolesUpdateInputSchema: z.ZodType<Prisma.Model_has_rolesUpdateInput> = z
    .object({
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        roles: z.lazy(() => RolesUpdateOneRequiredWithoutModel_has_rolesNestedInputSchema).optional()
    })
    .strict()

export const Model_has_rolesUncheckedUpdateInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedUpdateInput> = z
    .object({
        role_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Model_has_rolesCreateManyInputSchema: z.ZodType<Prisma.Model_has_rolesCreateManyInput> = z
    .object({
        role_id: z.string().uuid(),
        model_type: z.string(),
        model_uuid: z.string().uuid()
    })
    .strict()

export const Model_has_rolesUpdateManyMutationInputSchema: z.ZodType<Prisma.Model_has_rolesUpdateManyMutationInput> = z
    .object({
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Model_has_rolesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedUpdateManyInput> =
    z
        .object({
            role_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Orphan_sponsorshipCreateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => orphan_sponsorship_typeSchema),
        value: z.string().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphans: z.lazy(() => OrphansCreateNestedOneWithoutOrphan_sponsorshipInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphan_sponsorshipInputSchema)
    })
    .strict()

export const Orphan_sponsorshipUncheckedCreateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        orphan_id: z.string().uuid(),
        type: z.lazy(() => orphan_sponsorship_typeSchema),
        value: z.string().optional().nullable(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Orphan_sponsorshipUpdateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => orphan_sponsorship_typeSchema),
                z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        value: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphans: z.lazy(() => OrphansUpdateOneRequiredWithoutOrphan_sponsorshipNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphan_sponsorshipNestedInputSchema).optional()
    })
    .strict()

export const Orphan_sponsorshipUncheckedUpdateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        orphan_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => orphan_sponsorship_typeSchema),
                z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        value: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Orphan_sponsorshipCreateManyInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        orphan_id: z.string().uuid(),
        type: z.lazy(() => orphan_sponsorship_typeSchema),
        value: z.string().optional().nullable(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Orphan_sponsorshipUpdateManyMutationInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateManyMutationInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Orphan_sponsorshipUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateManyInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            orphan_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const OrphansCreateInputSchema: z.ZodType<Prisma.OrphansCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutOrphansInputSchema).optional(),
        users_orphans_created_byTousers: z.lazy(
            () => UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInputSchema
        ),
        users_orphans_deleted_byTousers: z
            .lazy(() => UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInputSchema)
            .optional(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutOrphansInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphansInputSchema)
    })
    .strict()

export const OrphansUncheckedCreateInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        tenant_id: z.string(),
        family_id: z.string().uuid(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphan_sponsorship: z
            .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInputSchema)
            .optional()
    })
    .strict()

export const OrphansUpdateInputSchema: z.ZodType<Prisma.OrphansUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutOrphansNestedInputSchema).optional(),
        users_orphans_created_byTousers: z
            .lazy(() => UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInputSchema)
            .optional(),
        users_orphans_deleted_byTousers: z
            .lazy(() => UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutOrphansNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphansNestedInputSchema).optional()
    })
    .strict()

export const OrphansUncheckedUpdateInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_by: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphan_sponsorship: z
            .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInputSchema)
            .optional()
    })
    .strict()

export const OrphansCreateManyInputSchema: z.ZodType<Prisma.OrphansCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        tenant_id: z.string(),
        family_id: z.string().uuid(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const OrphansUpdateManyMutationInputSchema: z.ZodType<Prisma.OrphansUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const OrphansUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_by: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Password_reset_tokensCreateInputSchema: z.ZodType<Prisma.Password_reset_tokensCreateInput> = z
    .object({
        email: z.string(),
        token: z.string(),
        created_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Password_reset_tokensUncheckedCreateInputSchema: z.ZodType<Prisma.Password_reset_tokensUncheckedCreateInput> =
    z
        .object({
            email: z.string(),
            token: z.string(),
            created_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Password_reset_tokensUpdateInputSchema: z.ZodType<Prisma.Password_reset_tokensUpdateInput> = z
    .object({
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Password_reset_tokensUncheckedUpdateInputSchema: z.ZodType<Prisma.Password_reset_tokensUncheckedUpdateInput> =
    z
        .object({
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Password_reset_tokensCreateManyInputSchema: z.ZodType<Prisma.Password_reset_tokensCreateManyInput> = z
    .object({
        email: z.string(),
        token: z.string(),
        created_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Password_reset_tokensUpdateManyMutationInputSchema: z.ZodType<Prisma.Password_reset_tokensUpdateManyMutationInput> =
    z
        .object({
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Password_reset_tokensUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Password_reset_tokensUncheckedUpdateManyInput> =
    z
        .object({
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const PermissionsCreateInputSchema: z.ZodType<Prisma.PermissionsCreateInput> = z
    .object({
        uuid: z.string().uuid(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        model_has_permissions: z
            .lazy(() => Model_has_permissionsCreateNestedManyWithoutPermissionsInputSchema)
            .optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
    })
    .strict()

export const PermissionsUncheckedCreateInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateInput> = z
    .object({
        uuid: z.string().uuid(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        model_has_permissions: z
            .lazy(() => Model_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema)
            .optional(),
        role_has_permissions: z
            .lazy(() => Role_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema)
            .optional()
    })
    .strict()

export const PermissionsUpdateInputSchema: z.ZodType<Prisma.PermissionsUpdateInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        model_has_permissions: z
            .lazy(() => Model_has_permissionsUpdateManyWithoutPermissionsNestedInputSchema)
            .optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
    })
    .strict()

export const PermissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        model_has_permissions: z
            .lazy(() => Model_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema)
            .optional(),
        role_has_permissions: z
            .lazy(() => Role_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema)
            .optional()
    })
    .strict()

export const PermissionsCreateManyInputSchema: z.ZodType<Prisma.PermissionsCreateManyInput> = z
    .object({
        uuid: z.string().uuid(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const PermissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.PermissionsUpdateManyMutationInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const PermissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateManyInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Personal_access_tokensCreateInputSchema: z.ZodType<Prisma.Personal_access_tokensCreateInput> = z
    .object({
        id: z.string().uuid(),
        tokenable_type: z.string(),
        tokenable_id: z.string().uuid(),
        name: z.string(),
        token: z.string(),
        abilities: z.string().optional().nullable(),
        last_used_at: z.coerce.date().optional().nullable(),
        expires_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Personal_access_tokensUncheckedCreateInputSchema: z.ZodType<Prisma.Personal_access_tokensUncheckedCreateInput> =
    z
        .object({
            id: z.string().uuid(),
            tokenable_type: z.string(),
            tokenable_id: z.string().uuid(),
            name: z.string(),
            token: z.string(),
            abilities: z.string().optional().nullable(),
            last_used_at: z.coerce.date().optional().nullable(),
            expires_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Personal_access_tokensUpdateInputSchema: z.ZodType<Prisma.Personal_access_tokensUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tokenable_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tokenable_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        abilities: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        last_used_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        expires_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Personal_access_tokensUncheckedUpdateInputSchema: z.ZodType<Prisma.Personal_access_tokensUncheckedUpdateInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tokenable_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tokenable_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            abilities: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            last_used_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            expires_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Personal_access_tokensCreateManyInputSchema: z.ZodType<Prisma.Personal_access_tokensCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        tokenable_type: z.string(),
        tokenable_id: z.string().uuid(),
        name: z.string(),
        token: z.string(),
        abilities: z.string().optional().nullable(),
        last_used_at: z.coerce.date().optional().nullable(),
        expires_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Personal_access_tokensUpdateManyMutationInputSchema: z.ZodType<Prisma.Personal_access_tokensUpdateManyMutationInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tokenable_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tokenable_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            abilities: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            last_used_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            expires_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Personal_access_tokensUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Personal_access_tokensUncheckedUpdateManyInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tokenable_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tokenable_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            token: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            abilities: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            last_used_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            expires_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Role_has_permissionsCreateInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateInput> = z
    .object({
        permissions: z.lazy(() => PermissionsCreateNestedOneWithoutRole_has_permissionsInputSchema),
        roles: z.lazy(() => RolesCreateNestedOneWithoutRole_has_permissionsInputSchema)
    })
    .strict()

export const Role_has_permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedCreateInput> =
    z
        .object({
            permission_id: z.string().uuid(),
            role_id: z.string().uuid()
        })
        .strict()

export const Role_has_permissionsUpdateInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateInput> = z
    .object({
        permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutRole_has_permissionsNestedInputSchema).optional(),
        roles: z.lazy(() => RolesUpdateOneRequiredWithoutRole_has_permissionsNestedInputSchema).optional()
    })
    .strict()

export const Role_has_permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateInput> =
    z
        .object({
            permission_id: z
                .union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            role_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Role_has_permissionsCreateManyInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateManyInput> = z
    .object({
        permission_id: z.string().uuid(),
        role_id: z.string().uuid()
    })
    .strict()

export const Role_has_permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateManyMutationInput> =
    z.object({}).strict()

export const Role_has_permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateManyInput> =
    z
        .object({
            permission_id: z
                .union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            role_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const RolesCreateInputSchema: z.ZodType<Prisma.RolesCreateInput> = z
    .object({
        uuid: z.string().uuid(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        model_has_roles: z.lazy(() => Model_has_rolesCreateNestedManyWithoutRolesInputSchema).optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsCreateNestedManyWithoutRolesInputSchema).optional()
    })
    .strict()

export const RolesUncheckedCreateInputSchema: z.ZodType<Prisma.RolesUncheckedCreateInput> = z
    .object({
        uuid: z.string().uuid(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        model_has_roles: z.lazy(() => Model_has_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
        role_has_permissions: z
            .lazy(() => Role_has_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema)
            .optional()
    })
    .strict()

export const RolesUpdateInputSchema: z.ZodType<Prisma.RolesUpdateInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        model_has_roles: z.lazy(() => Model_has_rolesUpdateManyWithoutRolesNestedInputSchema).optional(),
        role_has_permissions: z.lazy(() => Role_has_permissionsUpdateManyWithoutRolesNestedInputSchema).optional()
    })
    .strict()

export const RolesUncheckedUpdateInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        model_has_roles: z.lazy(() => Model_has_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
        role_has_permissions: z
            .lazy(() => Role_has_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema)
            .optional()
    })
    .strict()

export const RolesCreateManyInputSchema: z.ZodType<Prisma.RolesCreateManyInput> = z
    .object({
        uuid: z.string().uuid(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const RolesUpdateManyMutationInputSchema: z.ZodType<Prisma.RolesUpdateManyMutationInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const RolesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateManyInput> = z
    .object({
        uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Second_sponsorsCreateInputSchema: z.ZodType<Prisma.Second_sponsorsCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        degree_of_kinship: z.string(),
        phone_number: z.string(),
        address: z.string(),
        income: z.number().or(z.nan()),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutSecond_sponsorsInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutSecond_sponsorsInputSchema)
    })
    .strict()

export const Second_sponsorsUncheckedCreateInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        degree_of_kinship: z.string(),
        phone_number: z.string(),
        address: z.string(),
        income: z.number().or(z.nan()),
        family_id: z.string().uuid(),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Second_sponsorsUpdateInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutSecond_sponsorsNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSecond_sponsorsNestedInputSchema).optional()
    })
    .strict()

export const Second_sponsorsUncheckedUpdateInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Second_sponsorsCreateManyInputSchema: z.ZodType<Prisma.Second_sponsorsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        degree_of_kinship: z.string(),
        phone_number: z.string(),
        address: z.string(),
        income: z.number().or(z.nan()),
        family_id: z.string().uuid(),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Second_sponsorsUpdateManyMutationInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Second_sponsorsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateManyInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SessionsCreateInputSchema: z.ZodType<Prisma.SessionsCreateInput> = z
    .object({
        id: z.string(),
        ip_address: z.string().optional().nullable(),
        user_agent: z.string().optional().nullable(),
        payload: z.string(),
        last_activity: z.number().int().gte(-2147483648).lte(2147483647),
        users: z.lazy(() => UsersCreateNestedOneWithoutSessionsInputSchema).optional()
    })
    .strict()

export const SessionsUncheckedCreateInputSchema: z.ZodType<Prisma.SessionsUncheckedCreateInput> = z
    .object({
        id: z.string(),
        user_id: z.string().uuid().optional().nullable(),
        ip_address: z.string().optional().nullable(),
        user_agent: z.string().optional().nullable(),
        payload: z.string(),
        last_activity: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const SessionsUpdateInputSchema: z.ZodType<Prisma.SessionsUpdateInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        ip_address: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_activity: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        users: z.lazy(() => UsersUpdateOneWithoutSessionsNestedInputSchema).optional()
    })
    .strict()

export const SessionsUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        user_id: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        ip_address: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_activity: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const SessionsCreateManyInputSchema: z.ZodType<Prisma.SessionsCreateManyInput> = z
    .object({
        id: z.string(),
        user_id: z.string().uuid().optional().nullable(),
        ip_address: z.string().optional().nullable(),
        user_agent: z.string().optional().nullable(),
        payload: z.string(),
        last_activity: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const SessionsUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        ip_address: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_activity: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const SessionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        user_id: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        ip_address: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_activity: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional()
    })
    .strict()

export const SettingsCreateInputSchema: z.ZodType<Prisma.SettingsCreateInput> = z
    .object({
        id: z.string().uuid(),
        theme: z.lazy(() => themeSchema),
        color_scheme: z.lazy(() => color_schemeSchema),
        layout: z.lazy(() => layoutSchema),
        appearance: z.lazy(() => appearanceSchema),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        users: z.lazy(() => UsersCreateNestedOneWithoutSettingsInputSchema)
    })
    .strict()

export const SettingsUncheckedCreateInputSchema: z.ZodType<Prisma.SettingsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        user_id: z.string().uuid(),
        theme: z.lazy(() => themeSchema),
        color_scheme: z.lazy(() => color_schemeSchema),
        layout: z.lazy(() => layoutSchema),
        appearance: z.lazy(() => appearanceSchema),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SettingsUpdateInputSchema: z.ZodType<Prisma.SettingsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        theme: z.union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => color_schemeSchema), z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)])
            .optional(),
        layout: z
            .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
            .optional(),
        appearance: z
            .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
            .optional(),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        users: z.lazy(() => UsersUpdateOneRequiredWithoutSettingsNestedInputSchema).optional()
    })
    .strict()

export const SettingsUncheckedUpdateInputSchema: z.ZodType<Prisma.SettingsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        user_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        theme: z.union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => color_schemeSchema), z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)])
            .optional(),
        layout: z
            .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
            .optional(),
        appearance: z
            .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
            .optional(),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SettingsCreateManyInputSchema: z.ZodType<Prisma.SettingsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        user_id: z.string().uuid(),
        theme: z.lazy(() => themeSchema),
        color_scheme: z.lazy(() => color_schemeSchema),
        layout: z.lazy(() => layoutSchema),
        appearance: z.lazy(() => appearanceSchema),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SettingsUpdateManyMutationInputSchema: z.ZodType<Prisma.SettingsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        theme: z.union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => color_schemeSchema), z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)])
            .optional(),
        layout: z
            .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
            .optional(),
        appearance: z
            .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
            .optional(),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SettingsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SettingsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        user_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        theme: z.union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => color_schemeSchema), z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)])
            .optional(),
        layout: z
            .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
            .optional(),
        appearance: z
            .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
            .optional(),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const Sponsor_sponsorshipCreateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => sponsor_sponsorship_typeSchema),
        value: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        sponsors: z.lazy(() => SponsorsCreateNestedOneWithoutSponsor_sponsorshipInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsor_sponsorshipInputSchema)
    })
    .strict()

export const Sponsor_sponsorshipUncheckedCreateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedCreateInput> =
    z
        .object({
            id: z.string().uuid(),
            sponsor_id: z.string().uuid(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Sponsor_sponsorshipUpdateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => sponsor_sponsorship_typeSchema),
                z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        sponsors: z.lazy(() => SponsorsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInputSchema).optional()
    })
    .strict()

export const Sponsor_sponsorshipUncheckedUpdateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsor_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Sponsor_sponsorshipCreateManyInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        sponsor_id: z.string().uuid(),
        type: z.lazy(() => sponsor_sponsorship_typeSchema),
        value: z.string(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Sponsor_sponsorshipUpdateManyMutationInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyMutationInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateManyInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsor_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorsCreateInputSchema: z.ZodType<Prisma.SponsorsCreateInput> = z
    .object({
        id: z.string().uuid(),
        zone_id: z.string().uuid(),
        file_number: z.number().int().gte(-2147483648).lte(2147483647),
        start_date: z.coerce.date(),
        name: z.string(),
        address: z.string(),
        phone_number: z.string(),
        sponsorship_type: z.string(),
        birth_date: z.coerce.date(),
        father_name: z.string(),
        mother_name: z.string(),
        birth_certificate_number: z.string(),
        academic_level: z.string(),
        function: z.string(),
        health_status: z.string(),
        diploma: z.string().optional().nullable(),
        card_number: z.string().optional().nullable(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutSponsorsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInputSchema).optional(),
        users_sponsors_created_byTousers: z.lazy(
            () => UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInputSchema
        ),
        users_sponsors_deleted_byTousers: z
            .lazy(() => UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsorsInputSchema)
    })
    .strict()

export const SponsorsUncheckedCreateInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        zone_id: z.string().uuid(),
        file_number: z.number().int().gte(-2147483648).lte(2147483647),
        start_date: z.coerce.date(),
        name: z.string(),
        address: z.string(),
        phone_number: z.string(),
        sponsorship_type: z.string(),
        birth_date: z.coerce.date(),
        father_name: z.string(),
        mother_name: z.string(),
        birth_certificate_number: z.string(),
        academic_level: z.string(),
        function: z.string(),
        health_status: z.string(),
        diploma: z.string().optional().nullable(),
        card_number: z.string().optional().nullable(),
        tenant_id: z.string(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInputSchema).optional(),
        sponsor_sponsorship: z
            .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInputSchema)
            .optional()
    })
    .strict()

export const SponsorsUpdateInputSchema: z.ZodType<Prisma.SponsorsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_number: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_certificate_number: z
            .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
            .optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        diploma: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        card_number: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutSponsorsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInputSchema).optional(),
        users_sponsors_created_byTousers: z
            .lazy(() => UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        users_sponsors_deleted_byTousers: z
            .lazy(() => UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsorsNestedInputSchema).optional()
    })
    .strict()

export const SponsorsUncheckedUpdateInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_number: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_certificate_number: z
            .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
            .optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        diploma: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        card_number: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_by: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInputSchema).optional(),
        sponsor_sponsorship: z
            .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInputSchema)
            .optional()
    })
    .strict()

export const SponsorsCreateManyInputSchema: z.ZodType<Prisma.SponsorsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        zone_id: z.string().uuid(),
        file_number: z.number().int().gte(-2147483648).lte(2147483647),
        start_date: z.coerce.date(),
        name: z.string(),
        address: z.string(),
        phone_number: z.string(),
        sponsorship_type: z.string(),
        birth_date: z.coerce.date(),
        father_name: z.string(),
        mother_name: z.string(),
        birth_certificate_number: z.string(),
        academic_level: z.string(),
        function: z.string(),
        health_status: z.string(),
        diploma: z.string().optional().nullable(),
        card_number: z.string().optional().nullable(),
        tenant_id: z.string(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SponsorsUpdateManyMutationInputSchema: z.ZodType<Prisma.SponsorsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_number: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_certificate_number: z
            .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
            .optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        diploma: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        card_number: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_number: z
            .union([
                z.number().int().gte(-2147483648).lte(2147483647),
                z.lazy(() => IntFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_certificate_number: z
            .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
            .optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        diploma: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        card_number: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_by: z
            .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorshipsCreateInputSchema: z.ZodType<Prisma.SponsorshipsCreateInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => sponsorship_typeSchema),
        name: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsorshipsInputSchema)
    })
    .strict()

export const SponsorshipsUncheckedCreateInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => sponsorship_typeSchema),
        name: z.string(),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SponsorshipsUpdateInputSchema: z.ZodType<Prisma.SponsorshipsUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => sponsorship_typeSchema),
                z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsorshipsNestedInputSchema).optional()
    })
    .strict()

export const SponsorshipsUncheckedUpdateInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => sponsorship_typeSchema),
                z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorshipsCreateManyInputSchema: z.ZodType<Prisma.SponsorshipsCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => sponsorship_typeSchema),
        name: z.string(),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SponsorshipsUpdateManyMutationInputSchema: z.ZodType<Prisma.SponsorshipsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => sponsorship_typeSchema),
                z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorshipsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => sponsorship_typeSchema),
                z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SpousesCreateInputSchema: z.ZodType<Prisma.SpousesCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutSpousesInputSchema),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutSpousesInputSchema)
    })
    .strict()

export const SpousesUncheckedCreateInputSchema: z.ZodType<Prisma.SpousesUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number().or(z.nan()),
        family_id: z.string().uuid(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SpousesUpdateInputSchema: z.ZodType<Prisma.SpousesUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutSpousesNestedInputSchema).optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSpousesNestedInputSchema).optional()
    })
    .strict()

export const SpousesUncheckedUpdateInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SpousesCreateManyInputSchema: z.ZodType<Prisma.SpousesCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number().or(z.nan()),
        family_id: z.string().uuid(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SpousesUpdateManyMutationInputSchema: z.ZodType<Prisma.SpousesUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SpousesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const TenantsCreateInputSchema: z.ZodType<Prisma.TenantsCreateInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z
            .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
            .optional(),
        income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z
            .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
            .optional(),
        orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z
            .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
            .optional(),
        sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUpdateInputSchema: z.ZodType<Prisma.TenantsUpdateInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z
            .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
            .optional(),
        income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z
            .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
            .optional(),
        orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z
            .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
            .optional(),
        sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsCreateManyInputSchema: z.ZodType<Prisma.TenantsCreateManyInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const TenantsUpdateManyMutationInputSchema: z.ZodType<Prisma.TenantsUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const TenantsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const UsersCreateInputSchema: z.ZodType<Prisma.UsersCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
        settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
    })
    .strict()

export const UsersUncheckedCreateInputSchema: z.ZodType<Prisma.UsersUncheckedCreateInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
        settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
            .optional()
    })
    .strict()

export const UsersUpdateInputSchema: z.ZodType<Prisma.UsersUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
        settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
    })
    .strict()

export const UsersUncheckedUpdateInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
        settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
            .optional()
    })
    .strict()

export const UsersCreateManyInputSchema: z.ZodType<Prisma.UsersCreateManyInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const UsersUpdateManyMutationInputSchema: z.ZodType<Prisma.UsersUpdateManyMutationInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const UsersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateManyInput> = z
    .object({
        id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z.union([z.string(), z.lazy(() => NestedUuidFilterSchema)]).optional()
    })
    .strict()

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z.union([z.string(), z.lazy(() => NestedStringFilterSchema)]).optional()
    })
    .strict()

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z
    .object({
        equals: z.coerce.date().optional().nullable(),
        in: z.coerce.date().array().optional().nullable(),
        notIn: z.coerce.date().array().optional().nullable(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z
            .union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const TenantsRelationFilterSchema: z.ZodType<Prisma.TenantsRelationFilter> = z
    .object({
        is: z.lazy(() => TenantsWhereInputSchema).optional(),
        isNot: z.lazy(() => TenantsWhereInputSchema).optional()
    })
    .strict()

export const BenefactorsCountOrderByAggregateInputSchema: z.ZodType<Prisma.BenefactorsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BenefactorsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BenefactorsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BenefactorsMinOrderByAggregateInputSchema: z.ZodType<Prisma.BenefactorsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z.union([z.string(), z.lazy(() => NestedUuidWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedStringFilterSchema).optional(),
        _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedStringFilterSchema).optional(),
        _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z
    .object({
        equals: z.coerce.date().optional().nullable(),
        in: z.coerce.date().array().optional().nullable(),
        notIn: z.coerce.date().array().optional().nullable(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z
            .union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)])
            .optional()
            .nullable(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
    })
    .strict()

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
    })
    .strict()

export const CacheCountOrderByAggregateInputSchema: z.ZodType<Prisma.CacheCountOrderByAggregateInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CacheAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CacheAvgOrderByAggregateInput> = z
    .object({
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CacheMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CacheMaxOrderByAggregateInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CacheMinOrderByAggregateInputSchema: z.ZodType<Prisma.CacheMinOrderByAggregateInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const CacheSumOrderByAggregateInputSchema: z.ZodType<Prisma.CacheSumOrderByAggregateInput> = z
    .object({
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
        _sum: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedIntFilterSchema).optional(),
        _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const Cache_locksCountOrderByAggregateInputSchema: z.ZodType<Prisma.Cache_locksCountOrderByAggregateInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        owner: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Cache_locksAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Cache_locksAvgOrderByAggregateInput> = z
    .object({
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Cache_locksMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Cache_locksMaxOrderByAggregateInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        owner: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Cache_locksMinOrderByAggregateInputSchema: z.ZodType<Prisma.Cache_locksMinOrderByAggregateInput> = z
    .object({
        key: z.lazy(() => SortOrderSchema).optional(),
        owner: z.lazy(() => SortOrderSchema).optional(),
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Cache_locksSumOrderByAggregateInputSchema: z.ZodType<Prisma.Cache_locksSumOrderByAggregateInput> = z
    .object({
        expiration: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const DomainsCountOrderByAggregateInputSchema: z.ZodType<Prisma.DomainsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        domain: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const DomainsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DomainsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        domain: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const DomainsMinOrderByAggregateInputSchema: z.ZodType<Prisma.DomainsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        domain: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Family_furnishingListRelationFilterSchema: z.ZodType<Prisma.Family_furnishingListRelationFilter> = z
    .object({
        every: z.lazy(() => Family_furnishingWhereInputSchema).optional(),
        some: z.lazy(() => Family_furnishingWhereInputSchema).optional(),
        none: z.lazy(() => Family_furnishingWhereInputSchema).optional()
    })
    .strict()

export const Family_housingListRelationFilterSchema: z.ZodType<Prisma.Family_housingListRelationFilter> = z
    .object({
        every: z.lazy(() => Family_housingWhereInputSchema).optional(),
        some: z.lazy(() => Family_housingWhereInputSchema).optional(),
        none: z.lazy(() => Family_housingWhereInputSchema).optional()
    })
    .strict()

export const Family_sponsorshipListRelationFilterSchema: z.ZodType<Prisma.Family_sponsorshipListRelationFilter> = z
    .object({
        every: z.lazy(() => Family_sponsorshipWhereInputSchema).optional(),
        some: z.lazy(() => Family_sponsorshipWhereInputSchema).optional(),
        none: z.lazy(() => Family_sponsorshipWhereInputSchema).optional()
    })
    .strict()

export const OrphansListRelationFilterSchema: z.ZodType<Prisma.OrphansListRelationFilter> = z
    .object({
        every: z.lazy(() => OrphansWhereInputSchema).optional(),
        some: z.lazy(() => OrphansWhereInputSchema).optional(),
        none: z.lazy(() => OrphansWhereInputSchema).optional()
    })
    .strict()

export const Second_sponsorsListRelationFilterSchema: z.ZodType<Prisma.Second_sponsorsListRelationFilter> = z
    .object({
        every: z.lazy(() => Second_sponsorsWhereInputSchema).optional(),
        some: z.lazy(() => Second_sponsorsWhereInputSchema).optional(),
        none: z.lazy(() => Second_sponsorsWhereInputSchema).optional()
    })
    .strict()

export const SpousesListRelationFilterSchema: z.ZodType<Prisma.SpousesListRelationFilter> = z
    .object({
        every: z.lazy(() => SpousesWhereInputSchema).optional(),
        some: z.lazy(() => SpousesWhereInputSchema).optional(),
        none: z.lazy(() => SpousesWhereInputSchema).optional()
    })
    .strict()

export const Family_furnishingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Family_furnishingOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_housingOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Family_housingOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_sponsorshipOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Family_sponsorshipOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const OrphansOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrphansOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Second_sponsorsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Second_sponsorsOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const SpousesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SpousesOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FamiliesCountOrderByAggregateInputSchema: z.ZodType<Prisma.FamiliesCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        report: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FamiliesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FamiliesMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        report: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FamiliesMinOrderByAggregateInputSchema: z.ZodType<Prisma.FamiliesMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        report: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FamiliesRelationFilterSchema: z.ZodType<Prisma.FamiliesRelationFilter> = z
    .object({
        is: z.lazy(() => FamiliesWhereInputSchema).optional(),
        isNot: z.lazy(() => FamiliesWhereInputSchema).optional()
    })
    .strict()

export const FurnishingsRelationFilterSchema: z.ZodType<Prisma.FurnishingsRelationFilter> = z
    .object({
        is: z.lazy(() => FurnishingsWhereInputSchema).optional(),
        isNot: z.lazy(() => FurnishingsWhereInputSchema).optional()
    })
    .strict()

export const Family_furnishingCountOrderByAggregateInputSchema: z.ZodType<Prisma.Family_furnishingCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            furnishing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_furnishingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Family_furnishingMaxOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            furnishing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_furnishingMinOrderByAggregateInputSchema: z.ZodType<Prisma.Family_furnishingMinOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            furnishing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const HousingsRelationFilterSchema: z.ZodType<Prisma.HousingsRelationFilter> = z
    .object({
        is: z.lazy(() => HousingsWhereInputSchema).optional(),
        isNot: z.lazy(() => HousingsWhereInputSchema).optional()
    })
    .strict()

export const Family_housingCountOrderByAggregateInputSchema: z.ZodType<Prisma.Family_housingCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            housing_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_housingMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Family_housingMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        housing_id: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Family_housingMinOrderByAggregateInputSchema: z.ZodType<Prisma.Family_housingMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        housing_id: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Enumfamily_sponsorship_typeFilterSchema: z.ZodType<Prisma.Enumfamily_sponsorship_typeFilter> = z
    .object({
        equals: z.lazy(() => family_sponsorship_typeSchema).optional(),
        in: z
            .lazy(() => family_sponsorship_typeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => family_sponsorship_typeSchema)
            .array()
            .optional(),
        not: z
            .union([
                z.lazy(() => family_sponsorship_typeSchema),
                z.lazy(() => NestedEnumfamily_sponsorship_typeFilterSchema)
            ])
            .optional()
    })
    .strict()

export const Family_sponsorshipCountOrderByAggregateInputSchema: z.ZodType<Prisma.Family_sponsorshipCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_sponsorshipMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Family_sponsorshipMaxOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Family_sponsorshipMinOrderByAggregateInputSchema: z.ZodType<Prisma.Family_sponsorshipMinOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Enumfamily_sponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumfamily_sponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => family_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => family_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => family_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumfamily_sponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumfamily_sponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumfamily_sponsorship_typeFilterSchema).optional()
        })
        .strict()

export const FurnishingsCountOrderByAggregateInputSchema: z.ZodType<Prisma.FurnishingsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FurnishingsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FurnishingsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FurnishingsMinOrderByAggregateInputSchema: z.ZodType<Prisma.FurnishingsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const HousingsCountOrderByAggregateInputSchema: z.ZodType<Prisma.HousingsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const HousingsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.HousingsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const HousingsMinOrderByAggregateInputSchema: z.ZodType<Prisma.HousingsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedFloatFilterSchema)]).optional()
    })
    .strict()

export const IncomesRelationFilterSchema: z.ZodType<Prisma.IncomesRelationFilter> = z
    .object({
        is: z.lazy(() => IncomesWhereInputSchema).optional(),
        isNot: z.lazy(() => IncomesWhereInputSchema).optional()
    })
    .strict()

export const SponsorsRelationFilterSchema: z.ZodType<Prisma.SponsorsRelationFilter> = z
    .object({
        is: z.lazy(() => SponsorsWhereInputSchema).optional(),
        isNot: z.lazy(() => SponsorsWhereInputSchema).optional()
    })
    .strict()

export const Income_sponsorCountOrderByAggregateInputSchema: z.ZodType<Prisma.Income_sponsorCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            income_id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Income_sponsorAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Income_sponsorAvgOrderByAggregateInput> = z
    .object({
        value: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Income_sponsorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Income_sponsorMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        income_id: z.lazy(() => SortOrderSchema).optional(),
        sponsor_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Income_sponsorMinOrderByAggregateInputSchema: z.ZodType<Prisma.Income_sponsorMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        income_id: z.lazy(() => SortOrderSchema).optional(),
        sponsor_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        value: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Income_sponsorSumOrderByAggregateInputSchema: z.ZodType<Prisma.Income_sponsorSumOrderByAggregateInput> = z
    .object({
        value: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
        _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
        _min: z.lazy(() => NestedFloatFilterSchema).optional(),
        _max: z.lazy(() => NestedFloatFilterSchema).optional()
    })
    .strict()

export const Income_sponsorListRelationFilterSchema: z.ZodType<Prisma.Income_sponsorListRelationFilter> = z
    .object({
        every: z.lazy(() => Income_sponsorWhereInputSchema).optional(),
        some: z.lazy(() => Income_sponsorWhereInputSchema).optional(),
        none: z.lazy(() => Income_sponsorWhereInputSchema).optional()
    })
    .strict()

export const Income_sponsorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Income_sponsorOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const IncomesCountOrderByAggregateInputSchema: z.ZodType<Prisma.IncomesCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IncomesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.IncomesMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const IncomesMinOrderByAggregateInputSchema: z.ZodType<Prisma.IncomesMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BigIntFilterSchema: z.ZodType<Prisma.BigIntFilter> = z
    .object({
        equals: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        in: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        notIn: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        lt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        lte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        not: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => NestedBigIntFilterSchema)
            ])
            .optional()
    })
    .strict()

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedUuidNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z
    .object({
        equals: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        path: z.string().array().optional(),
        string_contains: z.string().optional(),
        string_starts_with: z.string().optional(),
        string_ends_with: z.string().optional(),
        array_contains: InputJsonValue.optional().nullable(),
        array_starts_with: InputJsonValue.optional().nullable(),
        array_ends_with: InputJsonValue.optional().nullable(),
        lt: InputJsonValue.optional(),
        lte: InputJsonValue.optional(),
        gt: InputJsonValue.optional(),
        gte: InputJsonValue.optional(),
        not: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional()
    })
    .strict()

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z
    .object({
        equals: z.number().optional().nullable(),
        in: z.number().array().optional().nullable(),
        notIn: z.number().array().optional().nullable(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z
            .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const MediaCountOrderByAggregateInputSchema: z.ZodType<Prisma.MediaCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        model_type: z.lazy(() => SortOrderSchema).optional(),
        model_id: z.lazy(() => SortOrderSchema).optional(),
        uuid: z.lazy(() => SortOrderSchema).optional(),
        collection_name: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        file_name: z.lazy(() => SortOrderSchema).optional(),
        mime_type: z.lazy(() => SortOrderSchema).optional(),
        disk: z.lazy(() => SortOrderSchema).optional(),
        conversions_disk: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        manipulations: z.lazy(() => SortOrderSchema).optional(),
        custom_properties: z.lazy(() => SortOrderSchema).optional(),
        generated_conversions: z.lazy(() => SortOrderSchema).optional(),
        responsive_images: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const MediaAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MediaAvgOrderByAggregateInput> = z
    .object({
        model_id: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const MediaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MediaMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        model_type: z.lazy(() => SortOrderSchema).optional(),
        model_id: z.lazy(() => SortOrderSchema).optional(),
        uuid: z.lazy(() => SortOrderSchema).optional(),
        collection_name: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        file_name: z.lazy(() => SortOrderSchema).optional(),
        mime_type: z.lazy(() => SortOrderSchema).optional(),
        disk: z.lazy(() => SortOrderSchema).optional(),
        conversions_disk: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const MediaMinOrderByAggregateInputSchema: z.ZodType<Prisma.MediaMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        model_type: z.lazy(() => SortOrderSchema).optional(),
        model_id: z.lazy(() => SortOrderSchema).optional(),
        uuid: z.lazy(() => SortOrderSchema).optional(),
        collection_name: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        file_name: z.lazy(() => SortOrderSchema).optional(),
        mime_type: z.lazy(() => SortOrderSchema).optional(),
        disk: z.lazy(() => SortOrderSchema).optional(),
        conversions_disk: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const MediaSumOrderByAggregateInputSchema: z.ZodType<Prisma.MediaSumOrderByAggregateInput> = z
    .object({
        model_id: z.lazy(() => SortOrderSchema).optional(),
        size: z.lazy(() => SortOrderSchema).optional(),
        order_column: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BigIntWithAggregatesFilterSchema: z.ZodType<Prisma.BigIntWithAggregatesFilter> = z
    .object({
        equals: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        in: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        notIn: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        lt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        lte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        not: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => NestedBigIntWithAggregatesFilterSchema)
            ])
            .optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
        _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
        _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
        _max: z.lazy(() => NestedBigIntFilterSchema).optional()
    })
    .strict()

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema)])
            .optional()
            .nullable(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        mode: z.lazy(() => QueryModeSchema).optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)])
            .optional()
            .nullable(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z
    .object({
        equals: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        path: z.string().array().optional(),
        string_contains: z.string().optional(),
        string_starts_with: z.string().optional(),
        string_ends_with: z.string().optional(),
        array_contains: InputJsonValue.optional().nullable(),
        array_starts_with: InputJsonValue.optional().nullable(),
        array_ends_with: InputJsonValue.optional().nullable(),
        lt: InputJsonValue.optional(),
        lte: InputJsonValue.optional(),
        gt: InputJsonValue.optional(),
        gte: InputJsonValue.optional(),
        not: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedJsonFilterSchema).optional(),
        _max: z.lazy(() => NestedJsonFilterSchema).optional()
    })
    .strict()

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z
    .object({
        equals: z.number().optional().nullable(),
        in: z.number().array().optional().nullable(),
        notIn: z.number().array().optional().nullable(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z
            .union([z.number(), z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)])
            .optional()
            .nullable(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
        _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const PermissionsRelationFilterSchema: z.ZodType<Prisma.PermissionsRelationFilter> = z
    .object({
        is: z.lazy(() => PermissionsWhereInputSchema).optional(),
        isNot: z.lazy(() => PermissionsWhereInputSchema).optional()
    })
    .strict()

export const Model_has_permissionsPermission_idModel_uuidModel_typeCompoundUniqueInputSchema: z.ZodType<Prisma.Model_has_permissionsPermission_idModel_uuidModel_typeCompoundUniqueInput> =
    z
        .object({
            permission_id: z.string(),
            model_uuid: z.string(),
            model_type: z.string()
        })
        .strict()

export const Model_has_permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Model_has_permissionsCountOrderByAggregateInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Model_has_permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Model_has_permissionsMaxOrderByAggregateInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Model_has_permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Model_has_permissionsMinOrderByAggregateInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const RolesRelationFilterSchema: z.ZodType<Prisma.RolesRelationFilter> = z
    .object({
        is: z.lazy(() => RolesWhereInputSchema).optional(),
        isNot: z.lazy(() => RolesWhereInputSchema).optional()
    })
    .strict()

export const Model_has_rolesRole_idModel_uuidModel_typeCompoundUniqueInputSchema: z.ZodType<Prisma.Model_has_rolesRole_idModel_uuidModel_typeCompoundUniqueInput> =
    z
        .object({
            role_id: z.string(),
            model_uuid: z.string(),
            model_type: z.string()
        })
        .strict()

export const Model_has_rolesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Model_has_rolesCountOrderByAggregateInput> =
    z
        .object({
            role_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Model_has_rolesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Model_has_rolesMaxOrderByAggregateInput> =
    z
        .object({
            role_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Model_has_rolesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Model_has_rolesMinOrderByAggregateInput> =
    z
        .object({
            role_id: z.lazy(() => SortOrderSchema).optional(),
            model_type: z.lazy(() => SortOrderSchema).optional(),
            model_uuid: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Enumorphan_sponsorship_typeFilterSchema: z.ZodType<Prisma.Enumorphan_sponsorship_typeFilter> = z
    .object({
        equals: z.lazy(() => orphan_sponsorship_typeSchema).optional(),
        in: z
            .lazy(() => orphan_sponsorship_typeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => orphan_sponsorship_typeSchema)
            .array()
            .optional(),
        not: z
            .union([
                z.lazy(() => orphan_sponsorship_typeSchema),
                z.lazy(() => NestedEnumorphan_sponsorship_typeFilterSchema)
            ])
            .optional()
    })
    .strict()

export const OrphansRelationFilterSchema: z.ZodType<Prisma.OrphansRelationFilter> = z
    .object({
        is: z.lazy(() => OrphansWhereInputSchema).optional(),
        isNot: z.lazy(() => OrphansWhereInputSchema).optional()
    })
    .strict()

export const Orphan_sponsorshipCountOrderByAggregateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            orphan_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipMaxOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            orphan_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipMinOrderByAggregateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipMinOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            orphan_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Enumorphan_sponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumorphan_sponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => orphan_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => orphan_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => orphan_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumorphan_sponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumorphan_sponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumorphan_sponsorship_typeFilterSchema).optional()
        })
        .strict()

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z
    .object({
        equals: z.coerce.date().optional(),
        in: z.coerce.date().array().optional(),
        notIn: z.coerce.date().array().optional(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)]).optional()
    })
    .strict()

export const Orphan_sponsorshipListRelationFilterSchema: z.ZodType<Prisma.Orphan_sponsorshipListRelationFilter> = z
    .object({
        every: z.lazy(() => Orphan_sponsorshipWhereInputSchema).optional(),
        some: z.lazy(() => Orphan_sponsorshipWhereInputSchema).optional(),
        none: z.lazy(() => Orphan_sponsorshipWhereInputSchema).optional()
    })
    .strict()

export const UsersRelationFilterSchema: z.ZodType<Prisma.UsersRelationFilter> = z
    .object({
        is: z.lazy(() => UsersWhereInputSchema).optional(),
        isNot: z.lazy(() => UsersWhereInputSchema).optional()
    })
    .strict()

export const Orphan_sponsorshipOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Orphan_sponsorshipOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const OrphansCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrphansCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        family_status: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        shoes_size: z.lazy(() => SortOrderSchema).optional(),
        pants_size: z.lazy(() => SortOrderSchema).optional(),
        shirt_size: z.lazy(() => SortOrderSchema).optional(),
        note: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const OrphansMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrphansMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        family_status: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        shoes_size: z.lazy(() => SortOrderSchema).optional(),
        pants_size: z.lazy(() => SortOrderSchema).optional(),
        shirt_size: z.lazy(() => SortOrderSchema).optional(),
        note: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const OrphansMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrphansMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        family_status: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        shoes_size: z.lazy(() => SortOrderSchema).optional(),
        pants_size: z.lazy(() => SortOrderSchema).optional(),
        shirt_size: z.lazy(() => SortOrderSchema).optional(),
        note: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z
    .object({
        equals: z.coerce.date().optional(),
        in: z.coerce.date().array().optional(),
        notIn: z.coerce.date().array().optional(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
        _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const Password_reset_tokensCountOrderByAggregateInputSchema: z.ZodType<Prisma.Password_reset_tokensCountOrderByAggregateInput> =
    z
        .object({
            email: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Password_reset_tokensMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Password_reset_tokensMaxOrderByAggregateInput> =
    z
        .object({
            email: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Password_reset_tokensMinOrderByAggregateInputSchema: z.ZodType<Prisma.Password_reset_tokensMinOrderByAggregateInput> =
    z
        .object({
            email: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Model_has_permissionsListRelationFilterSchema: z.ZodType<Prisma.Model_has_permissionsListRelationFilter> =
    z
        .object({
            every: z.lazy(() => Model_has_permissionsWhereInputSchema).optional(),
            some: z.lazy(() => Model_has_permissionsWhereInputSchema).optional(),
            none: z.lazy(() => Model_has_permissionsWhereInputSchema).optional()
        })
        .strict()

export const Role_has_permissionsListRelationFilterSchema: z.ZodType<Prisma.Role_has_permissionsListRelationFilter> = z
    .object({
        every: z.lazy(() => Role_has_permissionsWhereInputSchema).optional(),
        some: z.lazy(() => Role_has_permissionsWhereInputSchema).optional(),
        none: z.lazy(() => Role_has_permissionsWhereInputSchema).optional()
    })
    .strict()

export const Model_has_permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Model_has_permissionsOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Role_has_permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Role_has_permissionsOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const PermissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionsCountOrderByAggregateInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const PermissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionsMaxOrderByAggregateInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const PermissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionsMinOrderByAggregateInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Personal_access_tokensCountOrderByAggregateInputSchema: z.ZodType<Prisma.Personal_access_tokensCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            tokenable_type: z.lazy(() => SortOrderSchema).optional(),
            tokenable_id: z.lazy(() => SortOrderSchema).optional(),
            name: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            abilities: z.lazy(() => SortOrderSchema).optional(),
            last_used_at: z.lazy(() => SortOrderSchema).optional(),
            expires_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Personal_access_tokensMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Personal_access_tokensMaxOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            tokenable_type: z.lazy(() => SortOrderSchema).optional(),
            tokenable_id: z.lazy(() => SortOrderSchema).optional(),
            name: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            abilities: z.lazy(() => SortOrderSchema).optional(),
            last_used_at: z.lazy(() => SortOrderSchema).optional(),
            expires_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Personal_access_tokensMinOrderByAggregateInputSchema: z.ZodType<Prisma.Personal_access_tokensMinOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            tokenable_type: z.lazy(() => SortOrderSchema).optional(),
            tokenable_id: z.lazy(() => SortOrderSchema).optional(),
            name: z.lazy(() => SortOrderSchema).optional(),
            token: z.lazy(() => SortOrderSchema).optional(),
            abilities: z.lazy(() => SortOrderSchema).optional(),
            last_used_at: z.lazy(() => SortOrderSchema).optional(),
            expires_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Role_has_permissionsPermission_idRole_idCompoundUniqueInputSchema: z.ZodType<Prisma.Role_has_permissionsPermission_idRole_idCompoundUniqueInput> =
    z
        .object({
            permission_id: z.string(),
            role_id: z.string()
        })
        .strict()

export const Role_has_permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Role_has_permissionsCountOrderByAggregateInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            role_id: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Role_has_permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Role_has_permissionsMaxOrderByAggregateInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            role_id: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Role_has_permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Role_has_permissionsMinOrderByAggregateInput> =
    z
        .object({
            permission_id: z.lazy(() => SortOrderSchema).optional(),
            role_id: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Model_has_rolesListRelationFilterSchema: z.ZodType<Prisma.Model_has_rolesListRelationFilter> = z
    .object({
        every: z.lazy(() => Model_has_rolesWhereInputSchema).optional(),
        some: z.lazy(() => Model_has_rolesWhereInputSchema).optional(),
        none: z.lazy(() => Model_has_rolesWhereInputSchema).optional()
    })
    .strict()

export const Model_has_rolesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Model_has_rolesOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const RolesCountOrderByAggregateInputSchema: z.ZodType<Prisma.RolesCountOrderByAggregateInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const RolesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RolesMaxOrderByAggregateInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const RolesMinOrderByAggregateInputSchema: z.ZodType<Prisma.RolesMinOrderByAggregateInput> = z
    .object({
        uuid: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        guard_name: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Second_sponsorsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Second_sponsorsCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            first_name: z.lazy(() => SortOrderSchema).optional(),
            last_name: z.lazy(() => SortOrderSchema).optional(),
            degree_of_kinship: z.lazy(() => SortOrderSchema).optional(),
            phone_number: z.lazy(() => SortOrderSchema).optional(),
            address: z.lazy(() => SortOrderSchema).optional(),
            income: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            deleted_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Second_sponsorsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Second_sponsorsAvgOrderByAggregateInput> =
    z
        .object({
            income: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Second_sponsorsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Second_sponsorsMaxOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            first_name: z.lazy(() => SortOrderSchema).optional(),
            last_name: z.lazy(() => SortOrderSchema).optional(),
            degree_of_kinship: z.lazy(() => SortOrderSchema).optional(),
            phone_number: z.lazy(() => SortOrderSchema).optional(),
            address: z.lazy(() => SortOrderSchema).optional(),
            income: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            deleted_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Second_sponsorsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Second_sponsorsMinOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            first_name: z.lazy(() => SortOrderSchema).optional(),
            last_name: z.lazy(() => SortOrderSchema).optional(),
            degree_of_kinship: z.lazy(() => SortOrderSchema).optional(),
            phone_number: z.lazy(() => SortOrderSchema).optional(),
            address: z.lazy(() => SortOrderSchema).optional(),
            income: z.lazy(() => SortOrderSchema).optional(),
            family_id: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            deleted_at: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Second_sponsorsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Second_sponsorsSumOrderByAggregateInput> =
    z
        .object({
            income: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const SessionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        ip_address: z.lazy(() => SortOrderSchema).optional(),
        user_agent: z.lazy(() => SortOrderSchema).optional(),
        payload: z.lazy(() => SortOrderSchema).optional(),
        last_activity: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SessionsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsAvgOrderByAggregateInput> = z
    .object({
        last_activity: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SessionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        ip_address: z.lazy(() => SortOrderSchema).optional(),
        user_agent: z.lazy(() => SortOrderSchema).optional(),
        payload: z.lazy(() => SortOrderSchema).optional(),
        last_activity: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SessionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        ip_address: z.lazy(() => SortOrderSchema).optional(),
        user_agent: z.lazy(() => SortOrderSchema).optional(),
        payload: z.lazy(() => SortOrderSchema).optional(),
        last_activity: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SessionsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsSumOrderByAggregateInput> = z
    .object({
        last_activity: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumthemeFilterSchema: z.ZodType<Prisma.EnumthemeFilter> = z
    .object({
        equals: z.lazy(() => themeSchema).optional(),
        in: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => themeSchema), z.lazy(() => NestedEnumthemeFilterSchema)]).optional()
    })
    .strict()

export const Enumcolor_schemeFilterSchema: z.ZodType<Prisma.Enumcolor_schemeFilter> = z
    .object({
        equals: z.lazy(() => color_schemeSchema).optional(),
        in: z
            .lazy(() => color_schemeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => color_schemeSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => color_schemeSchema), z.lazy(() => NestedEnumcolor_schemeFilterSchema)]).optional()
    })
    .strict()

export const EnumlayoutFilterSchema: z.ZodType<Prisma.EnumlayoutFilter> = z
    .object({
        equals: z.lazy(() => layoutSchema).optional(),
        in: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => layoutSchema), z.lazy(() => NestedEnumlayoutFilterSchema)]).optional()
    })
    .strict()

export const EnumappearanceFilterSchema: z.ZodType<Prisma.EnumappearanceFilter> = z
    .object({
        equals: z.lazy(() => appearanceSchema).optional(),
        in: z
            .lazy(() => appearanceSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => appearanceSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => appearanceSchema), z.lazy(() => NestedEnumappearanceFilterSchema)]).optional()
    })
    .strict()

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z
    .object({
        equals: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        path: z.string().array().optional(),
        string_contains: z.string().optional(),
        string_starts_with: z.string().optional(),
        string_ends_with: z.string().optional(),
        array_contains: InputJsonValue.optional().nullable(),
        array_starts_with: InputJsonValue.optional().nullable(),
        array_ends_with: InputJsonValue.optional().nullable(),
        lt: InputJsonValue.optional(),
        lte: InputJsonValue.optional(),
        gt: InputJsonValue.optional(),
        gte: InputJsonValue.optional(),
        not: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional()
    })
    .strict()

export const SettingsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SettingsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        theme: z.lazy(() => SortOrderSchema).optional(),
        color_scheme: z.lazy(() => SortOrderSchema).optional(),
        layout: z.lazy(() => SortOrderSchema).optional(),
        appearance: z.lazy(() => SortOrderSchema).optional(),
        notifications: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SettingsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SettingsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        theme: z.lazy(() => SortOrderSchema).optional(),
        color_scheme: z.lazy(() => SortOrderSchema).optional(),
        layout: z.lazy(() => SortOrderSchema).optional(),
        appearance: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SettingsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SettingsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        user_id: z.lazy(() => SortOrderSchema).optional(),
        theme: z.lazy(() => SortOrderSchema).optional(),
        color_scheme: z.lazy(() => SortOrderSchema).optional(),
        layout: z.lazy(() => SortOrderSchema).optional(),
        appearance: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const EnumthemeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumthemeWithAggregatesFilter> = z
    .object({
        equals: z.lazy(() => themeSchema).optional(),
        in: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => themeSchema), z.lazy(() => NestedEnumthemeWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedEnumthemeFilterSchema).optional(),
        _max: z.lazy(() => NestedEnumthemeFilterSchema).optional()
    })
    .strict()

export const Enumcolor_schemeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumcolor_schemeWithAggregatesFilter> = z
    .object({
        equals: z.lazy(() => color_schemeSchema).optional(),
        in: z
            .lazy(() => color_schemeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => color_schemeSchema)
            .array()
            .optional(),
        not: z
            .union([z.lazy(() => color_schemeSchema), z.lazy(() => NestedEnumcolor_schemeWithAggregatesFilterSchema)])
            .optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedEnumcolor_schemeFilterSchema).optional(),
        _max: z.lazy(() => NestedEnumcolor_schemeFilterSchema).optional()
    })
    .strict()

export const EnumlayoutWithAggregatesFilterSchema: z.ZodType<Prisma.EnumlayoutWithAggregatesFilter> = z
    .object({
        equals: z.lazy(() => layoutSchema).optional(),
        in: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => layoutSchema), z.lazy(() => NestedEnumlayoutWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedEnumlayoutFilterSchema).optional(),
        _max: z.lazy(() => NestedEnumlayoutFilterSchema).optional()
    })
    .strict()

export const EnumappearanceWithAggregatesFilterSchema: z.ZodType<Prisma.EnumappearanceWithAggregatesFilter> = z
    .object({
        equals: z.lazy(() => appearanceSchema).optional(),
        in: z
            .lazy(() => appearanceSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => appearanceSchema)
            .array()
            .optional(),
        not: z
            .union([z.lazy(() => appearanceSchema), z.lazy(() => NestedEnumappearanceWithAggregatesFilterSchema)])
            .optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedEnumappearanceFilterSchema).optional(),
        _max: z.lazy(() => NestedEnumappearanceFilterSchema).optional()
    })
    .strict()

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z
    .object({
        equals: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        path: z.string().array().optional(),
        string_contains: z.string().optional(),
        string_starts_with: z.string().optional(),
        string_ends_with: z.string().optional(),
        array_contains: InputJsonValue.optional().nullable(),
        array_starts_with: InputJsonValue.optional().nullable(),
        array_ends_with: InputJsonValue.optional().nullable(),
        lt: InputJsonValue.optional(),
        lte: InputJsonValue.optional(),
        gt: InputJsonValue.optional(),
        gte: InputJsonValue.optional(),
        not: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
    })
    .strict()

export const Enumsponsor_sponsorship_typeFilterSchema: z.ZodType<Prisma.Enumsponsor_sponsorship_typeFilter> = z
    .object({
        equals: z.lazy(() => sponsor_sponsorship_typeSchema).optional(),
        in: z
            .lazy(() => sponsor_sponsorship_typeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => sponsor_sponsorship_typeSchema)
            .array()
            .optional(),
        not: z
            .union([
                z.lazy(() => sponsor_sponsorship_typeSchema),
                z.lazy(() => NestedEnumsponsor_sponsorship_typeFilterSchema)
            ])
            .optional()
    })
    .strict()

export const Sponsor_sponsorshipCountOrderByAggregateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCountOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipMaxOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipMinOrderByAggregateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipMinOrderByAggregateInput> =
    z
        .object({
            id: z.lazy(() => SortOrderSchema).optional(),
            sponsor_id: z.lazy(() => SortOrderSchema).optional(),
            type: z.lazy(() => SortOrderSchema).optional(),
            value: z.lazy(() => SortOrderSchema).optional(),
            tenant_id: z.lazy(() => SortOrderSchema).optional(),
            created_at: z.lazy(() => SortOrderSchema).optional(),
            updated_at: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const Enumsponsor_sponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumsponsor_sponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => sponsor_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => sponsor_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => sponsor_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumsponsor_sponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumsponsor_sponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumsponsor_sponsorship_typeFilterSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipListRelationFilterSchema: z.ZodType<Prisma.Sponsor_sponsorshipListRelationFilter> = z
    .object({
        every: z.lazy(() => Sponsor_sponsorshipWhereInputSchema).optional(),
        some: z.lazy(() => Sponsor_sponsorshipWhereInputSchema).optional(),
        none: z.lazy(() => Sponsor_sponsorshipWhereInputSchema).optional()
    })
    .strict()

export const Sponsor_sponsorshipOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const SponsorsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        zone_id: z.lazy(() => SortOrderSchema).optional(),
        file_number: z.lazy(() => SortOrderSchema).optional(),
        start_date: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        address: z.lazy(() => SortOrderSchema).optional(),
        phone_number: z.lazy(() => SortOrderSchema).optional(),
        sponsorship_type: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        father_name: z.lazy(() => SortOrderSchema).optional(),
        mother_name: z.lazy(() => SortOrderSchema).optional(),
        birth_certificate_number: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        diploma: z.lazy(() => SortOrderSchema).optional(),
        card_number: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorsAvgOrderByAggregateInput> = z
    .object({
        file_number: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        zone_id: z.lazy(() => SortOrderSchema).optional(),
        file_number: z.lazy(() => SortOrderSchema).optional(),
        start_date: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        address: z.lazy(() => SortOrderSchema).optional(),
        phone_number: z.lazy(() => SortOrderSchema).optional(),
        sponsorship_type: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        father_name: z.lazy(() => SortOrderSchema).optional(),
        mother_name: z.lazy(() => SortOrderSchema).optional(),
        birth_certificate_number: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        diploma: z.lazy(() => SortOrderSchema).optional(),
        card_number: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        zone_id: z.lazy(() => SortOrderSchema).optional(),
        file_number: z.lazy(() => SortOrderSchema).optional(),
        start_date: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        address: z.lazy(() => SortOrderSchema).optional(),
        phone_number: z.lazy(() => SortOrderSchema).optional(),
        sponsorship_type: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        father_name: z.lazy(() => SortOrderSchema).optional(),
        mother_name: z.lazy(() => SortOrderSchema).optional(),
        birth_certificate_number: z.lazy(() => SortOrderSchema).optional(),
        academic_level: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        health_status: z.lazy(() => SortOrderSchema).optional(),
        diploma: z.lazy(() => SortOrderSchema).optional(),
        card_number: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_by: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorsSumOrderByAggregateInput> = z
    .object({
        file_number: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Enumsponsorship_typeFilterSchema: z.ZodType<Prisma.Enumsponsorship_typeFilter> = z
    .object({
        equals: z.lazy(() => sponsorship_typeSchema).optional(),
        in: z
            .lazy(() => sponsorship_typeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => sponsorship_typeSchema)
            .array()
            .optional(),
        not: z
            .union([z.lazy(() => sponsorship_typeSchema), z.lazy(() => NestedEnumsponsorship_typeFilterSchema)])
            .optional()
    })
    .strict()

export const SponsorshipsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorshipsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        type: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorshipsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorshipsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        type: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorshipsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SponsorshipsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        type: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        deleted_at: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const Enumsponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumsponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => sponsorship_typeSchema),
                    z.lazy(() => NestedEnumsponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumsponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumsponsorship_typeFilterSchema).optional()
        })
        .strict()

export const SpousesCountOrderByAggregateInputSchema: z.ZodType<Prisma.SpousesCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        death_date: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        income: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SpousesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SpousesAvgOrderByAggregateInput> = z
    .object({
        income: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SpousesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SpousesMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        death_date: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        income: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SpousesMinOrderByAggregateInputSchema: z.ZodType<Prisma.SpousesMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        birth_date: z.lazy(() => SortOrderSchema).optional(),
        death_date: z.lazy(() => SortOrderSchema).optional(),
        function: z.lazy(() => SortOrderSchema).optional(),
        income: z.lazy(() => SortOrderSchema).optional(),
        family_id: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SpousesSumOrderByAggregateInputSchema: z.ZodType<Prisma.SpousesSumOrderByAggregateInput> = z
    .object({
        income: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const BenefactorsListRelationFilterSchema: z.ZodType<Prisma.BenefactorsListRelationFilter> = z
    .object({
        every: z.lazy(() => BenefactorsWhereInputSchema).optional(),
        some: z.lazy(() => BenefactorsWhereInputSchema).optional(),
        none: z.lazy(() => BenefactorsWhereInputSchema).optional()
    })
    .strict()

export const DomainsListRelationFilterSchema: z.ZodType<Prisma.DomainsListRelationFilter> = z
    .object({
        every: z.lazy(() => DomainsWhereInputSchema).optional(),
        some: z.lazy(() => DomainsWhereInputSchema).optional(),
        none: z.lazy(() => DomainsWhereInputSchema).optional()
    })
    .strict()

export const FamiliesListRelationFilterSchema: z.ZodType<Prisma.FamiliesListRelationFilter> = z
    .object({
        every: z.lazy(() => FamiliesWhereInputSchema).optional(),
        some: z.lazy(() => FamiliesWhereInputSchema).optional(),
        none: z.lazy(() => FamiliesWhereInputSchema).optional()
    })
    .strict()

export const SponsorsListRelationFilterSchema: z.ZodType<Prisma.SponsorsListRelationFilter> = z
    .object({
        every: z.lazy(() => SponsorsWhereInputSchema).optional(),
        some: z.lazy(() => SponsorsWhereInputSchema).optional(),
        none: z.lazy(() => SponsorsWhereInputSchema).optional()
    })
    .strict()

export const SponsorshipsListRelationFilterSchema: z.ZodType<Prisma.SponsorshipsListRelationFilter> = z
    .object({
        every: z.lazy(() => SponsorshipsWhereInputSchema).optional(),
        some: z.lazy(() => SponsorshipsWhereInputSchema).optional(),
        none: z.lazy(() => SponsorshipsWhereInputSchema).optional()
    })
    .strict()

export const UsersListRelationFilterSchema: z.ZodType<Prisma.UsersListRelationFilter> = z
    .object({
        every: z.lazy(() => UsersWhereInputSchema).optional(),
        some: z.lazy(() => UsersWhereInputSchema).optional(),
        none: z.lazy(() => UsersWhereInputSchema).optional()
    })
    .strict()

export const BenefactorsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BenefactorsOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const DomainsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DomainsOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const FamiliesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FamiliesOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SponsorsOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SponsorshipsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SponsorshipsOrderByRelationAggregateInput> =
    z
        .object({
            _count: z.lazy(() => SortOrderSchema).optional()
        })
        .strict()

export const UsersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UsersOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantsCountOrderByAggregateInputSchema: z.ZodType<Prisma.TenantsCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        data: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TenantsMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantsMinOrderByAggregateInputSchema: z.ZodType<Prisma.TenantsMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SessionsListRelationFilterSchema: z.ZodType<Prisma.SessionsListRelationFilter> = z
    .object({
        every: z.lazy(() => SessionsWhereInputSchema).optional(),
        some: z.lazy(() => SessionsWhereInputSchema).optional(),
        none: z.lazy(() => SessionsWhereInputSchema).optional()
    })
    .strict()

export const SettingsListRelationFilterSchema: z.ZodType<Prisma.SettingsListRelationFilter> = z
    .object({
        every: z.lazy(() => SettingsWhereInputSchema).optional(),
        some: z.lazy(() => SettingsWhereInputSchema).optional(),
        none: z.lazy(() => SettingsWhereInputSchema).optional()
    })
    .strict()

export const SessionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionsOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const SettingsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SettingsOrderByRelationAggregateInput> = z
    .object({
        _count: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UsersCountOrderByAggregateInputSchema: z.ZodType<Prisma.UsersCountOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        phone: z.lazy(() => SortOrderSchema).optional(),
        email: z.lazy(() => SortOrderSchema).optional(),
        email_verified_at: z.lazy(() => SortOrderSchema).optional(),
        password: z.lazy(() => SortOrderSchema).optional(),
        remember_token: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UsersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        phone: z.lazy(() => SortOrderSchema).optional(),
        email: z.lazy(() => SortOrderSchema).optional(),
        email_verified_at: z.lazy(() => SortOrderSchema).optional(),
        password: z.lazy(() => SortOrderSchema).optional(),
        remember_token: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const UsersMinOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMinOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        first_name: z.lazy(() => SortOrderSchema).optional(),
        last_name: z.lazy(() => SortOrderSchema).optional(),
        phone: z.lazy(() => SortOrderSchema).optional(),
        email: z.lazy(() => SortOrderSchema).optional(),
        email_verified_at: z.lazy(() => SortOrderSchema).optional(),
        password: z.lazy(() => SortOrderSchema).optional(),
        remember_token: z.lazy(() => SortOrderSchema).optional(),
        tenant_id: z.lazy(() => SortOrderSchema).optional(),
        created_at: z.lazy(() => SortOrderSchema).optional(),
        updated_at: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export const TenantsCreateNestedOneWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutBenefactorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutBenefactorsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutBenefactorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutBenefactorsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z
    .object({
        set: z.string().optional()
    })
    .strict()

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> =
    z
        .object({
            set: z.coerce.date().optional().nullable()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutBenefactorsNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutBenefactorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutBenefactorsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutBenefactorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutBenefactorsInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutBenefactorsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutBenefactorsInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutBenefactorsInputSchema)
                ])
                .optional()
        })
        .strict()

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z
    .object({
        set: z.number().optional(),
        increment: z.number().optional(),
        decrement: z.number().optional(),
        multiply: z.number().optional(),
        divide: z.number().optional()
    })
    .strict()

export const TenantsCreateNestedOneWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutDomainsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutDomainsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutDomainsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutDomainsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutDomainsNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutDomainsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutDomainsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutDomainsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutDomainsInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutDomainsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutDomainsInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutDomainsInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutFamiliesInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutFamiliesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutFamiliesInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Family_furnishingCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUncheckedCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUncheckedCreateNestedManyWithoutFamiliesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyFamiliesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutFamiliesInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutFamiliesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutFamiliesInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutFamiliesInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutFamiliesInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutFamiliesInputSchema)
                ])
                .optional()
        })
        .strict()

export const Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Family_furnishingUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_furnishingScalarWhereInputSchema),
                    z.lazy(() => Family_furnishingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Family_housingUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_housingScalarWhereInputSchema),
                    z.lazy(() => Family_housingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema),
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.SpousesUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SpousesScalarWhereInputSchema),
                    z.lazy(() => SpousesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_furnishingScalarWhereInputSchema),
                    z.lazy(() => Family_furnishingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_housingScalarWhereInputSchema),
                    z.lazy(() => Family_housingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema),
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateManyWithoutFamiliesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateWithoutFamiliesInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyFamiliesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutFamiliesInputSchema),
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutFamiliesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SpousesScalarWhereInputSchema),
                    z.lazy(() => SpousesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const FamiliesCreateNestedOneWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesCreateNestedOneWithoutFamily_furnishingInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutFamily_furnishingInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutFamily_furnishingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutFamily_furnishingInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional()
        })
        .strict()

export const FurnishingsCreateNestedOneWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsCreateNestedOneWithoutFamily_furnishingInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FurnishingsCreateWithoutFamily_furnishingInputSchema),
                    z.lazy(() => FurnishingsUncheckedCreateWithoutFamily_furnishingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FurnishingsCreateOrConnectWithoutFamily_furnishingInputSchema).optional(),
            connect: z.lazy(() => FurnishingsWhereUniqueInputSchema).optional()
        })
        .strict()

export const FamiliesUpdateOneRequiredWithoutFamily_furnishingNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateOneRequiredWithoutFamily_furnishingNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutFamily_furnishingInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutFamily_furnishingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutFamily_furnishingInputSchema).optional(),
            upsert: z.lazy(() => FamiliesUpsertWithoutFamily_furnishingInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithoutFamily_furnishingInputSchema),
                    z.lazy(() => FamiliesUncheckedUpdateWithoutFamily_furnishingInputSchema)
                ])
                .optional()
        })
        .strict()

export const FurnishingsUpdateOneRequiredWithoutFamily_furnishingNestedInputSchema: z.ZodType<Prisma.FurnishingsUpdateOneRequiredWithoutFamily_furnishingNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FurnishingsCreateWithoutFamily_furnishingInputSchema),
                    z.lazy(() => FurnishingsUncheckedCreateWithoutFamily_furnishingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FurnishingsCreateOrConnectWithoutFamily_furnishingInputSchema).optional(),
            upsert: z.lazy(() => FurnishingsUpsertWithoutFamily_furnishingInputSchema).optional(),
            connect: z.lazy(() => FurnishingsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FurnishingsUpdateWithoutFamily_furnishingInputSchema),
                    z.lazy(() => FurnishingsUncheckedUpdateWithoutFamily_furnishingInputSchema)
                ])
                .optional()
        })
        .strict()

export const FamiliesCreateNestedOneWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesCreateNestedOneWithoutFamily_housingInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutFamily_housingInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutFamily_housingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutFamily_housingInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional()
        })
        .strict()

export const HousingsCreateNestedOneWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsCreateNestedOneWithoutFamily_housingInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => HousingsCreateWithoutFamily_housingInputSchema),
                    z.lazy(() => HousingsUncheckedCreateWithoutFamily_housingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => HousingsCreateOrConnectWithoutFamily_housingInputSchema).optional(),
            connect: z.lazy(() => HousingsWhereUniqueInputSchema).optional()
        })
        .strict()

export const FamiliesUpdateOneRequiredWithoutFamily_housingNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateOneRequiredWithoutFamily_housingNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutFamily_housingInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutFamily_housingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutFamily_housingInputSchema).optional(),
            upsert: z.lazy(() => FamiliesUpsertWithoutFamily_housingInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithoutFamily_housingInputSchema),
                    z.lazy(() => FamiliesUncheckedUpdateWithoutFamily_housingInputSchema)
                ])
                .optional()
        })
        .strict()

export const HousingsUpdateOneRequiredWithoutFamily_housingNestedInputSchema: z.ZodType<Prisma.HousingsUpdateOneRequiredWithoutFamily_housingNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => HousingsCreateWithoutFamily_housingInputSchema),
                    z.lazy(() => HousingsUncheckedCreateWithoutFamily_housingInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => HousingsCreateOrConnectWithoutFamily_housingInputSchema).optional(),
            upsert: z.lazy(() => HousingsUpsertWithoutFamily_housingInputSchema).optional(),
            connect: z.lazy(() => HousingsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => HousingsUpdateWithoutFamily_housingInputSchema),
                    z.lazy(() => HousingsUncheckedUpdateWithoutFamily_housingInputSchema)
                ])
                .optional()
        })
        .strict()

export const FamiliesCreateNestedOneWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesCreateNestedOneWithoutFamily_sponsorshipInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutFamily_sponsorshipInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutFamily_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutFamily_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutFamily_sponsorshipInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutFamily_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutFamily_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutFamily_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumfamily_sponsorship_typeFieldUpdateOperationsInput> =
    z
        .object({
            set: z.lazy(() => family_sponsorship_typeSchema).optional()
        })
        .strict()

export const FamiliesUpdateOneRequiredWithoutFamily_sponsorshipNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateOneRequiredWithoutFamily_sponsorshipNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutFamily_sponsorshipInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutFamily_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutFamily_sponsorshipInputSchema).optional(),
            upsert: z.lazy(() => FamiliesUpsertWithoutFamily_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithoutFamily_sponsorshipInputSchema),
                    z.lazy(() => FamiliesUncheckedUpdateWithoutFamily_sponsorshipInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutFamily_sponsorshipNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutFamily_sponsorshipNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutFamily_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutFamily_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutFamily_sponsorshipInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutFamily_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutFamily_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutFamily_sponsorshipInputSchema)
                ])
                .optional()
        })
        .strict()

export const Family_furnishingCreateNestedManyWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingCreateNestedManyWithoutFurnishingsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFurnishingsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_furnishingUncheckedCreateNestedManyWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedCreateNestedManyWithoutFurnishingsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFurnishingsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_furnishingUpdateManyWithoutFurnishingsNestedInputSchema: z.ZodType<Prisma.Family_furnishingUpdateManyWithoutFurnishingsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFurnishingsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_furnishingScalarWhereInputSchema),
                    z.lazy(() => Family_furnishingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_furnishingUncheckedUpdateManyWithoutFurnishingsNestedInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateManyWithoutFurnishingsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema).array(),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUpsertWithWhereUniqueWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_furnishingCreateManyFurnishingsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema),
                    z.lazy(() => Family_furnishingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUpdateWithWhereUniqueWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFurnishingsInputSchema),
                    z.lazy(() => Family_furnishingUpdateManyWithWhereWithoutFurnishingsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_furnishingScalarWhereInputSchema),
                    z.lazy(() => Family_furnishingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingCreateNestedManyWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingCreateNestedManyWithoutHousingsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyHousingsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingUncheckedCreateNestedManyWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUncheckedCreateNestedManyWithoutHousingsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyHousingsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingUpdateManyWithoutHousingsNestedInputSchema: z.ZodType<Prisma.Family_housingUpdateManyWithoutHousingsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutHousingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyHousingsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutHousingsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutHousingsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_housingScalarWhereInputSchema),
                    z.lazy(() => Family_housingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_housingUncheckedUpdateManyWithoutHousingsNestedInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateManyWithoutHousingsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateWithoutHousingsInputSchema).array(),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingCreateOrConnectWithoutHousingsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUpsertWithWhereUniqueWithoutHousingsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_housingCreateManyHousingsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_housingWhereUniqueInputSchema),
                    z.lazy(() => Family_housingWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUpdateWithWhereUniqueWithoutHousingsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutHousingsInputSchema),
                    z.lazy(() => Family_housingUpdateManyWithWhereWithoutHousingsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_housingScalarWhereInputSchema),
                    z.lazy(() => Family_housingScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const IncomesCreateNestedOneWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesCreateNestedOneWithoutIncome_sponsorInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => IncomesCreateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => IncomesUncheckedCreateWithoutIncome_sponsorInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => IncomesCreateOrConnectWithoutIncome_sponsorInputSchema).optional(),
            connect: z.lazy(() => IncomesWhereUniqueInputSchema).optional()
        })
        .strict()

export const SponsorsCreateNestedOneWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsCreateNestedOneWithoutIncome_sponsorInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutIncome_sponsorInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => SponsorsCreateOrConnectWithoutIncome_sponsorInputSchema).optional(),
            connect: z.lazy(() => SponsorsWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutIncome_sponsorInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutIncome_sponsorInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutIncome_sponsorInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z
    .object({
        set: z.number().optional(),
        increment: z.number().optional(),
        decrement: z.number().optional(),
        multiply: z.number().optional(),
        divide: z.number().optional()
    })
    .strict()

export const IncomesUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema: z.ZodType<Prisma.IncomesUpdateOneRequiredWithoutIncome_sponsorNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => IncomesCreateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => IncomesUncheckedCreateWithoutIncome_sponsorInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => IncomesCreateOrConnectWithoutIncome_sponsorInputSchema).optional(),
            upsert: z.lazy(() => IncomesUpsertWithoutIncome_sponsorInputSchema).optional(),
            connect: z.lazy(() => IncomesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => IncomesUpdateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => IncomesUncheckedUpdateWithoutIncome_sponsorInputSchema)
                ])
                .optional()
        })
        .strict()

export const SponsorsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema: z.ZodType<Prisma.SponsorsUpdateOneRequiredWithoutIncome_sponsorNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutIncome_sponsorInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => SponsorsCreateOrConnectWithoutIncome_sponsorInputSchema).optional(),
            upsert: z.lazy(() => SponsorsUpsertWithoutIncome_sponsorInputSchema).optional(),
            connect: z.lazy(() => SponsorsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => SponsorsUncheckedUpdateWithoutIncome_sponsorInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutIncome_sponsorNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutIncome_sponsorInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutIncome_sponsorInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutIncome_sponsorInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutIncome_sponsorInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutIncome_sponsorInputSchema)
                ])
                .optional()
        })
        .strict()

export const Income_sponsorCreateNestedManyWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorCreateNestedManyWithoutIncomesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyIncomesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUncheckedCreateNestedManyWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateNestedManyWithoutIncomesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyIncomesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUpdateManyWithoutIncomesNestedInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyWithoutIncomesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutIncomesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyIncomesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutIncomesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutIncomesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUncheckedUpdateManyWithoutIncomesNestedInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateManyWithoutIncomesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutIncomesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutIncomesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyIncomesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutIncomesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutIncomesInputSchema),
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutIncomesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const BigIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BigIntFieldUpdateOperationsInput> = z
    .object({
        set: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        increment: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        decrement: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        multiply: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        divide: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional()
    })
    .strict()

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> =
    z
        .object({
            set: z.string().optional().nullable()
        })
        .strict()

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z
    .object({
        set: z.number().optional().nullable(),
        increment: z.number().optional(),
        decrement: z.number().optional(),
        multiply: z.number().optional(),
        divide: z.number().optional()
    })
    .strict()

export const PermissionsCreateNestedOneWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateNestedOneWithoutModel_has_permissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => PermissionsCreateWithoutModel_has_permissionsInputSchema),
                    z.lazy(() => PermissionsUncheckedCreateWithoutModel_has_permissionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutModel_has_permissionsInputSchema).optional(),
            connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional()
        })
        .strict()

export const PermissionsUpdateOneRequiredWithoutModel_has_permissionsNestedInputSchema: z.ZodType<Prisma.PermissionsUpdateOneRequiredWithoutModel_has_permissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => PermissionsCreateWithoutModel_has_permissionsInputSchema),
                    z.lazy(() => PermissionsUncheckedCreateWithoutModel_has_permissionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutModel_has_permissionsInputSchema).optional(),
            upsert: z.lazy(() => PermissionsUpsertWithoutModel_has_permissionsInputSchema).optional(),
            connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => PermissionsUpdateWithoutModel_has_permissionsInputSchema),
                    z.lazy(() => PermissionsUncheckedUpdateWithoutModel_has_permissionsInputSchema)
                ])
                .optional()
        })
        .strict()

export const RolesCreateNestedOneWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesCreateNestedOneWithoutModel_has_rolesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => RolesCreateWithoutModel_has_rolesInputSchema),
                    z.lazy(() => RolesUncheckedCreateWithoutModel_has_rolesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutModel_has_rolesInputSchema).optional(),
            connect: z.lazy(() => RolesWhereUniqueInputSchema).optional()
        })
        .strict()

export const RolesUpdateOneRequiredWithoutModel_has_rolesNestedInputSchema: z.ZodType<Prisma.RolesUpdateOneRequiredWithoutModel_has_rolesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => RolesCreateWithoutModel_has_rolesInputSchema),
                    z.lazy(() => RolesUncheckedCreateWithoutModel_has_rolesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutModel_has_rolesInputSchema).optional(),
            upsert: z.lazy(() => RolesUpsertWithoutModel_has_rolesInputSchema).optional(),
            connect: z.lazy(() => RolesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => RolesUpdateWithoutModel_has_rolesInputSchema),
                    z.lazy(() => RolesUncheckedUpdateWithoutModel_has_rolesInputSchema)
                ])
                .optional()
        })
        .strict()

export const OrphansCreateNestedOneWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansCreateNestedOneWithoutOrphan_sponsorshipInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutOrphan_sponsorshipInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => OrphansCreateOrConnectWithoutOrphan_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => OrphansWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutOrphan_sponsorshipInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutOrphan_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutOrphan_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumorphan_sponsorship_typeFieldUpdateOperationsInput> =
    z
        .object({
            set: z.lazy(() => orphan_sponsorship_typeSchema).optional()
        })
        .strict()

export const OrphansUpdateOneRequiredWithoutOrphan_sponsorshipNestedInputSchema: z.ZodType<Prisma.OrphansUpdateOneRequiredWithoutOrphan_sponsorshipNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutOrphan_sponsorshipInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => OrphansCreateOrConnectWithoutOrphan_sponsorshipInputSchema).optional(),
            upsert: z.lazy(() => OrphansUpsertWithoutOrphan_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => OrphansWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithoutOrphan_sponsorshipInputSchema),
                    z.lazy(() => OrphansUncheckedUpdateWithoutOrphan_sponsorshipInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutOrphan_sponsorshipNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutOrphan_sponsorshipNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutOrphan_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutOrphan_sponsorshipInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutOrphan_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutOrphan_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutOrphan_sponsorshipInputSchema)
                ])
                .optional()
        })
        .strict()

export const Orphan_sponsorshipCreateNestedManyWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateNestedManyWithoutOrphansInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyOrphansInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutOrphans_orphans_created_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_created_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutOrphans_orphans_created_byTousersInputSchema)
                .optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
        })
        .strict()

export const UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutOrphans_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_deleted_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutOrphans_orphans_deleted_byTousersInputSchema)
                .optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
        })
        .strict()

export const FamiliesCreateNestedOneWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesCreateNestedOneWithoutOrphansInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutOrphansInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutOrphansInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutOrphansInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutOrphansInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutOrphansInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutOrphansInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutOrphansInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyOrphansInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z
    .object({
        set: z.coerce.date().optional()
    })
    .strict()

export const Orphan_sponsorshipUpdateManyWithoutOrphansNestedInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateManyWithoutOrphansNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutOrphansInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyOrphansInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutOrphansInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutOrphansInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutOrphans_orphans_created_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_created_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutOrphans_orphans_created_byTousersInputSchema)
                .optional(),
            upsert: z.lazy(() => UsersUpsertWithoutOrphans_orphans_created_byTousersInputSchema).optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithoutOrphans_orphans_created_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedUpdateWithoutOrphans_orphans_created_byTousersInputSchema)
                ])
                .optional()
        })
        .strict()

export const UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutOrphans_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_deleted_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutOrphans_orphans_deleted_byTousersInputSchema)
                .optional(),
            upsert: z.lazy(() => UsersUpsertWithoutOrphans_orphans_deleted_byTousersInputSchema).optional(),
            disconnect: z.boolean().optional(),
            delete: z.boolean().optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithoutOrphans_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedUpdateWithoutOrphans_orphans_deleted_byTousersInputSchema)
                ])
                .optional()
        })
        .strict()

export const FamiliesUpdateOneRequiredWithoutOrphansNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateOneRequiredWithoutOrphansNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutOrphansInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutOrphansInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutOrphansInputSchema).optional(),
            upsert: z.lazy(() => FamiliesUpsertWithoutOrphansInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithoutOrphansInputSchema),
                    z.lazy(() => FamiliesUncheckedUpdateWithoutOrphansInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutOrphansNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutOrphansNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutOrphansInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutOrphansInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutOrphansInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutOrphansInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutOrphansInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutOrphansInputSchema)
                ])
                .optional()
        })
        .strict()

export const Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutOrphansInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyOrphansInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutOrphansInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutOrphansInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutOrphansInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_permissionsCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsCreateNestedManyWithoutPermissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateNestedManyWithoutPermissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_permissionsUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Model_has_permissionsUpdateManyWithoutPermissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Model_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Model_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Model_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Model_has_permissionsScalarWhereInputSchema),
                    z.lazy(() => Model_has_permissionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateManyWithoutPermissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Model_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Model_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Model_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Model_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),
                    z.lazy(() => Model_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Model_has_permissionsScalarWhereInputSchema),
                    z.lazy(() => Model_has_permissionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const PermissionsCreateNestedOneWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateNestedOneWithoutRole_has_permissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => PermissionsCreateWithoutRole_has_permissionsInputSchema),
                    z.lazy(() => PermissionsUncheckedCreateWithoutRole_has_permissionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutRole_has_permissionsInputSchema).optional(),
            connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional()
        })
        .strict()

export const RolesCreateNestedOneWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesCreateNestedOneWithoutRole_has_permissionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => RolesCreateWithoutRole_has_permissionsInputSchema),
                    z.lazy(() => RolesUncheckedCreateWithoutRole_has_permissionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutRole_has_permissionsInputSchema).optional(),
            connect: z.lazy(() => RolesWhereUniqueInputSchema).optional()
        })
        .strict()

export const PermissionsUpdateOneRequiredWithoutRole_has_permissionsNestedInputSchema: z.ZodType<Prisma.PermissionsUpdateOneRequiredWithoutRole_has_permissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => PermissionsCreateWithoutRole_has_permissionsInputSchema),
                    z.lazy(() => PermissionsUncheckedCreateWithoutRole_has_permissionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutRole_has_permissionsInputSchema).optional(),
            upsert: z.lazy(() => PermissionsUpsertWithoutRole_has_permissionsInputSchema).optional(),
            connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => PermissionsUpdateWithoutRole_has_permissionsInputSchema),
                    z.lazy(() => PermissionsUncheckedUpdateWithoutRole_has_permissionsInputSchema)
                ])
                .optional()
        })
        .strict()

export const RolesUpdateOneRequiredWithoutRole_has_permissionsNestedInputSchema: z.ZodType<Prisma.RolesUpdateOneRequiredWithoutRole_has_permissionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => RolesCreateWithoutRole_has_permissionsInputSchema),
                    z.lazy(() => RolesUncheckedCreateWithoutRole_has_permissionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutRole_has_permissionsInputSchema).optional(),
            upsert: z.lazy(() => RolesUpsertWithoutRole_has_permissionsInputSchema).optional(),
            connect: z.lazy(() => RolesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => RolesUpdateWithoutRole_has_permissionsInputSchema),
                    z.lazy(() => RolesUncheckedUpdateWithoutRole_has_permissionsInputSchema)
                ])
                .optional()
        })
        .strict()

export const Model_has_rolesCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesCreateNestedManyWithoutRolesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_rolesCreateManyRolesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateNestedManyWithoutRolesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_rolesUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedCreateNestedManyWithoutRolesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_rolesCreateManyRolesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedCreateNestedManyWithoutRolesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_rolesUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Model_has_rolesUpdateManyWithoutRolesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Model_has_rolesUpsertWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUpsertWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_rolesCreateManyRolesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Model_has_rolesUpdateWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUpdateWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Model_has_rolesUpdateManyWithWhereWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUpdateManyWithWhereWithoutRolesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Model_has_rolesScalarWhereInputSchema),
                    z.lazy(() => Model_has_rolesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateManyWithoutRolesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutRolesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Model_has_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedUpdateManyWithoutRolesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Model_has_rolesUpsertWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUpsertWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Model_has_rolesCreateManyRolesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
                    z.lazy(() => Model_has_rolesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Model_has_rolesUpdateWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUpdateWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Model_has_rolesUpdateManyWithWhereWithoutRolesInputSchema),
                    z.lazy(() => Model_has_rolesUpdateManyWithWhereWithoutRolesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Model_has_rolesScalarWhereInputSchema),
                    z.lazy(() => Model_has_rolesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Role_has_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateManyWithoutRolesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema).array(),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsCreateOrConnectWithoutRolesInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Role_has_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
                    z.lazy(() => Role_has_permissionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutRolesInputSchema),
                    z.lazy(() => Role_has_permissionsUpdateManyWithWhereWithoutRolesInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
                    z.lazy(() => Role_has_permissionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const FamiliesCreateNestedOneWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesCreateNestedOneWithoutSecond_sponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutSecond_sponsorsInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutSecond_sponsorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutSecond_sponsorsInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutSecond_sponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSecond_sponsorsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSecond_sponsorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSecond_sponsorsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const FamiliesUpdateOneRequiredWithoutSecond_sponsorsNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateOneRequiredWithoutSecond_sponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutSecond_sponsorsInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutSecond_sponsorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutSecond_sponsorsInputSchema).optional(),
            upsert: z.lazy(() => FamiliesUpsertWithoutSecond_sponsorsInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithoutSecond_sponsorsInputSchema),
                    z.lazy(() => FamiliesUncheckedUpdateWithoutSecond_sponsorsInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutSecond_sponsorsNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutSecond_sponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSecond_sponsorsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSecond_sponsorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSecond_sponsorsInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutSecond_sponsorsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutSecond_sponsorsInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutSecond_sponsorsInputSchema)
                ])
                .optional()
        })
        .strict()

export const UsersCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutSessionsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSessionsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSessionsInputSchema).optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
        })
        .strict()

export const UsersUpdateOneWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutSessionsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSessionsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSessionsInputSchema).optional(),
            upsert: z.lazy(() => UsersUpsertWithoutSessionsInputSchema).optional(),
            disconnect: z.boolean().optional(),
            delete: z.boolean().optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithoutSessionsInputSchema),
                    z.lazy(() => UsersUncheckedUpdateWithoutSessionsInputSchema)
                ])
                .optional()
        })
        .strict()

export const UsersCreateNestedOneWithoutSettingsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutSettingsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSettingsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSettingsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSettingsInputSchema).optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
        })
        .strict()

export const EnumthemeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumthemeFieldUpdateOperationsInput> = z
    .object({
        set: z.lazy(() => themeSchema).optional()
    })
    .strict()

export const Enumcolor_schemeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumcolor_schemeFieldUpdateOperationsInput> =
    z
        .object({
            set: z.lazy(() => color_schemeSchema).optional()
        })
        .strict()

export const EnumlayoutFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumlayoutFieldUpdateOperationsInput> = z
    .object({
        set: z.lazy(() => layoutSchema).optional()
    })
    .strict()

export const EnumappearanceFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumappearanceFieldUpdateOperationsInput> =
    z
        .object({
            set: z.lazy(() => appearanceSchema).optional()
        })
        .strict()

export const UsersUpdateOneRequiredWithoutSettingsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutSettingsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSettingsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSettingsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSettingsInputSchema).optional(),
            upsert: z.lazy(() => UsersUpsertWithoutSettingsInputSchema).optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithoutSettingsInputSchema),
                    z.lazy(() => UsersUncheckedUpdateWithoutSettingsInputSchema)
                ])
                .optional()
        })
        .strict()

export const SponsorsCreateNestedOneWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsCreateNestedOneWithoutSponsor_sponsorshipInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutSponsor_sponsorshipInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => SponsorsCreateOrConnectWithoutSponsor_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => SponsorsWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutSponsor_sponsorshipInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSponsor_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSponsor_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumsponsor_sponsorship_typeFieldUpdateOperationsInput> =
    z
        .object({
            set: z.lazy(() => sponsor_sponsorship_typeSchema).optional()
        })
        .strict()

export const SponsorsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInputSchema: z.ZodType<Prisma.SponsorsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutSponsor_sponsorshipInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => SponsorsCreateOrConnectWithoutSponsor_sponsorshipInputSchema).optional(),
            upsert: z.lazy(() => SponsorsUpsertWithoutSponsor_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => SponsorsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithoutSponsor_sponsorshipInputSchema),
                    z.lazy(() => SponsorsUncheckedUpdateWithoutSponsor_sponsorshipInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSponsor_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSponsor_sponsorshipInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutSponsor_sponsorshipInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutSponsor_sponsorshipInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutSponsor_sponsorshipInputSchema)
                ])
                .optional()
        })
        .strict()

export const Income_sponsorCreateNestedManyWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorCreateNestedManyWithoutSponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManySponsorsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManySponsorsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSponsors_sponsors_created_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_created_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutSponsors_sponsors_created_byTousersInputSchema)
                .optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
        })
        .strict()

export const UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                .optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutSponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSponsorsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSponsorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSponsorsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManySponsorsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManySponsorsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUpdateManyWithoutSponsorsNestedInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyWithoutSponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManySponsorsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManySponsorsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSponsors_sponsors_created_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_created_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutSponsors_sponsors_created_byTousersInputSchema)
                .optional(),
            upsert: z.lazy(() => UsersUpsertWithoutSponsors_sponsors_created_byTousersInputSchema).optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithoutSponsors_sponsors_created_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedUpdateWithoutSponsors_sponsors_created_byTousersInputSchema)
                ])
                .optional()
        })
        .strict()

export const UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                ])
                .optional(),
            connectOrCreate: z
                .lazy(() => UsersCreateOrConnectWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                .optional(),
            upsert: z.lazy(() => UsersUpsertWithoutSponsors_sponsors_deleted_byTousersInputSchema).optional(),
            disconnect: z.boolean().optional(),
            delete: z.boolean().optional(),
            connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithoutSponsors_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => UsersUncheckedUpdateWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutSponsorsNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutSponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSponsorsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSponsorsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSponsorsInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutSponsorsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutSponsorsInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutSponsorsInputSchema)
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManySponsorsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutSponsorsInputSchema),
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManySponsorsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutSponsorsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutSponsorsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutSponsorshipsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSponsorshipsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSponsorshipsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSponsorshipsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const Enumsponsorship_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumsponsorship_typeFieldUpdateOperationsInput> =
    z
        .object({
            set: z.lazy(() => sponsorship_typeSchema).optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutSponsorshipsNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutSponsorshipsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSponsorshipsInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSponsorshipsInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSponsorshipsInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutSponsorshipsInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutSponsorshipsInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutSponsorshipsInputSchema)
                ])
                .optional()
        })
        .strict()

export const FamiliesCreateNestedOneWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesCreateNestedOneWithoutSpousesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutSpousesInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutSpousesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutSpousesInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutSpousesInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSpousesInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSpousesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSpousesInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const FamiliesUpdateOneRequiredWithoutSpousesNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateOneRequiredWithoutSpousesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutSpousesInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutSpousesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => FamiliesCreateOrConnectWithoutSpousesInputSchema).optional(),
            upsert: z.lazy(() => FamiliesUpsertWithoutSpousesInputSchema).optional(),
            connect: z.lazy(() => FamiliesWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithoutSpousesInputSchema),
                    z.lazy(() => FamiliesUncheckedUpdateWithoutSpousesInputSchema)
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutSpousesNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutSpousesNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutSpousesInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutSpousesInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutSpousesInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutSpousesInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutSpousesInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutSpousesInputSchema)
                ])
                .optional()
        })
        .strict()

export const BenefactorsCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => BenefactorsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const DomainsCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => DomainsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const FamiliesCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => FamiliesCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorshipsCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorshipsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.UsersCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => UsersCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional()
        })
        .strict()

export const BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => BenefactorsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => DomainsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => FamiliesCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorshipsCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersUncheckedCreateNestedManyWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateNestedManyWithoutTenantsInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => UsersCreateManyTenantsInputEnvelopeSchema).optional(),
            connect: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional()
        })
        .strict()

export const BenefactorsUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.BenefactorsUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => BenefactorsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => BenefactorsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => BenefactorsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => BenefactorsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => BenefactorsScalarWhereInputSchema),
                    z.lazy(() => BenefactorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const DomainsUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.DomainsUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => DomainsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => DomainsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => DomainsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => DomainsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => DomainsScalarWhereInputSchema),
                    z.lazy(() => DomainsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const FamiliesUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.FamiliesUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => FamiliesUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => FamiliesCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => FamiliesUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => FamiliesScalarWhereInputSchema),
                    z.lazy(() => FamiliesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema),
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.SponsorsUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorsScalarWhereInputSchema),
                    z.lazy(() => SponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorshipsUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.SponsorshipsUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorshipsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorshipsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorshipsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorshipsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorshipsScalarWhereInputSchema),
                    z.lazy(() => SponsorshipsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.SpousesUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SpousesScalarWhereInputSchema),
                    z.lazy(() => SpousesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.UsersUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => UsersUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => UsersUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => UsersCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            disconnect: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            delete: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            connect: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => UsersUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => UsersUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => UsersUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([z.lazy(() => UsersScalarWhereInputSchema), z.lazy(() => UsersScalarWhereInputSchema).array()])
                .optional()
        })
        .strict()

export const BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.BenefactorsUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => BenefactorsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => BenefactorsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => BenefactorsWhereUniqueInputSchema),
                    z.lazy(() => BenefactorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => BenefactorsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => BenefactorsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => BenefactorsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => BenefactorsScalarWhereInputSchema),
                    z.lazy(() => BenefactorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.DomainsUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => DomainsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => DomainsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => DomainsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => DomainsWhereUniqueInputSchema),
                    z.lazy(() => DomainsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => DomainsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => DomainsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => DomainsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => DomainsScalarWhereInputSchema),
                    z.lazy(() => DomainsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => FamiliesUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => FamiliesCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => FamiliesWhereUniqueInputSchema),
                    z.lazy(() => FamiliesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => FamiliesUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => FamiliesUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => FamiliesUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => FamiliesScalarWhereInputSchema),
                    z.lazy(() => FamiliesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Family_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Family_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Family_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Family_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Income_sponsorCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema),
                    z.lazy(() => Income_sponsorWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Income_sponsorUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Income_sponsorScalarWhereInputSchema),
                    z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Orphan_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Orphan_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Second_sponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
                    z.lazy(() => Second_sponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Second_sponsorsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema),
                    z.lazy(() => Second_sponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => Sponsor_sponsorshipCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
                    z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => Sponsor_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
                    z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorsScalarWhereInputSchema),
                    z.lazy(() => SponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorshipsUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorshipsCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema),
                    z.lazy(() => SponsorshipsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorshipsUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorshipsUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => SponsorshipsUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorshipsScalarWhereInputSchema),
                    z.lazy(() => SponsorshipsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => SpousesCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SpousesCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SpousesWhereUniqueInputSchema),
                    z.lazy(() => SpousesWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => SpousesUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SpousesScalarWhereInputSchema),
                    z.lazy(() => SpousesScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateManyWithoutTenantsNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateWithoutTenantsInputSchema).array(),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema),
                    z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema),
                    z.lazy(() => UsersCreateOrConnectWithoutTenantsInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => UsersUpsertWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => UsersUpsertWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => UsersCreateManyTenantsInputEnvelopeSchema).optional(),
            set: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            disconnect: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            delete: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            connect: z
                .union([z.lazy(() => UsersWhereUniqueInputSchema), z.lazy(() => UsersWhereUniqueInputSchema).array()])
                .optional(),
            update: z
                .union([
                    z.lazy(() => UsersUpdateWithWhereUniqueWithoutTenantsInputSchema),
                    z.lazy(() => UsersUpdateWithWhereUniqueWithoutTenantsInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => UsersUpdateManyWithWhereWithoutTenantsInputSchema),
                    z.lazy(() => UsersUpdateManyWithWhereWithoutTenantsInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([z.lazy(() => UsersScalarWhereInputSchema), z.lazy(() => UsersScalarWhereInputSchema).array()])
                .optional()
        })
        .strict()

export const OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_created_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_deleted_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SessionsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.SessionsCreateNestedManyWithoutUsersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SessionsCreateManyUsersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SettingsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.SettingsCreateNestedManyWithoutUsersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SettingsCreateManyUsersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_created_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_deleted_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const TenantsCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.TenantsCreateNestedOneWithoutUsersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutUsersInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutUsersInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutUsersInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional()
        })
        .strict()

export const OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_created_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_deleted_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SessionsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUncheckedCreateNestedManyWithoutUsersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SessionsCreateManyUsersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SettingsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUncheckedCreateNestedManyWithoutUsersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SettingsCreateManyUsersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_created_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_deleted_byTousersInputEnvelopeSchema).optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_created_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_deleted_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SessionsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.SessionsUpdateManyWithoutUsersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SessionsCreateManyUsersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SessionsUpdateManyWithWhereWithoutUsersInputSchema),
                    z.lazy(() => SessionsUpdateManyWithWhereWithoutUsersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SessionsScalarWhereInputSchema),
                    z.lazy(() => SessionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SettingsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.SettingsUpdateManyWithoutUsersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SettingsUpsertWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SettingsUpsertWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SettingsCreateManyUsersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SettingsUpdateWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SettingsUpdateWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SettingsUpdateManyWithWhereWithoutUsersInputSchema),
                    z.lazy(() => SettingsUpdateManyWithWhereWithoutUsersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SettingsScalarWhereInputSchema),
                    z.lazy(() => SettingsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema: z.ZodType<Prisma.SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_created_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorsScalarWhereInputSchema),
                    z.lazy(() => SponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema: z.ZodType<Prisma.SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_deleted_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorsScalarWhereInputSchema),
                    z.lazy(() => SponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const TenantsUpdateOneRequiredWithoutUsersNestedInputSchema: z.ZodType<Prisma.TenantsUpdateOneRequiredWithoutUsersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => TenantsCreateWithoutUsersInputSchema),
                    z.lazy(() => TenantsUncheckedCreateWithoutUsersInputSchema)
                ])
                .optional(),
            connectOrCreate: z.lazy(() => TenantsCreateOrConnectWithoutUsersInputSchema).optional(),
            upsert: z.lazy(() => TenantsUpsertWithoutUsersInputSchema).optional(),
            connect: z.lazy(() => TenantsWhereUniqueInputSchema).optional(),
            update: z
                .union([
                    z.lazy(() => TenantsUpdateWithoutUsersInputSchema),
                    z.lazy(() => TenantsUncheckedUpdateWithoutUsersInputSchema)
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_created_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_created_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_created_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array(),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUpsertWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => OrphansCreateManyUsers_orphans_deleted_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => OrphansWhereUniqueInputSchema),
                    z.lazy(() => OrphansWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_deleted_byTousersInputSchema),
                    z.lazy(() => OrphansUpdateManyWithWhereWithoutUsers_orphans_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => OrphansScalarWhereInputSchema),
                    z.lazy(() => OrphansScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateManyWithoutUsersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SessionsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SessionsCreateManyUsersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SessionsWhereUniqueInputSchema),
                    z.lazy(() => SessionsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SessionsUpdateManyWithWhereWithoutUsersInputSchema),
                    z.lazy(() => SessionsUpdateManyWithWhereWithoutUsersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SessionsScalarWhereInputSchema),
                    z.lazy(() => SessionsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.SettingsUncheckedUpdateManyWithoutUsersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateWithoutUsersInputSchema).array(),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema),
                    z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema),
                    z.lazy(() => SettingsCreateOrConnectWithoutUsersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SettingsUpsertWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SettingsUpsertWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            createMany: z.lazy(() => SettingsCreateManyUsersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SettingsWhereUniqueInputSchema),
                    z.lazy(() => SettingsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SettingsUpdateWithWhereUniqueWithoutUsersInputSchema),
                    z.lazy(() => SettingsUpdateWithWhereUniqueWithoutUsersInputSchema).array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SettingsUpdateManyWithWhereWithoutUsersInputSchema),
                    z.lazy(() => SettingsUpdateManyWithWhereWithoutUsersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SettingsScalarWhereInputSchema),
                    z.lazy(() => SettingsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_created_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_created_byTousersInputSchema),
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_created_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorsScalarWhereInputSchema),
                    z.lazy(() => SponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInput> =
    z
        .object({
            create: z
                .union([
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array(),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            connectOrCreate: z
                .union([
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            upsert: z
                .union([
                    z.lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            createMany: z.lazy(() => SponsorsCreateManyUsers_sponsors_deleted_byTousersInputEnvelopeSchema).optional(),
            set: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            disconnect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            delete: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            connect: z
                .union([
                    z.lazy(() => SponsorsWhereUniqueInputSchema),
                    z.lazy(() => SponsorsWhereUniqueInputSchema).array()
                ])
                .optional(),
            update: z
                .union([
                    z.lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z
                        .lazy(() => SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema)
                        .array()
                ])
                .optional(),
            updateMany: z
                .union([
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_deleted_byTousersInputSchema),
                    z.lazy(() => SponsorsUpdateManyWithWhereWithoutUsers_sponsors_deleted_byTousersInputSchema).array()
                ])
                .optional(),
            deleteMany: z
                .union([
                    z.lazy(() => SponsorsScalarWhereInputSchema),
                    z.lazy(() => SponsorsScalarWhereInputSchema).array()
                ])
                .optional()
        })
        .strict()

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        not: z.union([z.string(), z.lazy(() => NestedUuidFilterSchema)]).optional()
    })
    .strict()

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        not: z.union([z.string(), z.lazy(() => NestedStringFilterSchema)]).optional()
    })
    .strict()

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z
    .object({
        equals: z.coerce.date().optional().nullable(),
        in: z.coerce.date().array().optional().nullable(),
        notIn: z.coerce.date().array().optional().nullable(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z
            .union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        not: z.union([z.string(), z.lazy(() => NestedUuidWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedStringFilterSchema).optional(),
        _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedIntFilterSchema)]).optional()
    })
    .strict()

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z
    .object({
        equals: z.string().optional(),
        in: z.string().array().optional(),
        notIn: z.string().array().optional(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        not: z.union([z.string(), z.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedStringFilterSchema).optional(),
        _max: z.lazy(() => NestedStringFilterSchema).optional()
    })
    .strict()

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> =
    z
        .object({
            equals: z.coerce.date().optional().nullable(),
            in: z.coerce.date().array().optional().nullable(),
            notIn: z.coerce.date().array().optional().nullable(),
            lt: z.coerce.date().optional(),
            lte: z.coerce.date().optional(),
            gt: z.coerce.date().optional(),
            gte: z.coerce.date().optional(),
            not: z
                .union([z.coerce.date(), z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)])
                .optional()
                .nullable(),
            _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
            _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
            _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
        })
        .strict()

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z
    .object({
        equals: z.number().optional().nullable(),
        in: z.number().array().optional().nullable(),
        notIn: z.number().array().optional().nullable(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z
            .union([z.number(), z.lazy(() => NestedIntNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
        _sum: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedIntFilterSchema).optional(),
        _max: z.lazy(() => NestedIntFilterSchema).optional()
    })
    .strict()

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedFloatFilterSchema)]).optional()
    })
    .strict()

export const NestedEnumfamily_sponsorship_typeFilterSchema: z.ZodType<Prisma.NestedEnumfamily_sponsorship_typeFilter> =
    z
        .object({
            equals: z.lazy(() => family_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => family_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => family_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumfamily_sponsorship_typeFilterSchema)
                ])
                .optional()
        })
        .strict()

export const NestedEnumfamily_sponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumfamily_sponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => family_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => family_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => family_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumfamily_sponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumfamily_sponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumfamily_sponsorship_typeFilterSchema).optional()
        })
        .strict()

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z
    .object({
        equals: z.number().optional(),
        in: z.number().array().optional(),
        notIn: z.number().array().optional(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z.union([z.number(), z.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
        _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
        _min: z.lazy(() => NestedFloatFilterSchema).optional(),
        _max: z.lazy(() => NestedFloatFilterSchema).optional()
    })
    .strict()

export const NestedBigIntFilterSchema: z.ZodType<Prisma.NestedBigIntFilter> = z
    .object({
        equals: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        in: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        notIn: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        lt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        lte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        not: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => NestedBigIntFilterSchema)
            ])
            .optional()
    })
    .strict()

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedUuidNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        contains: z.string().optional(),
        startsWith: z.string().optional(),
        endsWith: z.string().optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedStringNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const NestedBigIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBigIntWithAggregatesFilter> = z
    .object({
        equals: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        in: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        notIn: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n).array(),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt).array()
            ])
            .optional(),
        lt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        lte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gt: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        gte: z
            .union([
                z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
            ])
            .optional(),
        not: z
            .union([
                z.union([
                    z.bigint().gte(-9223372036854775808n).lte(9223372036854775807n),
                    z.number().int().gte(Number.MIN_SAFE_INTEGER).lte(Number.MAX_SAFE_INTEGER).transform(BigInt)
                ]),
                z.lazy(() => NestedBigIntWithAggregatesFilterSchema)
            ])
            .optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
        _sum: z.lazy(() => NestedBigIntFilterSchema).optional(),
        _min: z.lazy(() => NestedBigIntFilterSchema).optional(),
        _max: z.lazy(() => NestedBigIntFilterSchema).optional()
    })
    .strict()

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z
    .object({
        equals: z.string().optional().nullable(),
        in: z.string().array().optional().nullable(),
        notIn: z.string().array().optional().nullable(),
        lt: z.string().optional(),
        lte: z.string().optional(),
        gt: z.string().optional(),
        gte: z.string().optional(),
        not: z
            .union([z.string(), z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema)])
            .optional()
            .nullable(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
    })
    .strict()

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> =
    z
        .object({
            equals: z.string().optional().nullable(),
            in: z.string().array().optional().nullable(),
            notIn: z.string().array().optional().nullable(),
            lt: z.string().optional(),
            lte: z.string().optional(),
            gt: z.string().optional(),
            gte: z.string().optional(),
            contains: z.string().optional(),
            startsWith: z.string().optional(),
            endsWith: z.string().optional(),
            not: z
                .union([z.string(), z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)])
                .optional()
                .nullable(),
            _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
            _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
            _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
        })
        .strict()

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z
    .object({
        equals: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        path: z.string().array().optional(),
        string_contains: z.string().optional(),
        string_starts_with: z.string().optional(),
        string_ends_with: z.string().optional(),
        array_contains: InputJsonValue.optional().nullable(),
        array_starts_with: InputJsonValue.optional().nullable(),
        array_ends_with: InputJsonValue.optional().nullable(),
        lt: InputJsonValue.optional(),
        lte: InputJsonValue.optional(),
        gt: InputJsonValue.optional(),
        gte: InputJsonValue.optional(),
        not: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional()
    })
    .strict()

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z
    .object({
        equals: z.number().optional().nullable(),
        in: z.number().array().optional().nullable(),
        notIn: z.number().array().optional().nullable(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z
            .union([z.number(), z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)])
            .optional()
            .nullable(),
        _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
        _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
        _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
    })
    .strict()

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z
    .object({
        equals: z.number().optional().nullable(),
        in: z.number().array().optional().nullable(),
        notIn: z.number().array().optional().nullable(),
        lt: z.number().optional(),
        lte: z.number().optional(),
        gt: z.number().optional(),
        gte: z.number().optional(),
        not: z
            .union([z.number(), z.lazy(() => NestedFloatNullableFilterSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const NestedEnumorphan_sponsorship_typeFilterSchema: z.ZodType<Prisma.NestedEnumorphan_sponsorship_typeFilter> =
    z
        .object({
            equals: z.lazy(() => orphan_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => orphan_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => orphan_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumorphan_sponsorship_typeFilterSchema)
                ])
                .optional()
        })
        .strict()

export const NestedEnumorphan_sponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumorphan_sponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => orphan_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => orphan_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => orphan_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumorphan_sponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumorphan_sponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumorphan_sponsorship_typeFilterSchema).optional()
        })
        .strict()

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z
    .object({
        equals: z.coerce.date().optional(),
        in: z.coerce.date().array().optional(),
        notIn: z.coerce.date().array().optional(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeFilterSchema)]).optional()
    })
    .strict()

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z
    .object({
        equals: z.coerce.date().optional(),
        in: z.coerce.date().array().optional(),
        notIn: z.coerce.date().array().optional(),
        lt: z.coerce.date().optional(),
        lte: z.coerce.date().optional(),
        gt: z.coerce.date().optional(),
        gte: z.coerce.date().optional(),
        not: z.union([z.coerce.date(), z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
        _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
    })
    .strict()

export const NestedEnumthemeFilterSchema: z.ZodType<Prisma.NestedEnumthemeFilter> = z
    .object({
        equals: z.lazy(() => themeSchema).optional(),
        in: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => themeSchema), z.lazy(() => NestedEnumthemeFilterSchema)]).optional()
    })
    .strict()

export const NestedEnumcolor_schemeFilterSchema: z.ZodType<Prisma.NestedEnumcolor_schemeFilter> = z
    .object({
        equals: z.lazy(() => color_schemeSchema).optional(),
        in: z
            .lazy(() => color_schemeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => color_schemeSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => color_schemeSchema), z.lazy(() => NestedEnumcolor_schemeFilterSchema)]).optional()
    })
    .strict()

export const NestedEnumlayoutFilterSchema: z.ZodType<Prisma.NestedEnumlayoutFilter> = z
    .object({
        equals: z.lazy(() => layoutSchema).optional(),
        in: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => layoutSchema), z.lazy(() => NestedEnumlayoutFilterSchema)]).optional()
    })
    .strict()

export const NestedEnumappearanceFilterSchema: z.ZodType<Prisma.NestedEnumappearanceFilter> = z
    .object({
        equals: z.lazy(() => appearanceSchema).optional(),
        in: z
            .lazy(() => appearanceSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => appearanceSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => appearanceSchema), z.lazy(() => NestedEnumappearanceFilterSchema)]).optional()
    })
    .strict()

export const NestedEnumthemeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumthemeWithAggregatesFilter> = z
    .object({
        equals: z.lazy(() => themeSchema).optional(),
        in: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => themeSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => themeSchema), z.lazy(() => NestedEnumthemeWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedEnumthemeFilterSchema).optional(),
        _max: z.lazy(() => NestedEnumthemeFilterSchema).optional()
    })
    .strict()

export const NestedEnumcolor_schemeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumcolor_schemeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => color_schemeSchema).optional(),
            in: z
                .lazy(() => color_schemeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => color_schemeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => color_schemeSchema),
                    z.lazy(() => NestedEnumcolor_schemeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumcolor_schemeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumcolor_schemeFilterSchema).optional()
        })
        .strict()

export const NestedEnumlayoutWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumlayoutWithAggregatesFilter> = z
    .object({
        equals: z.lazy(() => layoutSchema).optional(),
        in: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => layoutSchema)
            .array()
            .optional(),
        not: z.union([z.lazy(() => layoutSchema), z.lazy(() => NestedEnumlayoutWithAggregatesFilterSchema)]).optional(),
        _count: z.lazy(() => NestedIntFilterSchema).optional(),
        _min: z.lazy(() => NestedEnumlayoutFilterSchema).optional(),
        _max: z.lazy(() => NestedEnumlayoutFilterSchema).optional()
    })
    .strict()

export const NestedEnumappearanceWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumappearanceWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => appearanceSchema).optional(),
            in: z
                .lazy(() => appearanceSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => appearanceSchema)
                .array()
                .optional(),
            not: z
                .union([z.lazy(() => appearanceSchema), z.lazy(() => NestedEnumappearanceWithAggregatesFilterSchema)])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumappearanceFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumappearanceFilterSchema).optional()
        })
        .strict()

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z
    .object({
        equals: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional(),
        path: z.string().array().optional(),
        string_contains: z.string().optional(),
        string_starts_with: z.string().optional(),
        string_ends_with: z.string().optional(),
        array_contains: InputJsonValue.optional().nullable(),
        array_starts_with: InputJsonValue.optional().nullable(),
        array_ends_with: InputJsonValue.optional().nullable(),
        lt: InputJsonValue.optional(),
        lte: InputJsonValue.optional(),
        gt: InputJsonValue.optional(),
        gte: InputJsonValue.optional(),
        not: z.union([InputJsonValue, z.lazy(() => JsonNullValueFilterSchema)]).optional()
    })
    .strict()

export const NestedEnumsponsor_sponsorship_typeFilterSchema: z.ZodType<Prisma.NestedEnumsponsor_sponsorship_typeFilter> =
    z
        .object({
            equals: z.lazy(() => sponsor_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => sponsor_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => sponsor_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumsponsor_sponsorship_typeFilterSchema)
                ])
                .optional()
        })
        .strict()

export const NestedEnumsponsor_sponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumsponsor_sponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => sponsor_sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => sponsor_sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => sponsor_sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => NestedEnumsponsor_sponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumsponsor_sponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumsponsor_sponsorship_typeFilterSchema).optional()
        })
        .strict()

export const NestedEnumsponsorship_typeFilterSchema: z.ZodType<Prisma.NestedEnumsponsorship_typeFilter> = z
    .object({
        equals: z.lazy(() => sponsorship_typeSchema).optional(),
        in: z
            .lazy(() => sponsorship_typeSchema)
            .array()
            .optional(),
        notIn: z
            .lazy(() => sponsorship_typeSchema)
            .array()
            .optional(),
        not: z
            .union([z.lazy(() => sponsorship_typeSchema), z.lazy(() => NestedEnumsponsorship_typeFilterSchema)])
            .optional()
    })
    .strict()

export const NestedEnumsponsorship_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumsponsorship_typeWithAggregatesFilter> =
    z
        .object({
            equals: z.lazy(() => sponsorship_typeSchema).optional(),
            in: z
                .lazy(() => sponsorship_typeSchema)
                .array()
                .optional(),
            notIn: z
                .lazy(() => sponsorship_typeSchema)
                .array()
                .optional(),
            not: z
                .union([
                    z.lazy(() => sponsorship_typeSchema),
                    z.lazy(() => NestedEnumsponsorship_typeWithAggregatesFilterSchema)
                ])
                .optional(),
            _count: z.lazy(() => NestedIntFilterSchema).optional(),
            _min: z.lazy(() => NestedEnumsponsorship_typeFilterSchema).optional(),
            _max: z.lazy(() => NestedEnumsponsorship_typeFilterSchema).optional()
        })
        .strict()

export const TenantsCreateWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsCreateWithoutBenefactorsInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutBenefactorsInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutBenefactorsInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutBenefactorsInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutBenefactorsInputSchema)
            ])
        })
        .strict()

export const TenantsUpsertWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutBenefactorsInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutBenefactorsInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutBenefactorsInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutBenefactorsInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutBenefactorsInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutBenefactorsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutBenefactorsInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutBenefactorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsCreateWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsCreateWithoutDomainsInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutDomainsInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutDomainsInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutDomainsInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutDomainsInputSchema)
            ])
        })
        .strict()

export const TenantsUpsertWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutDomainsInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutDomainsInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutDomainsInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutDomainsInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutDomainsInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutDomainsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutDomainsInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutDomainsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsCreateWithoutFamiliesInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutFamiliesInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_furnishingCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            value: z.string(),
            furnishings: z.lazy(() => FurnishingsCreateNestedOneWithoutFamily_furnishingInputSchema)
        })
        .strict()

export const Family_furnishingUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            furnishing_id: z.string(),
            value: z.string()
        })
        .strict()

export const Family_furnishingCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema),
                z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_furnishingCreateManyFamiliesInputEnvelopeSchema: z.ZodType<Prisma.Family_furnishingCreateManyFamiliesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Family_furnishingCreateManyFamiliesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Family_housingCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            value: z.string(),
            housings: z.lazy(() => HousingsCreateNestedOneWithoutFamily_housingInputSchema)
        })
        .strict()

export const Family_housingUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            housing_id: z.string(),
            value: z.string()
        })
        .strict()

export const Family_housingCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_housingWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema),
                z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_housingCreateManyFamiliesInputEnvelopeSchema: z.ZodType<Prisma.Family_housingCreateManyFamiliesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Family_housingCreateManyFamiliesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Family_sponsorshipCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => family_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamily_sponsorshipInputSchema)
        })
        .strict()

export const Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => family_sponsorship_typeSchema),
            value: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Family_sponsorshipCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipCreateManyFamiliesInputEnvelopeSchema: z.ZodType<Prisma.Family_sponsorshipCreateManyFamiliesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Family_sponsorshipCreateManyFamiliesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const OrphansCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansCreateWithoutFamiliesInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutOrphansInputSchema).optional(),
        users_orphans_created_byTousers: z.lazy(
            () => UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInputSchema
        ),
        users_orphans_deleted_byTousers: z
            .lazy(() => UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphansInputSchema)
    })
    .strict()

export const OrphansUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            tenant_id: z.string(),
            created_by: z.string(),
            deleted_by: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInputSchema)
                .optional()
        })
        .strict()

export const OrphansCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutFamiliesInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const OrphansCreateManyFamiliesInputEnvelopeSchema: z.ZodType<Prisma.OrphansCreateManyFamiliesInputEnvelope> = z
    .object({
        data: z.lazy(() => OrphansCreateManyFamiliesInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const Second_sponsorsCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            degree_of_kinship: z.string(),
            phone_number: z.string(),
            address: z.string(),
            income: z.number(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutSecond_sponsorsInputSchema)
        })
        .strict()

export const Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            degree_of_kinship: z.string(),
            phone_number: z.string(),
            address: z.string(),
            income: z.number(),
            tenant_id: z.string(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Second_sponsorsCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema),
                z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsCreateManyFamiliesInputEnvelopeSchema: z.ZodType<Prisma.Second_sponsorsCreateManyFamiliesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Second_sponsorsCreateManyFamiliesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const SpousesCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesCreateWithoutFamiliesInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutSpousesInputSchema)
    })
    .strict()

export const SpousesUncheckedCreateWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUncheckedCreateWithoutFamiliesInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            death_date: z.coerce.date(),
            function: z.string(),
            income: z.number(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SpousesCreateOrConnectWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesCreateOrConnectWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => SpousesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SpousesCreateWithoutFamiliesInputSchema),
                z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const SpousesCreateManyFamiliesInputEnvelopeSchema: z.ZodType<Prisma.SpousesCreateManyFamiliesInputEnvelope> = z
    .object({
        data: z.lazy(() => SpousesCreateManyFamiliesInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const TenantsUpsertWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutFamiliesInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutFamiliesInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutFamiliesInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutFamiliesInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutFamiliesInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutFamiliesInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Family_furnishingUpsertWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUpsertWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Family_furnishingUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Family_furnishingUncheckedUpdateWithoutFamiliesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Family_furnishingCreateWithoutFamiliesInputSchema),
                z.lazy(() => Family_furnishingUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_furnishingUpdateWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUpdateWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Family_furnishingUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Family_furnishingUncheckedUpdateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_furnishingUpdateManyWithWhereWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUpdateManyWithWhereWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Family_furnishingUpdateManyMutationInputSchema),
                z.lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamily_furnishingInputSchema)
            ])
        })
        .strict()

export const Family_furnishingScalarWhereInputSchema: z.ZodType<Prisma.Family_furnishingScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Family_furnishingScalarWhereInputSchema),
                z.lazy(() => Family_furnishingScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Family_furnishingScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Family_furnishingScalarWhereInputSchema),
                z.lazy(() => Family_furnishingScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        furnishing_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional()
    })
    .strict()

export const Family_housingUpsertWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUpsertWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_housingWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Family_housingUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Family_housingUncheckedUpdateWithoutFamiliesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Family_housingCreateWithoutFamiliesInputSchema),
                z.lazy(() => Family_housingUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_housingUpdateWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUpdateWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_housingWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Family_housingUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Family_housingUncheckedUpdateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_housingUpdateManyWithWhereWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUpdateManyWithWhereWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_housingScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Family_housingUpdateManyMutationInputSchema),
                z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamily_housingInputSchema)
            ])
        })
        .strict()

export const Family_housingScalarWhereInputSchema: z.ZodType<Prisma.Family_housingScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Family_housingScalarWhereInputSchema),
                z.lazy(() => Family_housingScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Family_housingScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Family_housingScalarWhereInputSchema),
                z.lazy(() => Family_housingScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        housing_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional()
    })
    .strict()

export const Family_sponsorshipUpsertWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUpsertWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Family_sponsorshipUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedUpdateWithoutFamiliesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Family_sponsorshipCreateWithoutFamiliesInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipUpdateWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Family_sponsorshipUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedUpdateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipUpdateManyWithWhereWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateManyWithWhereWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Family_sponsorshipUpdateManyMutationInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamily_sponsorshipInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipScalarWhereInputSchema: z.ZodType<Prisma.Family_sponsorshipScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
                z.lazy(() => Family_sponsorshipScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Family_sponsorshipScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
                z.lazy(() => Family_sponsorshipScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([z.lazy(() => Enumfamily_sponsorship_typeFilterSchema), z.lazy(() => family_sponsorship_typeSchema)])
            .optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const OrphansUpsertWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUpsertWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => OrphansUpdateWithoutFamiliesInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutFamiliesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutFamiliesInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUpdateWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateWithoutFamiliesInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateManyWithWhereWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithWhereWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => OrphansScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateManyMutationInputSchema),
                z.lazy(() => OrphansUncheckedUpdateManyWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const OrphansScalarWhereInputSchema: z.ZodType<Prisma.OrphansScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => OrphansScalarWhereInputSchema), z.lazy(() => OrphansScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => OrphansScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => OrphansScalarWhereInputSchema), z.lazy(() => OrphansScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        family_status: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        health_status: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        academic_level: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        shoes_size: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        pants_size: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        shirt_size: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        note: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        created_by: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        deleted_by: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Second_sponsorsUpsertWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUpsertWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Second_sponsorsUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Second_sponsorsUncheckedUpdateWithoutFamiliesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Second_sponsorsCreateWithoutFamiliesInputSchema),
                z.lazy(() => Second_sponsorsUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsUpdateWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Second_sponsorsUpdateWithoutFamiliesInputSchema),
                z.lazy(() => Second_sponsorsUncheckedUpdateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsUpdateManyWithWhereWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateManyWithWhereWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Second_sponsorsUpdateManyMutationInputSchema),
                z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutSecond_sponsorsInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsScalarWhereInputSchema: z.ZodType<Prisma.Second_sponsorsScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Second_sponsorsScalarWhereInputSchema),
                z.lazy(() => Second_sponsorsScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Second_sponsorsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Second_sponsorsScalarWhereInputSchema),
                z.lazy(() => Second_sponsorsScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        degree_of_kinship: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        phone_number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        address: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        income: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const SpousesUpsertWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUpsertWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => SpousesWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SpousesUpdateWithoutFamiliesInputSchema),
                z.lazy(() => SpousesUncheckedUpdateWithoutFamiliesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SpousesCreateWithoutFamiliesInputSchema),
                z.lazy(() => SpousesUncheckedCreateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const SpousesUpdateWithWhereUniqueWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUpdateWithWhereUniqueWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => SpousesWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SpousesUpdateWithoutFamiliesInputSchema),
                z.lazy(() => SpousesUncheckedUpdateWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const SpousesUpdateManyWithWhereWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUpdateManyWithWhereWithoutFamiliesInput> =
    z
        .object({
            where: z.lazy(() => SpousesScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SpousesUpdateManyMutationInputSchema),
                z.lazy(() => SpousesUncheckedUpdateManyWithoutSpousesInputSchema)
            ])
        })
        .strict()

export const SpousesScalarWhereInputSchema: z.ZodType<Prisma.SpousesScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SpousesScalarWhereInputSchema), z.lazy(() => SpousesScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SpousesScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SpousesScalarWhereInputSchema), z.lazy(() => SpousesScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        death_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        function: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        income: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
        family_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const FamiliesCreateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
            family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedCreateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutFamily_furnishingInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutFamily_furnishingInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutFamily_furnishingInputSchema)
            ])
        })
        .strict()

export const FurnishingsCreateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsCreateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.string(),
            name: z.string()
        })
        .strict()

export const FurnishingsUncheckedCreateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsUncheckedCreateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.string(),
            name: z.string()
        })
        .strict()

export const FurnishingsCreateOrConnectWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsCreateOrConnectWithoutFamily_furnishingInput> =
    z
        .object({
            where: z.lazy(() => FurnishingsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FurnishingsCreateWithoutFamily_furnishingInputSchema),
                z.lazy(() => FurnishingsUncheckedCreateWithoutFamily_furnishingInputSchema)
            ])
        })
        .strict()

export const FamiliesUpsertWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesUpsertWithoutFamily_furnishingInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => FamiliesUpdateWithoutFamily_furnishingInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateWithoutFamily_furnishingInputSchema)
            ]),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutFamily_furnishingInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutFamily_furnishingInputSchema)
            ])
        })
        .strict()

export const FamiliesUpdateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
            family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedUpdateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const FurnishingsUpsertWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsUpsertWithoutFamily_furnishingInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => FurnishingsUpdateWithoutFamily_furnishingInputSchema),
                z.lazy(() => FurnishingsUncheckedUpdateWithoutFamily_furnishingInputSchema)
            ]),
            create: z.union([
                z.lazy(() => FurnishingsCreateWithoutFamily_furnishingInputSchema),
                z.lazy(() => FurnishingsUncheckedCreateWithoutFamily_furnishingInputSchema)
            ])
        })
        .strict()

export const FurnishingsUpdateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsUpdateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const FurnishingsUncheckedUpdateWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.FurnishingsUncheckedUpdateWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const FamiliesCreateWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutFamily_housingInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
            family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedCreateWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutFamily_housingInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutFamily_housingInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutFamily_housingInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutFamily_housingInputSchema)
            ])
        })
        .strict()

export const HousingsCreateWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsCreateWithoutFamily_housingInput> =
    z
        .object({
            id: z.string(),
            name: z.string()
        })
        .strict()

export const HousingsUncheckedCreateWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsUncheckedCreateWithoutFamily_housingInput> =
    z
        .object({
            id: z.string(),
            name: z.string()
        })
        .strict()

export const HousingsCreateOrConnectWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsCreateOrConnectWithoutFamily_housingInput> =
    z
        .object({
            where: z.lazy(() => HousingsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => HousingsCreateWithoutFamily_housingInputSchema),
                z.lazy(() => HousingsUncheckedCreateWithoutFamily_housingInputSchema)
            ])
        })
        .strict()

export const FamiliesUpsertWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesUpsertWithoutFamily_housingInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => FamiliesUpdateWithoutFamily_housingInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateWithoutFamily_housingInputSchema)
            ]),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutFamily_housingInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutFamily_housingInputSchema)
            ])
        })
        .strict()

export const FamiliesUpdateWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutFamily_housingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
            family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedUpdateWithoutFamily_housingInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutFamily_housingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const HousingsUpsertWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsUpsertWithoutFamily_housingInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => HousingsUpdateWithoutFamily_housingInputSchema),
                z.lazy(() => HousingsUncheckedUpdateWithoutFamily_housingInputSchema)
            ]),
            create: z.union([
                z.lazy(() => HousingsCreateWithoutFamily_housingInputSchema),
                z.lazy(() => HousingsUncheckedCreateWithoutFamily_housingInputSchema)
            ])
        })
        .strict()

export const HousingsUpdateWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsUpdateWithoutFamily_housingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const HousingsUncheckedUpdateWithoutFamily_housingInputSchema: z.ZodType<Prisma.HousingsUncheckedUpdateWithoutFamily_housingInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const FamiliesCreateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
            family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedCreateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutFamily_sponsorshipInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutFamily_sponsorshipInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutFamily_sponsorshipInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedCreateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutFamily_sponsorshipInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutFamily_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutFamily_sponsorshipInputSchema)
            ])
        })
        .strict()

export const FamiliesUpsertWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesUpsertWithoutFamily_sponsorshipInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => FamiliesUpdateWithoutFamily_sponsorshipInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateWithoutFamily_sponsorshipInputSchema)
            ]),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutFamily_sponsorshipInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutFamily_sponsorshipInputSchema)
            ])
        })
        .strict()

export const FamiliesUpdateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
            family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedUpdateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const TenantsUpsertWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutFamily_sponsorshipInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => TenantsUpdateWithoutFamily_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedUpdateWithoutFamily_sponsorshipInputSchema)
            ]),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutFamily_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutFamily_sponsorshipInputSchema)
            ])
        })
        .strict()

export const TenantsUpdateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedUpdateWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Family_furnishingCreateWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingCreateWithoutFurnishingsInput> =
    z
        .object({
            id: z.string(),
            value: z.string(),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutFamily_furnishingInputSchema)
        })
        .strict()

export const Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedCreateWithoutFurnishingsInput> =
    z
        .object({
            id: z.string(),
            family_id: z.string(),
            value: z.string()
        })
        .strict()

export const Family_furnishingCreateOrConnectWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingCreateOrConnectWithoutFurnishingsInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema),
                z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema)
            ])
        })
        .strict()

export const Family_furnishingCreateManyFurnishingsInputEnvelopeSchema: z.ZodType<Prisma.Family_furnishingCreateManyFurnishingsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Family_furnishingCreateManyFurnishingsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Family_furnishingUpsertWithWhereUniqueWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUpsertWithWhereUniqueWithoutFurnishingsInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Family_furnishingUpdateWithoutFurnishingsInputSchema),
                z.lazy(() => Family_furnishingUncheckedUpdateWithoutFurnishingsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Family_furnishingCreateWithoutFurnishingsInputSchema),
                z.lazy(() => Family_furnishingUncheckedCreateWithoutFurnishingsInputSchema)
            ])
        })
        .strict()

export const Family_furnishingUpdateWithWhereUniqueWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUpdateWithWhereUniqueWithoutFurnishingsInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Family_furnishingUpdateWithoutFurnishingsInputSchema),
                z.lazy(() => Family_furnishingUncheckedUpdateWithoutFurnishingsInputSchema)
            ])
        })
        .strict()

export const Family_furnishingUpdateManyWithWhereWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUpdateManyWithWhereWithoutFurnishingsInput> =
    z
        .object({
            where: z.lazy(() => Family_furnishingScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Family_furnishingUpdateManyMutationInputSchema),
                z.lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamily_furnishingInputSchema)
            ])
        })
        .strict()

export const Family_housingCreateWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingCreateWithoutHousingsInput> =
    z
        .object({
            id: z.string(),
            value: z.string(),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutFamily_housingInputSchema)
        })
        .strict()

export const Family_housingUncheckedCreateWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUncheckedCreateWithoutHousingsInput> =
    z
        .object({
            id: z.string(),
            family_id: z.string(),
            value: z.string()
        })
        .strict()

export const Family_housingCreateOrConnectWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingCreateOrConnectWithoutHousingsInput> =
    z
        .object({
            where: z.lazy(() => Family_housingWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Family_housingCreateWithoutHousingsInputSchema),
                z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema)
            ])
        })
        .strict()

export const Family_housingCreateManyHousingsInputEnvelopeSchema: z.ZodType<Prisma.Family_housingCreateManyHousingsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Family_housingCreateManyHousingsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Family_housingUpsertWithWhereUniqueWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUpsertWithWhereUniqueWithoutHousingsInput> =
    z
        .object({
            where: z.lazy(() => Family_housingWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Family_housingUpdateWithoutHousingsInputSchema),
                z.lazy(() => Family_housingUncheckedUpdateWithoutHousingsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Family_housingCreateWithoutHousingsInputSchema),
                z.lazy(() => Family_housingUncheckedCreateWithoutHousingsInputSchema)
            ])
        })
        .strict()

export const Family_housingUpdateWithWhereUniqueWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUpdateWithWhereUniqueWithoutHousingsInput> =
    z
        .object({
            where: z.lazy(() => Family_housingWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Family_housingUpdateWithoutHousingsInputSchema),
                z.lazy(() => Family_housingUncheckedUpdateWithoutHousingsInputSchema)
            ])
        })
        .strict()

export const Family_housingUpdateManyWithWhereWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUpdateManyWithWhereWithoutHousingsInput> =
    z
        .object({
            where: z.lazy(() => Family_housingScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Family_housingUpdateManyMutationInputSchema),
                z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamily_housingInputSchema)
            ])
        })
        .strict()

export const IncomesCreateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesCreateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.string(),
            name: z.string()
        })
        .strict()

export const IncomesUncheckedCreateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesUncheckedCreateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.string(),
            name: z.string()
        })
        .strict()

export const IncomesCreateOrConnectWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesCreateOrConnectWithoutIncome_sponsorInput> =
    z
        .object({
            where: z.lazy(() => IncomesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => IncomesCreateWithoutIncome_sponsorInputSchema),
                z.lazy(() => IncomesUncheckedCreateWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const SponsorsCreateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsCreateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInputSchema).optional(),
            users_sponsors_created_byTousers: z.lazy(
                () => UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInputSchema
            ),
            users_sponsors_deleted_byTousers: z
                .lazy(() => UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsorsInputSchema)
        })
        .strict()

export const SponsorsUncheckedCreateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_by: z.string(),
            deleted_by: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInputSchema)
                .optional()
        })
        .strict()

export const SponsorsCreateOrConnectWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsCreateOrConnectWithoutIncome_sponsorInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutIncome_sponsorInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsCreateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedCreateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutIncome_sponsorInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutIncome_sponsorInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const IncomesUpsertWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesUpsertWithoutIncome_sponsorInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => IncomesUpdateWithoutIncome_sponsorInputSchema),
                z.lazy(() => IncomesUncheckedUpdateWithoutIncome_sponsorInputSchema)
            ]),
            create: z.union([
                z.lazy(() => IncomesCreateWithoutIncome_sponsorInputSchema),
                z.lazy(() => IncomesUncheckedCreateWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const IncomesUpdateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesUpdateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const IncomesUncheckedUpdateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.IncomesUncheckedUpdateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const SponsorsUpsertWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsUpsertWithoutIncome_sponsorInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => SponsorsUpdateWithoutIncome_sponsorInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutIncome_sponsorInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutIncome_sponsorInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsUpdateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            users_sponsors_created_byTousers: z
                .lazy(() => UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            users_sponsors_deleted_byTousers: z
                .lazy(() => UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsorsNestedInputSchema).optional()
        })
        .strict()

export const SponsorsUncheckedUpdateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInputSchema)
                .optional()
        })
        .strict()

export const TenantsUpsertWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutIncome_sponsorInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => TenantsUpdateWithoutIncome_sponsorInputSchema),
                z.lazy(() => TenantsUncheckedUpdateWithoutIncome_sponsorInputSchema)
            ]),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutIncome_sponsorInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const TenantsUpdateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedUpdateWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Income_sponsorCreateWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorCreateWithoutIncomesInput> =
    z
        .object({
            id: z.string(),
            value: z.number(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            sponsors: z.lazy(() => SponsorsCreateNestedOneWithoutIncome_sponsorInputSchema),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutIncome_sponsorInputSchema)
        })
        .strict()

export const Income_sponsorUncheckedCreateWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateWithoutIncomesInput> =
    z
        .object({
            id: z.string(),
            sponsor_id: z.string(),
            tenant_id: z.string(),
            value: z.number(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Income_sponsorCreateOrConnectWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorCreateOrConnectWithoutIncomesInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema),
                z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema)
            ])
        })
        .strict()

export const Income_sponsorCreateManyIncomesInputEnvelopeSchema: z.ZodType<Prisma.Income_sponsorCreateManyIncomesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Income_sponsorCreateManyIncomesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Income_sponsorUpsertWithWhereUniqueWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUpsertWithWhereUniqueWithoutIncomesInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Income_sponsorUpdateWithoutIncomesInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateWithoutIncomesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Income_sponsorCreateWithoutIncomesInputSchema),
                z.lazy(() => Income_sponsorUncheckedCreateWithoutIncomesInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpdateWithWhereUniqueWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUpdateWithWhereUniqueWithoutIncomesInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Income_sponsorUpdateWithoutIncomesInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateWithoutIncomesInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpdateManyWithWhereWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyWithWhereWithoutIncomesInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Income_sponsorUpdateManyMutationInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const Income_sponsorScalarWhereInputSchema: z.ZodType<Prisma.Income_sponsorScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Income_sponsorScalarWhereInputSchema),
                z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Income_sponsorScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Income_sponsorScalarWhereInputSchema),
                z.lazy(() => Income_sponsorScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        income_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        sponsor_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        value: z.union([z.lazy(() => FloatFilterSchema), z.number()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const PermissionsCreateWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateWithoutModel_has_permissionsInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            role_has_permissions: z
                .lazy(() => Role_has_permissionsCreateNestedManyWithoutPermissionsInputSchema)
                .optional()
        })
        .strict()

export const PermissionsUncheckedCreateWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateWithoutModel_has_permissionsInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            role_has_permissions: z
                .lazy(() => Role_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema)
                .optional()
        })
        .strict()

export const PermissionsCreateOrConnectWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateOrConnectWithoutModel_has_permissionsInput> =
    z
        .object({
            where: z.lazy(() => PermissionsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => PermissionsCreateWithoutModel_has_permissionsInputSchema),
                z.lazy(() => PermissionsUncheckedCreateWithoutModel_has_permissionsInputSchema)
            ])
        })
        .strict()

export const PermissionsUpsertWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpsertWithoutModel_has_permissionsInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => PermissionsUpdateWithoutModel_has_permissionsInputSchema),
                z.lazy(() => PermissionsUncheckedUpdateWithoutModel_has_permissionsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => PermissionsCreateWithoutModel_has_permissionsInputSchema),
                z.lazy(() => PermissionsUncheckedCreateWithoutModel_has_permissionsInputSchema)
            ])
        })
        .strict()

export const PermissionsUpdateWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpdateWithoutModel_has_permissionsInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            role_has_permissions: z
                .lazy(() => Role_has_permissionsUpdateManyWithoutPermissionsNestedInputSchema)
                .optional()
        })
        .strict()

export const PermissionsUncheckedUpdateWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateWithoutModel_has_permissionsInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            role_has_permissions: z
                .lazy(() => Role_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema)
                .optional()
        })
        .strict()

export const RolesCreateWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesCreateWithoutModel_has_rolesInput> = z
    .object({
        uuid: z.string(),
        name: z.string(),
        guard_name: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        role_has_permissions: z.lazy(() => Role_has_permissionsCreateNestedManyWithoutRolesInputSchema).optional()
    })
    .strict()

export const RolesUncheckedCreateWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesUncheckedCreateWithoutModel_has_rolesInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            role_has_permissions: z
                .lazy(() => Role_has_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema)
                .optional()
        })
        .strict()

export const RolesCreateOrConnectWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesCreateOrConnectWithoutModel_has_rolesInput> =
    z
        .object({
            where: z.lazy(() => RolesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => RolesCreateWithoutModel_has_rolesInputSchema),
                z.lazy(() => RolesUncheckedCreateWithoutModel_has_rolesInputSchema)
            ])
        })
        .strict()

export const RolesUpsertWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesUpsertWithoutModel_has_rolesInput> = z
    .object({
        update: z.union([
            z.lazy(() => RolesUpdateWithoutModel_has_rolesInputSchema),
            z.lazy(() => RolesUncheckedUpdateWithoutModel_has_rolesInputSchema)
        ]),
        create: z.union([
            z.lazy(() => RolesCreateWithoutModel_has_rolesInputSchema),
            z.lazy(() => RolesUncheckedCreateWithoutModel_has_rolesInputSchema)
        ])
    })
    .strict()

export const RolesUpdateWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesUpdateWithoutModel_has_rolesInput> = z
    .object({
        uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        role_has_permissions: z.lazy(() => Role_has_permissionsUpdateManyWithoutRolesNestedInputSchema).optional()
    })
    .strict()

export const RolesUncheckedUpdateWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateWithoutModel_has_rolesInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            role_has_permissions: z
                .lazy(() => Role_has_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema)
                .optional()
        })
        .strict()

export const OrphansCreateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansCreateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            users_orphans_created_byTousers: z.lazy(
                () => UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInputSchema
            ),
            users_orphans_deleted_byTousers: z
                .lazy(() => UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInputSchema)
                .optional(),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutOrphansInputSchema),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphansInputSchema)
        })
        .strict()

export const OrphansUncheckedCreateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            tenant_id: z.string(),
            family_id: z.string(),
            created_by: z.string(),
            deleted_by: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const OrphansCreateOrConnectWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansCreateOrConnectWithoutOrphan_sponsorshipInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutOrphan_sponsorshipInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedCreateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutOrphan_sponsorshipInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutOrphan_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
            ])
        })
        .strict()

export const OrphansUpsertWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansUpsertWithoutOrphan_sponsorshipInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => OrphansUpdateWithoutOrphan_sponsorshipInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutOrphan_sponsorshipInputSchema)
            ]),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutOrphan_sponsorshipInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansUpdateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            users_orphans_created_byTousers: z
                .lazy(() => UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInputSchema)
                .optional(),
            users_orphans_deleted_byTousers: z
                .lazy(() => UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutOrphansNestedInputSchema).optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphansNestedInputSchema).optional()
        })
        .strict()

export const OrphansUncheckedUpdateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const TenantsUpsertWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutOrphan_sponsorshipInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => TenantsUpdateWithoutOrphan_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedUpdateWithoutOrphan_sponsorshipInputSchema)
            ]),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutOrphan_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutOrphan_sponsorshipInputSchema)
            ])
        })
        .strict()

export const TenantsUpdateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedUpdateWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipCreateWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateWithoutOrphansInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => orphan_sponsorship_typeSchema),
            value: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphan_sponsorshipInputSchema)
        })
        .strict()

export const Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedCreateWithoutOrphansInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => orphan_sponsorship_typeSchema),
            value: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Orphan_sponsorshipCreateOrConnectWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateOrConnectWithoutOrphansInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipCreateManyOrphansInputEnvelopeSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateManyOrphansInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Orphan_sponsorshipCreateManyOrphansInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const UsersCreateWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
        })
        .strict()

export const UsersUncheckedCreateWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutOrphans_orphans_created_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_created_byTousersInputSchema)
            ])
        })
        .strict()

export const UsersCreateWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
        })
        .strict()

export const UsersUncheckedCreateWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutOrphans_orphans_deleted_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const FamiliesCreateWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutOrphansInput> = z
    .object({
        id: z.string(),
        name: z.string(),
        report: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
        family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedCreateWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutOrphansInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutOrphansInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutOrphansInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsCreateWithoutOrphansInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutOrphansInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutOrphansInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutOrphansInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipUpsertWithWhereUniqueWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpsertWithWhereUniqueWithoutOrphansInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Orphan_sponsorshipUpdateWithoutOrphansInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedUpdateWithoutOrphansInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Orphan_sponsorshipCreateWithoutOrphansInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipUpdateWithWhereUniqueWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateWithWhereUniqueWithoutOrphansInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Orphan_sponsorshipUpdateWithoutOrphansInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedUpdateWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipUpdateManyWithWhereWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateManyWithWhereWithoutOrphansInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Orphan_sponsorshipUpdateManyMutationInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphan_sponsorshipInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipScalarWhereInputSchema: z.ZodType<Prisma.Orphan_sponsorshipScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
                z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Orphan_sponsorshipScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
                z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        orphan_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([z.lazy(() => Enumorphan_sponsorship_typeFilterSchema), z.lazy(() => orphan_sponsorship_typeSchema)])
            .optional(),
        value: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const UsersUpsertWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => UsersUpdateWithoutOrphans_orphans_created_byTousersInputSchema),
                z.lazy(() => UsersUncheckedUpdateWithoutOrphans_orphans_created_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => UsersCreateWithoutOrphans_orphans_created_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_created_byTousersInputSchema)
            ])
        })
        .strict()

export const UsersUpdateWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
        })
        .strict()

export const UsersUncheckedUpdateWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const UsersUpsertWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => UsersUpdateWithoutOrphans_orphans_deleted_byTousersInputSchema),
                z.lazy(() => UsersUncheckedUpdateWithoutOrphans_orphans_deleted_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => UsersCreateWithoutOrphans_orphans_deleted_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutOrphans_orphans_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const UsersUpdateWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
        })
        .strict()

export const UsersUncheckedUpdateWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const FamiliesUpsertWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesUpsertWithoutOrphansInput> = z
    .object({
        update: z.union([
            z.lazy(() => FamiliesUpdateWithoutOrphansInputSchema),
            z.lazy(() => FamiliesUncheckedUpdateWithoutOrphansInputSchema)
        ]),
        create: z.union([
            z.lazy(() => FamiliesCreateWithoutOrphansInputSchema),
            z.lazy(() => FamiliesUncheckedCreateWithoutOrphansInputSchema)
        ])
    })
    .strict()

export const FamiliesUpdateWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutOrphansInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
        family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedUpdateWithoutOrphansInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutOrphansInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const TenantsUpsertWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutOrphansInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutOrphansInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutOrphansInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutOrphansInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutOrphansInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutOrphansInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutOrphansInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutOrphansInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Model_has_permissionsCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsCreateWithoutPermissionsInput> =
    z
        .object({
            model_type: z.string(),
            model_uuid: z.string()
        })
        .strict()

export const Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedCreateWithoutPermissionsInput> =
    z
        .object({
            model_type: z.string(),
            model_uuid: z.string()
        })
        .strict()

export const Model_has_permissionsCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsCreateOrConnectWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema),
                z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema)
            ])
        })
        .strict()

export const Model_has_permissionsCreateManyPermissionsInputEnvelopeSchema: z.ZodType<Prisma.Model_has_permissionsCreateManyPermissionsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Model_has_permissionsCreateManyPermissionsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Role_has_permissionsCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateWithoutPermissionsInput> =
    z
        .object({
            roles: z.lazy(() => RolesCreateNestedOneWithoutRole_has_permissionsInputSchema)
        })
        .strict()

export const Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedCreateWithoutPermissionsInput> =
    z
        .object({
            role_id: z.string()
        })
        .strict()

export const Role_has_permissionsCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateOrConnectWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsCreateManyPermissionsInputEnvelopeSchema: z.ZodType<Prisma.Role_has_permissionsCreateManyPermissionsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Role_has_permissionsCreateManyPermissionsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Model_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Model_has_permissionsUpdateWithoutPermissionsInputSchema),
                z.lazy(() => Model_has_permissionsUncheckedUpdateWithoutPermissionsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Model_has_permissionsCreateWithoutPermissionsInputSchema),
                z.lazy(() => Model_has_permissionsUncheckedCreateWithoutPermissionsInputSchema)
            ])
        })
        .strict()

export const Model_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Model_has_permissionsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Model_has_permissionsUpdateWithoutPermissionsInputSchema),
                z.lazy(() => Model_has_permissionsUncheckedUpdateWithoutPermissionsInputSchema)
            ])
        })
        .strict()

export const Model_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUpdateManyWithWhereWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Model_has_permissionsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Model_has_permissionsUpdateManyMutationInputSchema),
                z.lazy(() => Model_has_permissionsUncheckedUpdateManyWithoutModel_has_permissionsInputSchema)
            ])
        })
        .strict()

export const Model_has_permissionsScalarWhereInputSchema: z.ZodType<Prisma.Model_has_permissionsScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Model_has_permissionsScalarWhereInputSchema),
                z.lazy(() => Model_has_permissionsScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Model_has_permissionsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Model_has_permissionsScalarWhereInputSchema),
                z.lazy(() => Model_has_permissionsScalarWhereInputSchema).array()
            ])
            .optional(),
        permission_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        model_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        model_uuid: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional()
    })
    .strict()

export const Role_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUpsertWithWhereUniqueWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Role_has_permissionsUpdateWithoutPermissionsInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedUpdateWithoutPermissionsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Role_has_permissionsCreateWithoutPermissionsInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedCreateWithoutPermissionsInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateWithWhereUniqueWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Role_has_permissionsUpdateWithoutPermissionsInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedUpdateWithoutPermissionsInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateManyWithWhereWithoutPermissionsInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Role_has_permissionsUpdateManyMutationInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedUpdateManyWithoutRole_has_permissionsInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsScalarWhereInputSchema: z.ZodType<Prisma.Role_has_permissionsScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
                z.lazy(() => Role_has_permissionsScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Role_has_permissionsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
                z.lazy(() => Role_has_permissionsScalarWhereInputSchema).array()
            ])
            .optional(),
        permission_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        role_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional()
    })
    .strict()

export const PermissionsCreateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            model_has_permissions: z
                .lazy(() => Model_has_permissionsCreateNestedManyWithoutPermissionsInputSchema)
                .optional()
        })
        .strict()

export const PermissionsUncheckedCreateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            model_has_permissions: z
                .lazy(() => Model_has_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema)
                .optional()
        })
        .strict()

export const PermissionsCreateOrConnectWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateOrConnectWithoutRole_has_permissionsInput> =
    z
        .object({
            where: z.lazy(() => PermissionsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => PermissionsCreateWithoutRole_has_permissionsInputSchema),
                z.lazy(() => PermissionsUncheckedCreateWithoutRole_has_permissionsInputSchema)
            ])
        })
        .strict()

export const RolesCreateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesCreateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            model_has_roles: z.lazy(() => Model_has_rolesCreateNestedManyWithoutRolesInputSchema).optional()
        })
        .strict()

export const RolesUncheckedCreateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesUncheckedCreateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.string(),
            name: z.string(),
            guard_name: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            model_has_roles: z.lazy(() => Model_has_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
        })
        .strict()

export const RolesCreateOrConnectWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesCreateOrConnectWithoutRole_has_permissionsInput> =
    z
        .object({
            where: z.lazy(() => RolesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => RolesCreateWithoutRole_has_permissionsInputSchema),
                z.lazy(() => RolesUncheckedCreateWithoutRole_has_permissionsInputSchema)
            ])
        })
        .strict()

export const PermissionsUpsertWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpsertWithoutRole_has_permissionsInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => PermissionsUpdateWithoutRole_has_permissionsInputSchema),
                z.lazy(() => PermissionsUncheckedUpdateWithoutRole_has_permissionsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => PermissionsCreateWithoutRole_has_permissionsInputSchema),
                z.lazy(() => PermissionsUncheckedCreateWithoutRole_has_permissionsInputSchema)
            ])
        })
        .strict()

export const PermissionsUpdateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpdateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            model_has_permissions: z
                .lazy(() => Model_has_permissionsUpdateManyWithoutPermissionsNestedInputSchema)
                .optional()
        })
        .strict()

export const PermissionsUncheckedUpdateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            model_has_permissions: z
                .lazy(() => Model_has_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema)
                .optional()
        })
        .strict()

export const RolesUpsertWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesUpsertWithoutRole_has_permissionsInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => RolesUpdateWithoutRole_has_permissionsInputSchema),
                z.lazy(() => RolesUncheckedUpdateWithoutRole_has_permissionsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => RolesCreateWithoutRole_has_permissionsInputSchema),
                z.lazy(() => RolesUncheckedCreateWithoutRole_has_permissionsInputSchema)
            ])
        })
        .strict()

export const RolesUpdateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesUpdateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            model_has_roles: z.lazy(() => Model_has_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
        })
        .strict()

export const RolesUncheckedUpdateWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateWithoutRole_has_permissionsInput> =
    z
        .object({
            uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            guard_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            model_has_roles: z.lazy(() => Model_has_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
        })
        .strict()

export const Model_has_rolesCreateWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesCreateWithoutRolesInput> = z
    .object({
        model_type: z.string(),
        model_uuid: z.string()
    })
    .strict()

export const Model_has_rolesUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedCreateWithoutRolesInput> =
    z
        .object({
            model_type: z.string(),
            model_uuid: z.string()
        })
        .strict()

export const Model_has_rolesCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesCreateOrConnectWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema),
                z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema)
            ])
        })
        .strict()

export const Model_has_rolesCreateManyRolesInputEnvelopeSchema: z.ZodType<Prisma.Model_has_rolesCreateManyRolesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Model_has_rolesCreateManyRolesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Role_has_permissionsCreateWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateWithoutRolesInput> =
    z
        .object({
            permissions: z.lazy(() => PermissionsCreateNestedOneWithoutRole_has_permissionsInputSchema)
        })
        .strict()

export const Role_has_permissionsUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedCreateWithoutRolesInput> =
    z
        .object({
            permission_id: z.string()
        })
        .strict()

export const Role_has_permissionsCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateOrConnectWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsCreateManyRolesInputEnvelopeSchema: z.ZodType<Prisma.Role_has_permissionsCreateManyRolesInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Role_has_permissionsCreateManyRolesInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Model_has_rolesUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUpsertWithWhereUniqueWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Model_has_rolesUpdateWithoutRolesInputSchema),
                z.lazy(() => Model_has_rolesUncheckedUpdateWithoutRolesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Model_has_rolesCreateWithoutRolesInputSchema),
                z.lazy(() => Model_has_rolesUncheckedCreateWithoutRolesInputSchema)
            ])
        })
        .strict()

export const Model_has_rolesUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUpdateWithWhereUniqueWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Model_has_rolesWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Model_has_rolesUpdateWithoutRolesInputSchema),
                z.lazy(() => Model_has_rolesUncheckedUpdateWithoutRolesInputSchema)
            ])
        })
        .strict()

export const Model_has_rolesUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUpdateManyWithWhereWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Model_has_rolesScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Model_has_rolesUpdateManyMutationInputSchema),
                z.lazy(() => Model_has_rolesUncheckedUpdateManyWithoutModel_has_rolesInputSchema)
            ])
        })
        .strict()

export const Model_has_rolesScalarWhereInputSchema: z.ZodType<Prisma.Model_has_rolesScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Model_has_rolesScalarWhereInputSchema),
                z.lazy(() => Model_has_rolesScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Model_has_rolesScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Model_has_rolesScalarWhereInputSchema),
                z.lazy(() => Model_has_rolesScalarWhereInputSchema).array()
            ])
            .optional(),
        role_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        model_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        model_uuid: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional()
    })
    .strict()

export const Role_has_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUpsertWithWhereUniqueWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Role_has_permissionsUpdateWithoutRolesInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedUpdateWithoutRolesInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Role_has_permissionsCreateWithoutRolesInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedCreateWithoutRolesInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateWithWhereUniqueWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Role_has_permissionsUpdateWithoutRolesInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedUpdateWithoutRolesInputSchema)
            ])
        })
        .strict()

export const Role_has_permissionsUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateManyWithWhereWithoutRolesInput> =
    z
        .object({
            where: z.lazy(() => Role_has_permissionsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Role_has_permissionsUpdateManyMutationInputSchema),
                z.lazy(() => Role_has_permissionsUncheckedUpdateManyWithoutRole_has_permissionsInputSchema)
            ])
        })
        .strict()

export const FamiliesCreateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
            family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedCreateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutSecond_sponsorsInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutSecond_sponsorsInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutSecond_sponsorsInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsCreateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedCreateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutSecond_sponsorsInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSecond_sponsorsInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSecond_sponsorsInputSchema)
            ])
        })
        .strict()

export const FamiliesUpsertWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesUpsertWithoutSecond_sponsorsInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => FamiliesUpdateWithoutSecond_sponsorsInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateWithoutSecond_sponsorsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutSecond_sponsorsInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutSecond_sponsorsInputSchema)
            ])
        })
        .strict()

export const FamiliesUpdateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
            family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedUpdateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const TenantsUpsertWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutSecond_sponsorsInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => TenantsUpdateWithoutSecond_sponsorsInputSchema),
                z.lazy(() => TenantsUncheckedUpdateWithoutSecond_sponsorsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSecond_sponsorsInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSecond_sponsorsInputSchema)
            ])
        })
        .strict()

export const TenantsUpdateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedUpdateWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const UsersCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersCreateWithoutSessionsInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
            .optional(),
        settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
    })
    .strict()

export const UsersUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutSessionsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutSessionsInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutSessionsInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema)
            ])
        })
        .strict()

export const UsersUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutSessionsInput> = z
    .object({
        update: z.union([
            z.lazy(() => UsersUpdateWithoutSessionsInputSchema),
            z.lazy(() => UsersUncheckedUpdateWithoutSessionsInputSchema)
        ]),
        create: z.union([
            z.lazy(() => UsersCreateWithoutSessionsInputSchema),
            z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema)
        ])
    })
    .strict()

export const UsersUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutSessionsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
    })
    .strict()

export const UsersUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutSessionsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateWithoutSettingsInputSchema: z.ZodType<Prisma.UsersCreateWithoutSettingsInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
    })
    .strict()

export const UsersUncheckedCreateWithoutSettingsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutSettingsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutSettingsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutSettingsInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutSettingsInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutSettingsInputSchema)
            ])
        })
        .strict()

export const UsersUpsertWithoutSettingsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutSettingsInput> = z
    .object({
        update: z.union([
            z.lazy(() => UsersUpdateWithoutSettingsInputSchema),
            z.lazy(() => UsersUncheckedUpdateWithoutSettingsInputSchema)
        ]),
        create: z.union([
            z.lazy(() => UsersCreateWithoutSettingsInputSchema),
            z.lazy(() => UsersUncheckedCreateWithoutSettingsInputSchema)
        ])
    })
    .strict()

export const UsersUpdateWithoutSettingsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutSettingsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
    })
    .strict()

export const UsersUncheckedUpdateWithoutSettingsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutSettingsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const SponsorsCreateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsCreateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutSponsorsInputSchema).optional(),
            users_sponsors_created_byTousers: z.lazy(
                () => UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInputSchema
            ),
            users_sponsors_deleted_byTousers: z
                .lazy(() => UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsorsInputSchema)
        })
        .strict()

export const SponsorsUncheckedCreateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_by: z.string(),
            deleted_by: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInputSchema).optional()
        })
        .strict()

export const SponsorsCreateOrConnectWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsCreateOrConnectWithoutSponsor_sponsorshipInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutSponsor_sponsorshipInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedCreateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutSponsor_sponsorshipInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSponsor_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
            ])
        })
        .strict()

export const SponsorsUpsertWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsUpsertWithoutSponsor_sponsorshipInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => SponsorsUpdateWithoutSponsor_sponsorshipInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutSponsor_sponsorshipInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutSponsor_sponsorshipInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsUpdateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            users_sponsors_created_byTousers: z
                .lazy(() => UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            users_sponsors_deleted_byTousers: z
                .lazy(() => UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsorsNestedInputSchema).optional()
        })
        .strict()

export const SponsorsUncheckedUpdateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInputSchema).optional()
        })
        .strict()

export const TenantsUpsertWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutSponsor_sponsorshipInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => TenantsUpdateWithoutSponsor_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedUpdateWithoutSponsor_sponsorshipInputSchema)
            ]),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSponsor_sponsorshipInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSponsor_sponsorshipInputSchema)
            ])
        })
        .strict()

export const TenantsUpdateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsUncheckedUpdateWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Income_sponsorCreateWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorCreateWithoutSponsorsInput> =
    z
        .object({
            id: z.string(),
            value: z.number(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            incomes: z.lazy(() => IncomesCreateNestedOneWithoutIncome_sponsorInputSchema),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutIncome_sponsorInputSchema)
        })
        .strict()

export const Income_sponsorUncheckedCreateWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateWithoutSponsorsInput> =
    z
        .object({
            id: z.string(),
            income_id: z.string(),
            tenant_id: z.string(),
            value: z.number(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Income_sponsorCreateOrConnectWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorCreateOrConnectWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema),
                z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorCreateManySponsorsInputEnvelopeSchema: z.ZodType<Prisma.Income_sponsorCreateManySponsorsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Income_sponsorCreateManySponsorsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Sponsor_sponsorshipCreateWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateWithoutSponsorsInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsor_sponsorshipInputSchema)
        })
        .strict()

export const Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateOrConnectWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipCreateManySponsorsInputEnvelopeSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateManySponsorsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Sponsor_sponsorshipCreateManySponsorsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const UsersCreateWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
        })
        .strict()

export const UsersUncheckedCreateWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutSponsors_sponsors_created_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_created_byTousersInputSchema)
            ])
        })
        .strict()

export const UsersCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutUsersInputSchema)
        })
        .strict()

export const UsersUncheckedCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsCreateWithoutSponsorsInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutSponsorsInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSponsorsInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpsertWithWhereUniqueWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUpsertWithWhereUniqueWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Income_sponsorUpdateWithoutSponsorsInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateWithoutSponsorsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Income_sponsorCreateWithoutSponsorsInputSchema),
                z.lazy(() => Income_sponsorUncheckedCreateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpdateWithWhereUniqueWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUpdateWithWhereUniqueWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Income_sponsorUpdateWithoutSponsorsInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpdateManyWithWhereWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyWithWhereWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Income_sponsorUpdateManyMutationInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipUpsertWithWhereUniqueWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpsertWithWhereUniqueWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Sponsor_sponsorshipUpdateWithoutSponsorsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedUpdateWithoutSponsorsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Sponsor_sponsorshipCreateWithoutSponsorsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipUpdateWithWhereUniqueWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateWithWhereUniqueWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Sponsor_sponsorshipUpdateWithoutSponsorsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedUpdateWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipUpdateManyWithWhereWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyWithWhereWithoutSponsorsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Sponsor_sponsorshipUpdateManyMutationInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsor_sponsorshipInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipScalarWhereInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
                z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => Sponsor_sponsorshipScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
                z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        sponsor_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([
                z.lazy(() => Enumsponsor_sponsorship_typeFilterSchema),
                z.lazy(() => sponsor_sponsorship_typeSchema)
            ])
            .optional(),
        value: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const UsersUpsertWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => UsersUpdateWithoutSponsors_sponsors_created_byTousersInputSchema),
                z.lazy(() => UsersUncheckedUpdateWithoutSponsors_sponsors_created_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => UsersCreateWithoutSponsors_sponsors_created_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_created_byTousersInputSchema)
            ])
        })
        .strict()

export const UsersUpdateWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
        })
        .strict()

export const UsersUncheckedUpdateWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const UsersUpsertWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            update: z.union([
                z.lazy(() => UsersUpdateWithoutSponsors_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => UsersUncheckedUpdateWithoutSponsors_sponsors_deleted_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => UsersCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutSponsors_sponsors_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const UsersUpdateWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutUsersNestedInputSchema).optional()
        })
        .strict()

export const UsersUncheckedUpdateWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const TenantsUpsertWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutSponsorsInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutSponsorsInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutSponsorsInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutSponsorsInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutSponsorsInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutSponsorsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutSponsorsInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutSponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const TenantsCreateWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsCreateWithoutSponsorshipsInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutSponsorshipsInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutSponsorshipsInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSponsorshipsInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSponsorshipsInputSchema)
            ])
        })
        .strict()

export const TenantsUpsertWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutSponsorshipsInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutSponsorshipsInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutSponsorshipsInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutSponsorshipsInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutSponsorshipsInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutSponsorshipsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutSponsorshipsInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutSponsorshipsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const FamiliesCreateWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutSpousesInput> = z
    .object({
        id: z.string(),
        name: z.string(),
        report: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        tenants: z.lazy(() => TenantsCreateNestedOneWithoutFamiliesInputSchema),
        family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedCreateWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutSpousesInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutSpousesInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutSpousesInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutSpousesInputSchema)
            ])
        })
        .strict()

export const TenantsCreateWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsCreateWithoutSpousesInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        users: z.lazy(() => UsersCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutSpousesInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutSpousesInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutSpousesInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutSpousesInputSchema)
            ])
        })
        .strict()

export const FamiliesUpsertWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesUpsertWithoutSpousesInput> = z
    .object({
        update: z.union([
            z.lazy(() => FamiliesUpdateWithoutSpousesInputSchema),
            z.lazy(() => FamiliesUncheckedUpdateWithoutSpousesInputSchema)
        ]),
        create: z.union([
            z.lazy(() => FamiliesCreateWithoutSpousesInputSchema),
            z.lazy(() => FamiliesUncheckedCreateWithoutSpousesInputSchema)
        ])
    })
    .strict()

export const FamiliesUpdateWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutSpousesInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamiliesNestedInputSchema).optional(),
        family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedUpdateWithoutSpousesInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutSpousesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const TenantsUpsertWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutSpousesInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutSpousesInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutSpousesInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutSpousesInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutSpousesInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutSpousesInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        users: z.lazy(() => UsersUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutSpousesInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutSpousesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            users: z.lazy(() => UsersUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const BenefactorsCreateWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const BenefactorsUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const BenefactorsCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => BenefactorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema),
                z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const BenefactorsCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.BenefactorsCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => BenefactorsCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const DomainsCreateWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        domain: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const DomainsUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            domain: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const DomainsCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => DomainsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => DomainsCreateWithoutTenantsInputSchema),
                z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const DomainsCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.DomainsCreateManyTenantsInputEnvelope> = z
    .object({
        data: z.lazy(() => DomainsCreateManyTenantsInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const FamiliesCreateWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        name: z.string(),
        report: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        family_furnishing: z.lazy(() => Family_furnishingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingCreateNestedManyWithoutFamiliesInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutFamiliesInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutFamiliesInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutFamiliesInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutFamiliesInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            name: z.string(),
            report: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutFamiliesInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutFamiliesInputSchema).optional()
        })
        .strict()

export const FamiliesCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutTenantsInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const FamiliesCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.FamiliesCreateManyTenantsInputEnvelope> = z
    .object({
        data: z.lazy(() => FamiliesCreateManyTenantsInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const Family_sponsorshipCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => family_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutFamily_sponsorshipInputSchema)
        })
        .strict()

export const Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            family_id: z.string(),
            type: z.lazy(() => family_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Family_sponsorshipCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.Family_sponsorshipCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Family_sponsorshipCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Income_sponsorCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            value: z.number(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            incomes: z.lazy(() => IncomesCreateNestedOneWithoutIncome_sponsorInputSchema),
            sponsors: z.lazy(() => SponsorsCreateNestedOneWithoutIncome_sponsorInputSchema)
        })
        .strict()

export const Income_sponsorUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            income_id: z.string(),
            sponsor_id: z.string(),
            value: z.number(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Income_sponsorCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema),
                z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.Income_sponsorCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Income_sponsorCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Orphan_sponsorshipCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => orphan_sponsorship_typeSchema),
            value: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans: z.lazy(() => OrphansCreateNestedOneWithoutOrphan_sponsorshipInputSchema)
        })
        .strict()

export const Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            orphan_id: z.string(),
            type: z.lazy(() => orphan_sponsorship_typeSchema),
            value: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Orphan_sponsorshipCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Orphan_sponsorshipCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const OrphansCreateWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutOrphansInputSchema).optional(),
        users_orphans_created_byTousers: z.lazy(
            () => UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInputSchema
        ),
        users_orphans_deleted_byTousers: z
            .lazy(() => UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInputSchema)
            .optional(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutOrphansInputSchema)
    })
    .strict()

export const OrphansUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            family_id: z.string(),
            created_by: z.string(),
            deleted_by: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInputSchema)
                .optional()
        })
        .strict()

export const OrphansCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutTenantsInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const OrphansCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.OrphansCreateManyTenantsInputEnvelope> = z
    .object({
        data: z.lazy(() => OrphansCreateManyTenantsInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const Second_sponsorsCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            degree_of_kinship: z.string(),
            phone_number: z.string(),
            address: z.string(),
            income: z.number(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutSecond_sponsorsInputSchema)
        })
        .strict()

export const Second_sponsorsUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            degree_of_kinship: z.string(),
            phone_number: z.string(),
            address: z.string(),
            income: z.number(),
            family_id: z.string(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Second_sponsorsCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema),
                z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.Second_sponsorsCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Second_sponsorsCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const Sponsor_sponsorshipCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            sponsors: z.lazy(() => SponsorsCreateNestedOneWithoutSponsor_sponsorshipInputSchema)
        })
        .strict()

export const Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            sponsor_id: z.string(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Sponsor_sponsorshipCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => Sponsor_sponsorshipCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const SponsorsCreateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        zone_id: z.string(),
        file_number: z.number(),
        start_date: z.coerce.date(),
        name: z.string(),
        address: z.string(),
        phone_number: z.string(),
        sponsorship_type: z.string(),
        birth_date: z.coerce.date(),
        father_name: z.string(),
        mother_name: z.string(),
        birth_certificate_number: z.string(),
        academic_level: z.string(),
        function: z.string(),
        health_status: z.string(),
        diploma: z.string().optional().nullable(),
        card_number: z.string().optional().nullable(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutSponsorsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInputSchema).optional(),
        users_sponsors_created_byTousers: z.lazy(
            () => UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInputSchema
        ),
        users_sponsors_deleted_byTousers: z
            .lazy(() => UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInputSchema)
            .optional()
    })
    .strict()

export const SponsorsUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            created_by: z.string(),
            deleted_by: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInputSchema)
                .optional()
        })
        .strict()

export const SponsorsCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutTenantsInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SponsorsCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.SponsorsCreateManyTenantsInputEnvelope> = z
    .object({
        data: z.lazy(() => SponsorsCreateManyTenantsInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const SponsorshipsCreateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        type: z.lazy(() => sponsorship_typeSchema),
        name: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SponsorshipsUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            type: z.lazy(() => sponsorship_typeSchema),
            name: z.string(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SponsorshipsCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorshipsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema),
                z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SponsorshipsCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.SponsorshipsCreateManyTenantsInputEnvelope> =
    z
        .object({
            data: z.lazy(() => SponsorshipsCreateManyTenantsInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const SpousesCreateWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        families: z.lazy(() => FamiliesCreateNestedOneWithoutSpousesInputSchema)
    })
    .strict()

export const SpousesUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            death_date: z.coerce.date(),
            function: z.string(),
            income: z.number(),
            family_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SpousesCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SpousesWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SpousesCreateWithoutTenantsInputSchema),
                z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SpousesCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.SpousesCreateManyTenantsInputEnvelope> = z
    .object({
        data: z.lazy(() => SpousesCreateManyTenantsInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const UsersCreateWithoutTenantsInputSchema: z.ZodType<Prisma.UsersCreateWithoutTenantsInput> = z
    .object({
        id: z.string(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsersInputSchema).optional(),
        settings: z.lazy(() => SettingsCreateNestedManyWithoutUsersInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
            .optional()
    })
    .strict()

export const UsersUncheckedCreateWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutTenantsInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            phone: z.string(),
            email: z.string(),
            email_verified_at: z.coerce.date().optional().nullable(),
            password: z.string(),
            remember_token: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_created_byTousersInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedCreateNestedManyWithoutUsers_orphans_deleted_byTousersInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_created_byTousersInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedCreateNestedManyWithoutUsers_sponsors_deleted_byTousersInputSchema)
                .optional()
        })
        .strict()

export const UsersCreateOrConnectWithoutTenantsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => UsersCreateWithoutTenantsInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const UsersCreateManyTenantsInputEnvelopeSchema: z.ZodType<Prisma.UsersCreateManyTenantsInputEnvelope> = z
    .object({
        data: z.lazy(() => UsersCreateManyTenantsInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const BenefactorsUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => BenefactorsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => BenefactorsUpdateWithoutTenantsInputSchema),
                z.lazy(() => BenefactorsUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => BenefactorsCreateWithoutTenantsInputSchema),
                z.lazy(() => BenefactorsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const BenefactorsUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => BenefactorsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => BenefactorsUpdateWithoutTenantsInputSchema),
                z.lazy(() => BenefactorsUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const BenefactorsUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => BenefactorsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => BenefactorsUpdateManyMutationInputSchema),
                z.lazy(() => BenefactorsUncheckedUpdateManyWithoutBenefactorsInputSchema)
            ])
        })
        .strict()

export const BenefactorsScalarWhereInputSchema: z.ZodType<Prisma.BenefactorsScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => BenefactorsScalarWhereInputSchema),
                z.lazy(() => BenefactorsScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => BenefactorsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => BenefactorsScalarWhereInputSchema),
                z.lazy(() => BenefactorsScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const DomainsUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => DomainsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => DomainsUpdateWithoutTenantsInputSchema),
                z.lazy(() => DomainsUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => DomainsCreateWithoutTenantsInputSchema),
                z.lazy(() => DomainsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const DomainsUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => DomainsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => DomainsUpdateWithoutTenantsInputSchema),
                z.lazy(() => DomainsUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const DomainsUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => DomainsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => DomainsUpdateManyMutationInputSchema),
                z.lazy(() => DomainsUncheckedUpdateManyWithoutDomainsInputSchema)
            ])
        })
        .strict()

export const DomainsScalarWhereInputSchema: z.ZodType<Prisma.DomainsScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => DomainsScalarWhereInputSchema), z.lazy(() => DomainsScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => DomainsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => DomainsScalarWhereInputSchema), z.lazy(() => DomainsScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        domain: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const FamiliesUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => FamiliesUpdateWithoutTenantsInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => FamiliesCreateWithoutTenantsInputSchema),
                z.lazy(() => FamiliesUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const FamiliesUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => FamiliesWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => FamiliesUpdateWithoutTenantsInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const FamiliesUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => FamiliesScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => FamiliesUpdateManyMutationInputSchema),
                z.lazy(() => FamiliesUncheckedUpdateManyWithoutFamiliesInputSchema)
            ])
        })
        .strict()

export const FamiliesScalarWhereInputSchema: z.ZodType<Prisma.FamiliesScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => FamiliesScalarWhereInputSchema), z.lazy(() => FamiliesScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => FamiliesScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => FamiliesScalarWhereInputSchema), z.lazy(() => FamiliesScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        report: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const Family_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Family_sponsorshipUpdateWithoutTenantsInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Family_sponsorshipCreateWithoutTenantsInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Family_sponsorshipUpdateWithoutTenantsInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Family_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Family_sponsorshipScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Family_sponsorshipUpdateManyMutationInputSchema),
                z.lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamily_sponsorshipInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Income_sponsorUpdateWithoutTenantsInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Income_sponsorCreateWithoutTenantsInputSchema),
                z.lazy(() => Income_sponsorUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Income_sponsorUpdateWithoutTenantsInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Income_sponsorUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Income_sponsorScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Income_sponsorUpdateManyMutationInputSchema),
                z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutIncome_sponsorInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Orphan_sponsorshipUpdateWithoutTenantsInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Orphan_sponsorshipCreateWithoutTenantsInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Orphan_sponsorshipUpdateWithoutTenantsInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Orphan_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Orphan_sponsorshipScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Orphan_sponsorshipUpdateManyMutationInputSchema),
                z.lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphan_sponsorshipInputSchema)
            ])
        })
        .strict()

export const OrphansUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => OrphansUpdateWithoutTenantsInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutTenantsInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateWithoutTenantsInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => OrphansScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateManyMutationInputSchema),
                z.lazy(() => OrphansUncheckedUpdateManyWithoutOrphansInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Second_sponsorsUpdateWithoutTenantsInputSchema),
                z.lazy(() => Second_sponsorsUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Second_sponsorsCreateWithoutTenantsInputSchema),
                z.lazy(() => Second_sponsorsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Second_sponsorsUpdateWithoutTenantsInputSchema),
                z.lazy(() => Second_sponsorsUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Second_sponsorsUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Second_sponsorsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Second_sponsorsUpdateManyMutationInputSchema),
                z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutSecond_sponsorsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => Sponsor_sponsorshipUpdateWithoutTenantsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => Sponsor_sponsorshipCreateWithoutTenantsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => Sponsor_sponsorshipUpdateWithoutTenantsInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const Sponsor_sponsorshipUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => Sponsor_sponsorshipScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => Sponsor_sponsorshipUpdateManyMutationInputSchema),
                z.lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsor_sponsorshipInputSchema)
            ])
        })
        .strict()

export const SponsorsUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SponsorsUpdateWithoutTenantsInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutTenantsInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SponsorsUpdateWithoutTenantsInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SponsorsUpdateManyMutationInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateManyWithoutSponsorsInputSchema)
            ])
        })
        .strict()

export const SponsorsScalarWhereInputSchema: z.ZodType<Prisma.SponsorsScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SponsorsScalarWhereInputSchema), z.lazy(() => SponsorsScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SponsorsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SponsorsScalarWhereInputSchema), z.lazy(() => SponsorsScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        zone_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        file_number: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional(),
        start_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        address: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        phone_number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        sponsorship_type: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_date: z.union([z.lazy(() => DateTimeFilterSchema), z.coerce.date()]).optional(),
        father_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        mother_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        birth_certificate_number: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        academic_level: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        function: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        health_status: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        diploma: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        card_number: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_by: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        deleted_by: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorshipsUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorshipsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SponsorshipsUpdateWithoutTenantsInputSchema),
                z.lazy(() => SponsorshipsUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SponsorshipsCreateWithoutTenantsInputSchema),
                z.lazy(() => SponsorshipsUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SponsorshipsUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorshipsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SponsorshipsUpdateWithoutTenantsInputSchema),
                z.lazy(() => SponsorshipsUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SponsorshipsUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SponsorshipsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SponsorshipsUpdateManyMutationInputSchema),
                z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutSponsorshipsInputSchema)
            ])
        })
        .strict()

export const SponsorshipsScalarWhereInputSchema: z.ZodType<Prisma.SponsorshipsScalarWhereInput> = z
    .object({
        AND: z
            .union([
                z.lazy(() => SponsorshipsScalarWhereInputSchema),
                z.lazy(() => SponsorshipsScalarWhereInputSchema).array()
            ])
            .optional(),
        OR: z
            .lazy(() => SponsorshipsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([
                z.lazy(() => SponsorshipsScalarWhereInputSchema),
                z.lazy(() => SponsorshipsScalarWhereInputSchema).array()
            ])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        type: z
            .union([z.lazy(() => Enumsponsorship_typeFilterSchema), z.lazy(() => sponsorship_typeSchema)])
            .optional(),
        name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        deleted_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const SpousesUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SpousesWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SpousesUpdateWithoutTenantsInputSchema),
                z.lazy(() => SpousesUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SpousesCreateWithoutTenantsInputSchema),
                z.lazy(() => SpousesUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SpousesUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SpousesWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SpousesUpdateWithoutTenantsInputSchema),
                z.lazy(() => SpousesUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const SpousesUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => SpousesScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SpousesUpdateManyMutationInputSchema),
                z.lazy(() => SpousesUncheckedUpdateManyWithoutSpousesInputSchema)
            ])
        })
        .strict()

export const UsersUpsertWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUpsertWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => UsersUpdateWithoutTenantsInputSchema),
                z.lazy(() => UsersUncheckedUpdateWithoutTenantsInputSchema)
            ]),
            create: z.union([
                z.lazy(() => UsersCreateWithoutTenantsInputSchema),
                z.lazy(() => UsersUncheckedCreateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const UsersUpdateWithWhereUniqueWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUpdateWithWhereUniqueWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => UsersWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => UsersUpdateWithoutTenantsInputSchema),
                z.lazy(() => UsersUncheckedUpdateWithoutTenantsInputSchema)
            ])
        })
        .strict()

export const UsersUpdateManyWithWhereWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUpdateManyWithWhereWithoutTenantsInput> =
    z
        .object({
            where: z.lazy(() => UsersScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => UsersUpdateManyMutationInputSchema),
                z.lazy(() => UsersUncheckedUpdateManyWithoutUsersInputSchema)
            ])
        })
        .strict()

export const UsersScalarWhereInputSchema: z.ZodType<Prisma.UsersScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => UsersScalarWhereInputSchema), z.lazy(() => UsersScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => UsersScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => UsersScalarWhereInputSchema), z.lazy(() => UsersScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        first_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_name: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        phone: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        email: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        email_verified_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        password: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        remember_token: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        tenant_id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutOrphansInputSchema).optional(),
            users_orphans_deleted_byTousers: z
                .lazy(() => UsersCreateNestedOneWithoutOrphans_orphans_deleted_byTousersInputSchema)
                .optional(),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutOrphansInputSchema),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphansInputSchema)
        })
        .strict()

export const OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            tenant_id: z.string(),
            family_id: z.string(),
            deleted_by: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInputSchema)
                .optional()
        })
        .strict()

export const OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateOrConnectWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansCreateManyUsers_orphans_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.OrphansCreateManyUsers_orphans_created_byTousersInputEnvelope> =
    z
        .object({
            data: z.lazy(() => OrphansCreateManyUsers_orphans_created_byTousersInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutOrphansInputSchema).optional(),
            users_orphans_created_byTousers: z.lazy(
                () => UsersCreateNestedOneWithoutOrphans_orphans_created_byTousersInputSchema
            ),
            families: z.lazy(() => FamiliesCreateNestedOneWithoutOrphansInputSchema),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutOrphansInputSchema)
        })
        .strict()

export const OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            tenant_id: z.string(),
            family_id: z.string(),
            created_by: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutOrphansInputSchema)
                .optional()
        })
        .strict()

export const OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateOrConnectWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansCreateManyUsers_orphans_deleted_byTousersInputEnvelopeSchema: z.ZodType<Prisma.OrphansCreateManyUsers_orphans_deleted_byTousersInputEnvelope> =
    z
        .object({
            data: z.lazy(() => OrphansCreateManyUsers_orphans_deleted_byTousersInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const SessionsCreateWithoutUsersInputSchema: z.ZodType<Prisma.SessionsCreateWithoutUsersInput> = z
    .object({
        id: z.string(),
        ip_address: z.string().optional().nullable(),
        user_agent: z.string().optional().nullable(),
        payload: z.string(),
        last_activity: z.number()
    })
    .strict()

export const SessionsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUncheckedCreateWithoutUsersInput> =
    z
        .object({
            id: z.string(),
            ip_address: z.string().optional().nullable(),
            user_agent: z.string().optional().nullable(),
            payload: z.string(),
            last_activity: z.number()
        })
        .strict()

export const SessionsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.SessionsCreateOrConnectWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SessionsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SessionsCreateWithoutUsersInputSchema),
                z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const SessionsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.SessionsCreateManyUsersInputEnvelope> = z
    .object({
        data: z.lazy(() => SessionsCreateManyUsersInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const SettingsCreateWithoutUsersInputSchema: z.ZodType<Prisma.SettingsCreateWithoutUsersInput> = z
    .object({
        id: z.string(),
        theme: z.lazy(() => themeSchema),
        color_scheme: z.lazy(() => color_schemeSchema),
        layout: z.lazy(() => layoutSchema),
        appearance: z.lazy(() => appearanceSchema),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SettingsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUncheckedCreateWithoutUsersInput> =
    z
        .object({
            id: z.string(),
            theme: z.lazy(() => themeSchema),
            color_scheme: z.lazy(() => color_schemeSchema),
            layout: z.lazy(() => layoutSchema),
            appearance: z.lazy(() => appearanceSchema),
            notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SettingsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.SettingsCreateOrConnectWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SettingsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SettingsCreateWithoutUsersInputSchema),
                z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const SettingsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.SettingsCreateManyUsersInputEnvelope> = z
    .object({
        data: z.lazy(() => SettingsCreateManyUsersInputSchema).array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutSponsorsInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInputSchema).optional(),
            users_sponsors_deleted_byTousers: z
                .lazy(() => UsersCreateNestedOneWithoutSponsors_sponsors_deleted_byTousersInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsorsInputSchema)
        })
        .strict()

export const SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            tenant_id: z.string(),
            deleted_by: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInputSchema)
                .optional()
        })
        .strict()

export const SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateOrConnectWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsCreateManyUsers_sponsors_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.SponsorsCreateManyUsers_sponsors_created_byTousersInputEnvelope> =
    z
        .object({
            data: z.lazy(() => SponsorsCreateManyUsers_sponsors_created_byTousersInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutSponsorsInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutSponsorsInputSchema).optional(),
            users_sponsors_created_byTousers: z.lazy(
                () => UsersCreateNestedOneWithoutSponsors_sponsors_created_byTousersInputSchema
            ),
            tenants: z.lazy(() => TenantsCreateNestedOneWithoutSponsorsInputSchema)
        })
        .strict()

export const SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.string(),
            zone_id: z.string(),
            file_number: z.number(),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_by: z.string(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutSponsorsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutSponsorsInputSchema)
                .optional()
        })
        .strict()

export const SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateOrConnectWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsCreateManyUsers_sponsors_deleted_byTousersInputEnvelopeSchema: z.ZodType<Prisma.SponsorsCreateManyUsers_sponsors_deleted_byTousersInputEnvelope> =
    z
        .object({
            data: z.lazy(() => SponsorsCreateManyUsers_sponsors_deleted_byTousersInputSchema).array(),
            skipDuplicates: z.boolean().optional()
        })
        .strict()

export const TenantsCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantsCreateWithoutUsersInput> = z
    .object({
        id: z.string(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable(),
        benefactors: z.lazy(() => BenefactorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        domains: z.lazy(() => DomainsCreateNestedManyWithoutTenantsInputSchema).optional(),
        families: z.lazy(() => FamiliesCreateNestedManyWithoutTenantsInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        orphans: z.lazy(() => OrphansCreateNestedManyWithoutTenantsInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsCreateNestedManyWithoutTenantsInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsCreateNestedManyWithoutTenantsInputSchema).optional(),
        spouses: z.lazy(() => SpousesCreateNestedManyWithoutTenantsInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.TenantsUncheckedCreateWithoutUsersInput> =
    z
        .object({
            id: z.string(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedCreateNestedManyWithoutTenantsInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedCreateNestedManyWithoutTenantsInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedCreateNestedManyWithoutTenantsInputSchema).optional()
        })
        .strict()

export const TenantsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.TenantsCreateOrConnectWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => TenantsWhereUniqueInputSchema),
            create: z.union([
                z.lazy(() => TenantsCreateWithoutUsersInputSchema),
                z.lazy(() => TenantsUncheckedCreateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const OrphansUpsertWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUpsertWithWhereUniqueWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => OrphansUpdateWithoutUsers_orphans_created_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutUsers_orphans_created_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutUsers_orphans_created_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_created_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateWithWhereUniqueWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUpdateWithWhereUniqueWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateWithoutUsers_orphans_created_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutUsers_orphans_created_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateManyWithWhereWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithWhereWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateManyMutationInputSchema),
                z.lazy(() => OrphansUncheckedUpdateManyWithoutOrphans_orphans_created_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansUpsertWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUpsertWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => OrphansUpdateWithoutUsers_orphans_deleted_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutUsers_orphans_deleted_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => OrphansCreateWithoutUsers_orphans_deleted_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedCreateWithoutUsers_orphans_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUpdateWithWhereUniqueWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateWithoutUsers_orphans_deleted_byTousersInputSchema),
                z.lazy(() => OrphansUncheckedUpdateWithoutUsers_orphans_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const OrphansUpdateManyWithWhereWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUpdateManyWithWhereWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => OrphansScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => OrphansUpdateManyMutationInputSchema),
                z.lazy(() => OrphansUncheckedUpdateManyWithoutOrphans_orphans_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const SessionsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUpsertWithWhereUniqueWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SessionsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SessionsUpdateWithoutUsersInputSchema),
                z.lazy(() => SessionsUncheckedUpdateWithoutUsersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SessionsCreateWithoutUsersInputSchema),
                z.lazy(() => SessionsUncheckedCreateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const SessionsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUpdateWithWhereUniqueWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SessionsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SessionsUpdateWithoutUsersInputSchema),
                z.lazy(() => SessionsUncheckedUpdateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const SessionsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUpdateManyWithWhereWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SessionsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SessionsUpdateManyMutationInputSchema),
                z.lazy(() => SessionsUncheckedUpdateManyWithoutSessionsInputSchema)
            ])
        })
        .strict()

export const SessionsScalarWhereInputSchema: z.ZodType<Prisma.SessionsScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SessionsScalarWhereInputSchema), z.lazy(() => SessionsScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SessionsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SessionsScalarWhereInputSchema), z.lazy(() => SessionsScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        user_id: z
            .union([z.lazy(() => UuidNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        ip_address: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.lazy(() => StringNullableFilterSchema), z.string()])
            .optional()
            .nullable(),
        payload: z.union([z.lazy(() => StringFilterSchema), z.string()]).optional(),
        last_activity: z.union([z.lazy(() => IntFilterSchema), z.number()]).optional()
    })
    .strict()

export const SettingsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUpsertWithWhereUniqueWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SettingsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SettingsUpdateWithoutUsersInputSchema),
                z.lazy(() => SettingsUncheckedUpdateWithoutUsersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SettingsCreateWithoutUsersInputSchema),
                z.lazy(() => SettingsUncheckedCreateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const SettingsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUpdateWithWhereUniqueWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SettingsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SettingsUpdateWithoutUsersInputSchema),
                z.lazy(() => SettingsUncheckedUpdateWithoutUsersInputSchema)
            ])
        })
        .strict()

export const SettingsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUpdateManyWithWhereWithoutUsersInput> =
    z
        .object({
            where: z.lazy(() => SettingsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SettingsUpdateManyMutationInputSchema),
                z.lazy(() => SettingsUncheckedUpdateManyWithoutSettingsInputSchema)
            ])
        })
        .strict()

export const SettingsScalarWhereInputSchema: z.ZodType<Prisma.SettingsScalarWhereInput> = z
    .object({
        AND: z
            .union([z.lazy(() => SettingsScalarWhereInputSchema), z.lazy(() => SettingsScalarWhereInputSchema).array()])
            .optional(),
        OR: z
            .lazy(() => SettingsScalarWhereInputSchema)
            .array()
            .optional(),
        NOT: z
            .union([z.lazy(() => SettingsScalarWhereInputSchema), z.lazy(() => SettingsScalarWhereInputSchema).array()])
            .optional(),
        id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        user_id: z.union([z.lazy(() => UuidFilterSchema), z.string()]).optional(),
        theme: z.union([z.lazy(() => EnumthemeFilterSchema), z.lazy(() => themeSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => Enumcolor_schemeFilterSchema), z.lazy(() => color_schemeSchema)])
            .optional(),
        layout: z.union([z.lazy(() => EnumlayoutFilterSchema), z.lazy(() => layoutSchema)]).optional(),
        appearance: z.union([z.lazy(() => EnumappearanceFilterSchema), z.lazy(() => appearanceSchema)]).optional(),
        notifications: z.lazy(() => JsonNullableFilterSchema).optional(),
        created_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.lazy(() => DateTimeNullableFilterSchema), z.coerce.date()])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SponsorsUpdateWithoutUsers_sponsors_created_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutUsers_sponsors_created_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutUsers_sponsors_created_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_created_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SponsorsUpdateWithoutUsers_sponsors_created_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutUsers_sponsors_created_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateManyWithWhereWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpdateManyWithWhereWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SponsorsUpdateManyMutationInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateManyWithoutSponsors_sponsors_created_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpsertWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            update: z.union([
                z.lazy(() => SponsorsUpdateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutUsers_sponsors_deleted_byTousersInputSchema)
            ]),
            create: z.union([
                z.lazy(() => SponsorsCreateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedCreateWithoutUsers_sponsors_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpdateWithWhereUniqueWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsWhereUniqueInputSchema),
            data: z.union([
                z.lazy(() => SponsorsUpdateWithoutUsers_sponsors_deleted_byTousersInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateWithoutUsers_sponsors_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const SponsorsUpdateManyWithWhereWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpdateManyWithWhereWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            where: z.lazy(() => SponsorsScalarWhereInputSchema),
            data: z.union([
                z.lazy(() => SponsorsUpdateManyMutationInputSchema),
                z.lazy(() => SponsorsUncheckedUpdateManyWithoutSponsors_sponsors_deleted_byTousersInputSchema)
            ])
        })
        .strict()

export const TenantsUpsertWithoutUsersInputSchema: z.ZodType<Prisma.TenantsUpsertWithoutUsersInput> = z
    .object({
        update: z.union([
            z.lazy(() => TenantsUpdateWithoutUsersInputSchema),
            z.lazy(() => TenantsUncheckedUpdateWithoutUsersInputSchema)
        ]),
        create: z.union([
            z.lazy(() => TenantsCreateWithoutUsersInputSchema),
            z.lazy(() => TenantsUncheckedCreateWithoutUsersInputSchema)
        ])
    })
    .strict()

export const TenantsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantsUpdateWithoutUsersInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        benefactors: z.lazy(() => BenefactorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        domains: z.lazy(() => DomainsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        families: z.lazy(() => FamiliesUpdateManyWithoutTenantsNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutTenantsNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsors: z.lazy(() => SponsorsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        sponsorships: z.lazy(() => SponsorshipsUpdateManyWithoutTenantsNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutTenantsNestedInputSchema).optional()
    })
    .strict()

export const TenantsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.TenantsUncheckedUpdateWithoutUsersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            data: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            benefactors: z.lazy(() => BenefactorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            domains: z.lazy(() => DomainsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            families: z.lazy(() => FamiliesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            second_sponsors: z.lazy(() => Second_sponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutTenantsNestedInputSchema)
                .optional(),
            sponsors: z.lazy(() => SponsorsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            sponsorships: z.lazy(() => SponsorshipsUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutTenantsNestedInputSchema).optional()
        })
        .strict()

export const Family_furnishingCreateManyFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingCreateManyFamiliesInput> =
    z
        .object({
            id: z.string().uuid(),
            furnishing_id: z.string().uuid(),
            value: z.string()
        })
        .strict()

export const Family_housingCreateManyFamiliesInputSchema: z.ZodType<Prisma.Family_housingCreateManyFamiliesInput> = z
    .object({
        id: z.string().uuid(),
        housing_id: z.string().uuid(),
        value: z.string()
    })
    .strict()

export const Family_sponsorshipCreateManyFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateManyFamiliesInput> =
    z
        .object({
            id: z.string().uuid(),
            type: z.lazy(() => family_sponsorship_typeSchema),
            value: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const OrphansCreateManyFamiliesInputSchema: z.ZodType<Prisma.OrphansCreateManyFamiliesInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        tenant_id: z.string(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Second_sponsorsCreateManyFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsCreateManyFamiliesInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        degree_of_kinship: z.string(),
        phone_number: z.string(),
        address: z.string(),
        income: z.number().or(z.nan()),
        tenant_id: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SpousesCreateManyFamiliesInputSchema: z.ZodType<Prisma.SpousesCreateManyFamiliesInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number().or(z.nan()),
        tenant_id: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Family_furnishingUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            furnishings: z.lazy(() => FurnishingsUpdateOneRequiredWithoutFamily_furnishingNestedInputSchema).optional()
        })
        .strict()

export const Family_furnishingUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            furnishing_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_furnishingUncheckedUpdateManyWithoutFamily_furnishingInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateManyWithoutFamily_furnishingInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            furnishing_id: z
                .union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_housingUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            housings: z.lazy(() => HousingsUpdateOneRequiredWithoutFamily_housingNestedInputSchema).optional()
        })
        .strict()

export const Family_housingUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            housing_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_housingUncheckedUpdateManyWithoutFamily_housingInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateManyWithoutFamily_housingInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            housing_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_sponsorshipUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutFamily_sponsorshipNestedInputSchema).optional()
        })
        .strict()

export const Family_sponsorshipUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Family_sponsorshipUncheckedUpdateManyWithoutFamily_sponsorshipInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateManyWithoutFamily_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const OrphansUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUpdateWithoutFamiliesInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutOrphansNestedInputSchema).optional(),
        users_orphans_created_byTousers: z
            .lazy(() => UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInputSchema)
            .optional(),
        users_orphans_deleted_byTousers: z
            .lazy(() => UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphansNestedInputSchema).optional()
    })
    .strict()

export const OrphansUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInputSchema)
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutOrphansInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutOrphansInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Second_sponsorsUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSecond_sponsorsNestedInputSchema).optional()
        })
        .strict()

export const Second_sponsorsUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Second_sponsorsUncheckedUpdateManyWithoutSecond_sponsorsInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateManyWithoutSecond_sponsorsInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SpousesUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUpdateWithoutFamiliesInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSpousesNestedInputSchema).optional()
    })
    .strict()

export const SpousesUncheckedUpdateWithoutFamiliesInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SpousesUncheckedUpdateManyWithoutSpousesInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateManyWithoutSpousesInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Family_furnishingCreateManyFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingCreateManyFurnishingsInput> =
    z
        .object({
            id: z.string().uuid(),
            family_id: z.string().uuid(),
            value: z.string()
        })
        .strict()

export const Family_furnishingUpdateWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUpdateWithoutFurnishingsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutFamily_furnishingNestedInputSchema).optional()
        })
        .strict()

export const Family_furnishingUncheckedUpdateWithoutFurnishingsInputSchema: z.ZodType<Prisma.Family_furnishingUncheckedUpdateWithoutFurnishingsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Family_housingCreateManyHousingsInputSchema: z.ZodType<Prisma.Family_housingCreateManyHousingsInput> = z
    .object({
        id: z.string().uuid(),
        family_id: z.string().uuid(),
        value: z.string()
    })
    .strict()

export const Family_housingUpdateWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUpdateWithoutHousingsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutFamily_housingNestedInputSchema).optional()
        })
        .strict()

export const Family_housingUncheckedUpdateWithoutHousingsInputSchema: z.ZodType<Prisma.Family_housingUncheckedUpdateWithoutHousingsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Income_sponsorCreateManyIncomesInputSchema: z.ZodType<Prisma.Income_sponsorCreateManyIncomesInput> = z
    .object({
        id: z.string().uuid(),
        sponsor_id: z.string().uuid(),
        tenant_id: z.string(),
        value: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Income_sponsorUpdateWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUpdateWithoutIncomesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            sponsors: z.lazy(() => SponsorsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional()
        })
        .strict()

export const Income_sponsorUncheckedUpdateWithoutIncomesInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateWithoutIncomesInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsor_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Income_sponsorUncheckedUpdateManyWithoutIncome_sponsorInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateManyWithoutIncome_sponsorInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsor_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number().or(z.nan()), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Orphan_sponsorshipCreateManyOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateManyOrphansInput> =
    z
        .object({
            id: z.string().uuid(),
            type: z.lazy(() => orphan_sponsorship_typeSchema),
            value: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Orphan_sponsorshipUpdateWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateWithoutOrphansInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphan_sponsorshipNestedInputSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipUncheckedUpdateWithoutOrphansInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateWithoutOrphansInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Orphan_sponsorshipUncheckedUpdateManyWithoutOrphan_sponsorshipInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateManyWithoutOrphan_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Model_has_permissionsCreateManyPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsCreateManyPermissionsInput> =
    z
        .object({
            model_type: z.string(),
            model_uuid: z.string().uuid()
        })
        .strict()

export const Role_has_permissionsCreateManyPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateManyPermissionsInput> =
    z
        .object({
            role_id: z.string().uuid()
        })
        .strict()

export const Model_has_permissionsUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUpdateWithoutPermissionsInput> =
    z
        .object({
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_permissionsUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedUpdateWithoutPermissionsInput> =
    z
        .object({
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_permissionsUncheckedUpdateManyWithoutModel_has_permissionsInputSchema: z.ZodType<Prisma.Model_has_permissionsUncheckedUpdateManyWithoutModel_has_permissionsInput> =
    z
        .object({
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Role_has_permissionsUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateWithoutPermissionsInput> =
    z
        .object({
            roles: z.lazy(() => RolesUpdateOneRequiredWithoutRole_has_permissionsNestedInputSchema).optional()
        })
        .strict()

export const Role_has_permissionsUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateWithoutPermissionsInput> =
    z
        .object({
            role_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Role_has_permissionsUncheckedUpdateManyWithoutRole_has_permissionsInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateManyWithoutRole_has_permissionsInput> =
    z
        .object({
            role_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_rolesCreateManyRolesInputSchema: z.ZodType<Prisma.Model_has_rolesCreateManyRolesInput> = z
    .object({
        model_type: z.string(),
        model_uuid: z.string().uuid()
    })
    .strict()

export const Role_has_permissionsCreateManyRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsCreateManyRolesInput> =
    z
        .object({
            permission_id: z.string().uuid()
        })
        .strict()

export const Model_has_rolesUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUpdateWithoutRolesInput> = z
    .object({
        model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        model_uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const Model_has_rolesUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedUpdateWithoutRolesInput> =
    z
        .object({
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Model_has_rolesUncheckedUpdateManyWithoutModel_has_rolesInputSchema: z.ZodType<Prisma.Model_has_rolesUncheckedUpdateManyWithoutModel_has_rolesInput> =
    z
        .object({
            model_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            model_uuid: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Role_has_permissionsUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUpdateWithoutRolesInput> =
    z
        .object({
            permissions: z
                .lazy(() => PermissionsUpdateOneRequiredWithoutRole_has_permissionsNestedInputSchema)
                .optional()
        })
        .strict()

export const Role_has_permissionsUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Role_has_permissionsUncheckedUpdateWithoutRolesInput> =
    z
        .object({
            permission_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const Income_sponsorCreateManySponsorsInputSchema: z.ZodType<Prisma.Income_sponsorCreateManySponsorsInput> = z
    .object({
        id: z.string().uuid(),
        income_id: z.string().uuid(),
        tenant_id: z.string(),
        value: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Sponsor_sponsorshipCreateManySponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateManySponsorsInput> =
    z
        .object({
            id: z.string().uuid(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            tenant_id: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Income_sponsorUpdateWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUpdateWithoutSponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            incomes: z.lazy(() => IncomesUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional()
        })
        .strict()

export const Income_sponsorUncheckedUpdateWithoutSponsorsInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateWithoutSponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Sponsor_sponsorshipUpdateWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateWithoutSponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInputSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedUpdateWithoutSponsorsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateWithoutSponsorsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsor_sponsorshipInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsor_sponsorshipInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const BenefactorsCreateManyTenantsInputSchema: z.ZodType<Prisma.BenefactorsCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const DomainsCreateManyTenantsInputSchema: z.ZodType<Prisma.DomainsCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        domain: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const FamiliesCreateManyTenantsInputSchema: z.ZodType<Prisma.FamiliesCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        name: z.string(),
        report: z.string(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Family_sponsorshipCreateManyTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipCreateManyTenantsInput> =
    z
        .object({
            id: z.string().uuid(),
            family_id: z.string().uuid(),
            type: z.lazy(() => family_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const Income_sponsorCreateManyTenantsInputSchema: z.ZodType<Prisma.Income_sponsorCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        income_id: z.string().uuid(),
        sponsor_id: z.string().uuid(),
        value: z.number().or(z.nan()),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Orphan_sponsorshipCreateManyTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateManyTenantsInput> =
    z
        .object({
            id: z.string().uuid(),
            orphan_id: z.string().uuid(),
            type: z.lazy(() => orphan_sponsorship_typeSchema),
            value: z.string().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const OrphansCreateManyTenantsInputSchema: z.ZodType<Prisma.OrphansCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        family_status: z.string(),
        health_status: z.string(),
        academic_level: z.string(),
        shoes_size: z.string(),
        pants_size: z.string(),
        shirt_size: z.string(),
        note: z.string(),
        family_id: z.string().uuid(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Second_sponsorsCreateManyTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        degree_of_kinship: z.string(),
        phone_number: z.string(),
        address: z.string(),
        income: z.number().or(z.nan()),
        family_id: z.string().uuid(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const Sponsor_sponsorshipCreateManyTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateManyTenantsInput> =
    z
        .object({
            id: z.string().uuid(),
            sponsor_id: z.string().uuid(),
            type: z.lazy(() => sponsor_sponsorship_typeSchema),
            value: z.string(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SponsorsCreateManyTenantsInputSchema: z.ZodType<Prisma.SponsorsCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        zone_id: z.string().uuid(),
        file_number: z.number().int().gte(-2147483648).lte(2147483647),
        start_date: z.coerce.date(),
        name: z.string(),
        address: z.string(),
        phone_number: z.string(),
        sponsorship_type: z.string(),
        birth_date: z.coerce.date(),
        father_name: z.string(),
        mother_name: z.string(),
        birth_certificate_number: z.string(),
        academic_level: z.string(),
        function: z.string(),
        health_status: z.string(),
        diploma: z.string().optional().nullable(),
        card_number: z.string().optional().nullable(),
        created_by: z.string().uuid(),
        deleted_by: z.string().uuid().optional().nullable(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SponsorshipsCreateManyTenantsInputSchema: z.ZodType<Prisma.SponsorshipsCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        type: z.lazy(() => sponsorship_typeSchema),
        name: z.string(),
        deleted_at: z.coerce.date().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SpousesCreateManyTenantsInputSchema: z.ZodType<Prisma.SpousesCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        birth_date: z.coerce.date(),
        death_date: z.coerce.date(),
        function: z.string(),
        income: z.number().or(z.nan()),
        family_id: z.string().uuid(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const UsersCreateManyTenantsInputSchema: z.ZodType<Prisma.UsersCreateManyTenantsInput> = z
    .object({
        id: z.string().uuid(),
        first_name: z.string(),
        last_name: z.string(),
        phone: z.string(),
        email: z.string(),
        email_verified_at: z.coerce.date().optional().nullable(),
        password: z.string(),
        remember_token: z.string().optional().nullable(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const BenefactorsUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const BenefactorsUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.BenefactorsUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const BenefactorsUncheckedUpdateManyWithoutBenefactorsInputSchema: z.ZodType<Prisma.BenefactorsUncheckedUpdateManyWithoutBenefactorsInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const DomainsUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const DomainsUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.DomainsUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const DomainsUncheckedUpdateManyWithoutDomainsInputSchema: z.ZodType<Prisma.DomainsUncheckedUpdateManyWithoutDomainsInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            domain: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const FamiliesUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        family_furnishing: z.lazy(() => Family_furnishingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_housing: z.lazy(() => Family_housingUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        family_sponsorship: z.lazy(() => Family_sponsorshipUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        orphans: z.lazy(() => OrphansUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        second_sponsors: z.lazy(() => Second_sponsorsUpdateManyWithoutFamiliesNestedInputSchema).optional(),
        spouses: z.lazy(() => SpousesUpdateManyWithoutFamiliesNestedInputSchema).optional()
    })
    .strict()

export const FamiliesUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            family_furnishing: z
                .lazy(() => Family_furnishingUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            family_housing: z.lazy(() => Family_housingUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            family_sponsorship: z
                .lazy(() => Family_sponsorshipUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            orphans: z.lazy(() => OrphansUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional(),
            second_sponsors: z
                .lazy(() => Second_sponsorsUncheckedUpdateManyWithoutFamiliesNestedInputSchema)
                .optional(),
            spouses: z.lazy(() => SpousesUncheckedUpdateManyWithoutFamiliesNestedInputSchema).optional()
        })
        .strict()

export const FamiliesUncheckedUpdateManyWithoutFamiliesInputSchema: z.ZodType<Prisma.FamiliesUncheckedUpdateManyWithoutFamiliesInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            report: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Family_sponsorshipUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutFamily_sponsorshipNestedInputSchema).optional()
        })
        .strict()

export const Family_sponsorshipUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Family_sponsorshipUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => family_sponsorship_typeSchema),
                    z.lazy(() => Enumfamily_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Income_sponsorUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            incomes: z.lazy(() => IncomesUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional(),
            sponsors: z.lazy(() => SponsorsUpdateOneRequiredWithoutIncome_sponsorNestedInputSchema).optional()
        })
        .strict()

export const Income_sponsorUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Income_sponsorUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsor_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            value: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Orphan_sponsorshipUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans: z.lazy(() => OrphansUpdateOneRequiredWithoutOrphan_sponsorshipNestedInputSchema).optional()
        })
        .strict()

export const Orphan_sponsorshipUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Orphan_sponsorshipUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            orphan_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => orphan_sponsorship_typeSchema),
                    z.lazy(() => Enumorphan_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const OrphansUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutOrphansNestedInputSchema).optional(),
        users_orphans_created_byTousers: z
            .lazy(() => UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInputSchema)
            .optional(),
        users_orphans_deleted_byTousers: z
            .lazy(() => UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutOrphansNestedInputSchema).optional()
    })
    .strict()

export const OrphansUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInputSchema)
                .optional()
        })
        .strict()

export const Second_sponsorsUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutSecond_sponsorsNestedInputSchema).optional()
        })
        .strict()

export const Second_sponsorsUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Second_sponsorsUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            degree_of_kinship: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const Sponsor_sponsorshipUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            sponsors: z.lazy(() => SponsorsUpdateOneRequiredWithoutSponsor_sponsorshipNestedInputSchema).optional()
        })
        .strict()

export const Sponsor_sponsorshipUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.Sponsor_sponsorshipUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsor_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsor_sponsorship_typeSchema),
                    z.lazy(() => Enumsponsor_sponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            value: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorsUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
        start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_certificate_number: z
            .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
            .optional(),
        academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        diploma: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        card_number: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutSponsorsNestedInputSchema).optional(),
        sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInputSchema).optional(),
        users_sponsors_created_byTousers: z
            .lazy(() => UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        users_sponsors_deleted_byTousers: z
            .lazy(() => UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInputSchema)
            .optional()
    })
    .strict()

export const SponsorsUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInputSchema)
                .optional()
        })
        .strict()

export const SponsorsUncheckedUpdateManyWithoutSponsorsInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyWithoutSponsorsInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z
                .union([
                    z.number().int().gte(-2147483648).lte(2147483647),
                    z.lazy(() => IntFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorshipsUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        type: z
            .union([
                z.lazy(() => sponsorship_typeSchema),
                z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
            ])
            .optional(),
        name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        deleted_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SponsorshipsUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsorship_typeSchema),
                    z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorshipsUncheckedUpdateManyWithoutSponsorshipsInputSchema: z.ZodType<Prisma.SponsorshipsUncheckedUpdateManyWithoutSponsorshipsInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            type: z
                .union([
                    z.lazy(() => sponsorship_typeSchema),
                    z.lazy(() => Enumsponsorship_typeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SpousesUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
        function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        families: z.lazy(() => FamiliesUpdateOneRequiredWithoutSpousesNestedInputSchema).optional()
    })
    .strict()

export const SpousesUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.SpousesUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            death_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            income: z.union([z.number(), z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const UsersUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutTenantsInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        email_verified_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        remember_token: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        orphans_orphans_created_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
            .optional(),
        orphans_orphans_deleted_byTousers: z
            .lazy(() => OrphansUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
            .optional(),
        sessions: z.lazy(() => SessionsUpdateManyWithoutUsersNestedInputSchema).optional(),
        settings: z.lazy(() => SettingsUpdateManyWithoutUsersNestedInputSchema).optional(),
        sponsors_sponsors_created_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
            .optional(),
        sponsors_sponsors_deleted_byTousers: z
            .lazy(() => SponsorsUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
            .optional()
    })
    .strict()

export const UsersUncheckedUpdateWithoutTenantsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutTenantsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphans_orphans_created_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_created_byTousersNestedInputSchema)
                .optional(),
            orphans_orphans_deleted_byTousers: z
                .lazy(() => OrphansUncheckedUpdateManyWithoutUsers_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            settings: z.lazy(() => SettingsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
            sponsors_sponsors_created_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            sponsors_sponsors_deleted_byTousers: z
                .lazy(() => SponsorsUncheckedUpdateManyWithoutUsers_sponsors_deleted_byTousersNestedInputSchema)
                .optional()
        })
        .strict()

export const UsersUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateManyWithoutUsersInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            email_verified_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            password: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            remember_token: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const OrphansCreateManyUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateManyUsers_orphans_created_byTousersInput> =
    z
        .object({
            id: z.string().uuid(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            tenant_id: z.string(),
            family_id: z.string().uuid(),
            deleted_by: z.string().uuid().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const OrphansCreateManyUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansCreateManyUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.string().uuid(),
            first_name: z.string(),
            last_name: z.string(),
            birth_date: z.coerce.date(),
            family_status: z.string(),
            health_status: z.string(),
            academic_level: z.string(),
            shoes_size: z.string(),
            pants_size: z.string(),
            shirt_size: z.string(),
            note: z.string(),
            tenant_id: z.string(),
            family_id: z.string().uuid(),
            created_by: z.string().uuid(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SessionsCreateManyUsersInputSchema: z.ZodType<Prisma.SessionsCreateManyUsersInput> = z
    .object({
        id: z.string(),
        ip_address: z.string().optional().nullable(),
        user_agent: z.string().optional().nullable(),
        payload: z.string(),
        last_activity: z.number().int().gte(-2147483648).lte(2147483647)
    })
    .strict()

export const SettingsCreateManyUsersInputSchema: z.ZodType<Prisma.SettingsCreateManyUsersInput> = z
    .object({
        id: z.string().uuid(),
        theme: z.lazy(() => themeSchema),
        color_scheme: z.lazy(() => color_schemeSchema),
        layout: z.lazy(() => layoutSchema),
        appearance: z.lazy(() => appearanceSchema),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z.coerce.date().optional().nullable(),
        updated_at: z.coerce.date().optional().nullable()
    })
    .strict()

export const SponsorsCreateManyUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateManyUsers_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.string().uuid(),
            zone_id: z.string().uuid(),
            file_number: z.number().int().gte(-2147483648).lte(2147483647),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            tenant_id: z.string(),
            deleted_by: z.string().uuid().optional().nullable(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const SponsorsCreateManyUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsCreateManyUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.string().uuid(),
            zone_id: z.string().uuid(),
            file_number: z.number().int().gte(-2147483648).lte(2147483647),
            start_date: z.coerce.date(),
            name: z.string(),
            address: z.string(),
            phone_number: z.string(),
            sponsorship_type: z.string(),
            birth_date: z.coerce.date(),
            father_name: z.string(),
            mother_name: z.string(),
            birth_certificate_number: z.string(),
            academic_level: z.string(),
            function: z.string(),
            health_status: z.string(),
            diploma: z.string().optional().nullable(),
            card_number: z.string().optional().nullable(),
            tenant_id: z.string(),
            created_by: z.string().uuid(),
            deleted_at: z.coerce.date().optional().nullable(),
            created_at: z.coerce.date().optional().nullable(),
            updated_at: z.coerce.date().optional().nullable()
        })
        .strict()

export const OrphansUpdateWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUpdateWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutOrphansNestedInputSchema).optional(),
            users_orphans_deleted_byTousers: z
                .lazy(() => UsersUpdateOneWithoutOrphans_orphans_deleted_byTousersNestedInputSchema)
                .optional(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutOrphansNestedInputSchema).optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphansNestedInputSchema).optional()
        })
        .strict()

export const OrphansUncheckedUpdateWithoutUsers_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateWithoutUsers_orphans_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInputSchema)
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutOrphans_orphans_created_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutOrphans_orphans_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const OrphansUpdateWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUpdateWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphan_sponsorship: z.lazy(() => Orphan_sponsorshipUpdateManyWithoutOrphansNestedInputSchema).optional(),
            users_orphans_created_byTousers: z
                .lazy(() => UsersUpdateOneRequiredWithoutOrphans_orphans_created_byTousersNestedInputSchema)
                .optional(),
            families: z.lazy(() => FamiliesUpdateOneRequiredWithoutOrphansNestedInputSchema).optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutOrphansNestedInputSchema).optional()
        })
        .strict()

export const OrphansUncheckedUpdateWithoutUsers_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateWithoutUsers_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            orphan_sponsorship: z
                .lazy(() => Orphan_sponsorshipUncheckedUpdateManyWithoutOrphansNestedInputSchema)
                .optional()
        })
        .strict()

export const OrphansUncheckedUpdateManyWithoutOrphans_orphans_deleted_byTousersInputSchema: z.ZodType<Prisma.OrphansUncheckedUpdateManyWithoutOrphans_orphans_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            first_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            family_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shoes_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            pants_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            shirt_size: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            note: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            family_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SessionsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUpdateWithoutUsersInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        ip_address: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        user_agent: z
            .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        last_activity: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
    })
    .strict()

export const SessionsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateWithoutUsersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            ip_address: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            user_agent: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_activity: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
        })
        .strict()

export const SessionsUncheckedUpdateManyWithoutSessionsInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateManyWithoutSessionsInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            ip_address: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            user_agent: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            payload: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            last_activity: z
                .union([
                    z.number().int().gte(-2147483648).lte(2147483647),
                    z.lazy(() => IntFieldUpdateOperationsInputSchema)
                ])
                .optional()
        })
        .strict()

export const SettingsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUpdateWithoutUsersInput> = z
    .object({
        id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
        theme: z.union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)]).optional(),
        color_scheme: z
            .union([z.lazy(() => color_schemeSchema), z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)])
            .optional(),
        layout: z
            .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
            .optional(),
        appearance: z
            .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
            .optional(),
        notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
        created_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable(),
        updated_at: z
            .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
            .optional()
            .nullable()
    })
    .strict()

export const SettingsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.SettingsUncheckedUpdateWithoutUsersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            theme: z
                .union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)])
                .optional(),
            color_scheme: z
                .union([
                    z.lazy(() => color_schemeSchema),
                    z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            layout: z
                .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
                .optional(),
            appearance: z
                .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
                .optional(),
            notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SettingsUncheckedUpdateManyWithoutSettingsInputSchema: z.ZodType<Prisma.SettingsUncheckedUpdateManyWithoutSettingsInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            theme: z
                .union([z.lazy(() => themeSchema), z.lazy(() => EnumthemeFieldUpdateOperationsInputSchema)])
                .optional(),
            color_scheme: z
                .union([
                    z.lazy(() => color_schemeSchema),
                    z.lazy(() => Enumcolor_schemeFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            layout: z
                .union([z.lazy(() => layoutSchema), z.lazy(() => EnumlayoutFieldUpdateOperationsInputSchema)])
                .optional(),
            appearance: z
                .union([z.lazy(() => appearanceSchema), z.lazy(() => EnumappearanceFieldUpdateOperationsInputSchema)])
                .optional(),
            notifications: z.union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValue]).optional(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorsUpdateWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpdateWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            users_sponsors_deleted_byTousers: z
                .lazy(() => UsersUpdateOneWithoutSponsors_sponsors_deleted_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsorsNestedInputSchema).optional()
        })
        .strict()

export const SponsorsUncheckedUpdateWithoutUsers_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateWithoutUsers_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInputSchema)
                .optional()
        })
        .strict()

export const SponsorsUncheckedUpdateManyWithoutSponsors_sponsors_created_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyWithoutSponsors_sponsors_created_byTousersInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z
                .union([
                    z.number().int().gte(-2147483648).lte(2147483647),
                    z.lazy(() => IntFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_by: z
                .union([z.string().uuid(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

export const SponsorsUpdateWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUpdateWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            sponsor_sponsorship: z.lazy(() => Sponsor_sponsorshipUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            users_sponsors_created_byTousers: z
                .lazy(() => UsersUpdateOneRequiredWithoutSponsors_sponsors_created_byTousersNestedInputSchema)
                .optional(),
            tenants: z.lazy(() => TenantsUpdateOneRequiredWithoutSponsorsNestedInputSchema).optional()
        })
        .strict()

export const SponsorsUncheckedUpdateWithoutUsers_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateWithoutUsers_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z.union([z.number(), z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            income_sponsor: z.lazy(() => Income_sponsorUncheckedUpdateManyWithoutSponsorsNestedInputSchema).optional(),
            sponsor_sponsorship: z
                .lazy(() => Sponsor_sponsorshipUncheckedUpdateManyWithoutSponsorsNestedInputSchema)
                .optional()
        })
        .strict()

export const SponsorsUncheckedUpdateManyWithoutSponsors_sponsors_deleted_byTousersInputSchema: z.ZodType<Prisma.SponsorsUncheckedUpdateManyWithoutSponsors_sponsors_deleted_byTousersInput> =
    z
        .object({
            id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            zone_id: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            file_number: z
                .union([
                    z.number().int().gte(-2147483648).lte(2147483647),
                    z.lazy(() => IntFieldUpdateOperationsInputSchema)
                ])
                .optional(),
            start_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            address: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            phone_number: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            sponsorship_type: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_date: z.union([z.coerce.date(), z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
            father_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            mother_name: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            birth_certificate_number: z
                .union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)])
                .optional(),
            academic_level: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            function: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            health_status: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            diploma: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            card_number: z
                .union([z.string(), z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            tenant_id: z.union([z.string(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            created_by: z.union([z.string().uuid(), z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
            deleted_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            created_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable(),
            updated_at: z
                .union([z.coerce.date(), z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)])
                .optional()
                .nullable()
        })
        .strict()

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const BenefactorsFindFirstArgsSchema: z.ZodType<Prisma.BenefactorsFindFirstArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereInputSchema.optional(),
        orderBy: z
            .union([BenefactorsOrderByWithRelationInputSchema.array(), BenefactorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: BenefactorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: BenefactorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsFindFirstArgs>

export const BenefactorsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BenefactorsFindFirstOrThrowArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereInputSchema.optional(),
        orderBy: z
            .union([BenefactorsOrderByWithRelationInputSchema.array(), BenefactorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: BenefactorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: BenefactorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsFindFirstOrThrowArgs>

export const BenefactorsFindManyArgsSchema: z.ZodType<Prisma.BenefactorsFindManyArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereInputSchema.optional(),
        orderBy: z
            .union([BenefactorsOrderByWithRelationInputSchema.array(), BenefactorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: BenefactorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: BenefactorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsFindManyArgs>

export const BenefactorsAggregateArgsSchema: z.ZodType<Prisma.BenefactorsAggregateArgs> = z
    .object({
        where: BenefactorsWhereInputSchema.optional(),
        orderBy: z
            .union([BenefactorsOrderByWithRelationInputSchema.array(), BenefactorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: BenefactorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsAggregateArgs>

export const BenefactorsGroupByArgsSchema: z.ZodType<Prisma.BenefactorsGroupByArgs> = z
    .object({
        where: BenefactorsWhereInputSchema.optional(),
        orderBy: z
            .union([BenefactorsOrderByWithAggregationInputSchema.array(), BenefactorsOrderByWithAggregationInputSchema])
            .optional(),
        by: BenefactorsScalarFieldEnumSchema.array(),
        having: BenefactorsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsGroupByArgs>

export const BenefactorsFindUniqueArgsSchema: z.ZodType<Prisma.BenefactorsFindUniqueArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.BenefactorsFindUniqueArgs>

export const BenefactorsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BenefactorsFindUniqueOrThrowArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.BenefactorsFindUniqueOrThrowArgs>

export const CacheFindFirstArgsSchema: z.ZodType<Prisma.CacheFindFirstArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereInputSchema.optional(),
        orderBy: z.union([CacheOrderByWithRelationInputSchema.array(), CacheOrderByWithRelationInputSchema]).optional(),
        cursor: CacheWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: CacheScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const CacheFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CacheFindFirstOrThrowArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereInputSchema.optional(),
        orderBy: z.union([CacheOrderByWithRelationInputSchema.array(), CacheOrderByWithRelationInputSchema]).optional(),
        cursor: CacheWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: CacheScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const CacheFindManyArgsSchema: z.ZodType<Prisma.CacheFindManyArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereInputSchema.optional(),
        orderBy: z.union([CacheOrderByWithRelationInputSchema.array(), CacheOrderByWithRelationInputSchema]).optional(),
        cursor: CacheWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: CacheScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const CacheAggregateArgsSchema: z.ZodType<Prisma.CacheAggregateArgs> = z
    .object({
        where: CacheWhereInputSchema.optional(),
        orderBy: z.union([CacheOrderByWithRelationInputSchema.array(), CacheOrderByWithRelationInputSchema]).optional(),
        cursor: CacheWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const CacheGroupByArgsSchema: z.ZodType<Prisma.CacheGroupByArgs> = z
    .object({
        where: CacheWhereInputSchema.optional(),
        orderBy: z
            .union([CacheOrderByWithAggregationInputSchema.array(), CacheOrderByWithAggregationInputSchema])
            .optional(),
        by: CacheScalarFieldEnumSchema.array(),
        having: CacheScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const CacheFindUniqueArgsSchema: z.ZodType<Prisma.CacheFindUniqueArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereUniqueInputSchema
    })
    .strict()

export const CacheFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CacheFindUniqueOrThrowArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereUniqueInputSchema
    })
    .strict()

export const Cache_locksFindFirstArgsSchema: z.ZodType<Prisma.Cache_locksFindFirstArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereInputSchema.optional(),
        orderBy: z
            .union([Cache_locksOrderByWithRelationInputSchema.array(), Cache_locksOrderByWithRelationInputSchema])
            .optional(),
        cursor: Cache_locksWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Cache_locksScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Cache_locksFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Cache_locksFindFirstOrThrowArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereInputSchema.optional(),
        orderBy: z
            .union([Cache_locksOrderByWithRelationInputSchema.array(), Cache_locksOrderByWithRelationInputSchema])
            .optional(),
        cursor: Cache_locksWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Cache_locksScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Cache_locksFindManyArgsSchema: z.ZodType<Prisma.Cache_locksFindManyArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereInputSchema.optional(),
        orderBy: z
            .union([Cache_locksOrderByWithRelationInputSchema.array(), Cache_locksOrderByWithRelationInputSchema])
            .optional(),
        cursor: Cache_locksWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Cache_locksScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Cache_locksAggregateArgsSchema: z.ZodType<Prisma.Cache_locksAggregateArgs> = z
    .object({
        where: Cache_locksWhereInputSchema.optional(),
        orderBy: z
            .union([Cache_locksOrderByWithRelationInputSchema.array(), Cache_locksOrderByWithRelationInputSchema])
            .optional(),
        cursor: Cache_locksWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const Cache_locksGroupByArgsSchema: z.ZodType<Prisma.Cache_locksGroupByArgs> = z
    .object({
        where: Cache_locksWhereInputSchema.optional(),
        orderBy: z
            .union([Cache_locksOrderByWithAggregationInputSchema.array(), Cache_locksOrderByWithAggregationInputSchema])
            .optional(),
        by: Cache_locksScalarFieldEnumSchema.array(),
        having: Cache_locksScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const Cache_locksFindUniqueArgsSchema: z.ZodType<Prisma.Cache_locksFindUniqueArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereUniqueInputSchema
    })
    .strict()

export const Cache_locksFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Cache_locksFindUniqueOrThrowArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereUniqueInputSchema
    })
    .strict()

export const DomainsFindFirstArgsSchema: z.ZodType<Prisma.DomainsFindFirstArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereInputSchema.optional(),
        orderBy: z
            .union([DomainsOrderByWithRelationInputSchema.array(), DomainsOrderByWithRelationInputSchema])
            .optional(),
        cursor: DomainsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: DomainsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.DomainsFindFirstArgs>

export const DomainsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DomainsFindFirstOrThrowArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereInputSchema.optional(),
        orderBy: z
            .union([DomainsOrderByWithRelationInputSchema.array(), DomainsOrderByWithRelationInputSchema])
            .optional(),
        cursor: DomainsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: DomainsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.DomainsFindFirstOrThrowArgs>

export const DomainsFindManyArgsSchema: z.ZodType<Prisma.DomainsFindManyArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereInputSchema.optional(),
        orderBy: z
            .union([DomainsOrderByWithRelationInputSchema.array(), DomainsOrderByWithRelationInputSchema])
            .optional(),
        cursor: DomainsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: DomainsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.DomainsFindManyArgs>

export const DomainsAggregateArgsSchema: z.ZodType<Prisma.DomainsAggregateArgs> = z
    .object({
        where: DomainsWhereInputSchema.optional(),
        orderBy: z
            .union([DomainsOrderByWithRelationInputSchema.array(), DomainsOrderByWithRelationInputSchema])
            .optional(),
        cursor: DomainsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.DomainsAggregateArgs>

export const DomainsGroupByArgsSchema: z.ZodType<Prisma.DomainsGroupByArgs> = z
    .object({
        where: DomainsWhereInputSchema.optional(),
        orderBy: z
            .union([DomainsOrderByWithAggregationInputSchema.array(), DomainsOrderByWithAggregationInputSchema])
            .optional(),
        by: DomainsScalarFieldEnumSchema.array(),
        having: DomainsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.DomainsGroupByArgs>

export const DomainsFindUniqueArgsSchema: z.ZodType<Prisma.DomainsFindUniqueArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.DomainsFindUniqueArgs>

export const DomainsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DomainsFindUniqueOrThrowArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.DomainsFindUniqueOrThrowArgs>

export const FamiliesFindFirstArgsSchema: z.ZodType<Prisma.FamiliesFindFirstArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereInputSchema.optional(),
        orderBy: z
            .union([FamiliesOrderByWithRelationInputSchema.array(), FamiliesOrderByWithRelationInputSchema])
            .optional(),
        cursor: FamiliesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: FamiliesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesFindFirstArgs>

export const FamiliesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FamiliesFindFirstOrThrowArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereInputSchema.optional(),
        orderBy: z
            .union([FamiliesOrderByWithRelationInputSchema.array(), FamiliesOrderByWithRelationInputSchema])
            .optional(),
        cursor: FamiliesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: FamiliesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesFindFirstOrThrowArgs>

export const FamiliesFindManyArgsSchema: z.ZodType<Prisma.FamiliesFindManyArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereInputSchema.optional(),
        orderBy: z
            .union([FamiliesOrderByWithRelationInputSchema.array(), FamiliesOrderByWithRelationInputSchema])
            .optional(),
        cursor: FamiliesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: FamiliesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesFindManyArgs>

export const FamiliesAggregateArgsSchema: z.ZodType<Prisma.FamiliesAggregateArgs> = z
    .object({
        where: FamiliesWhereInputSchema.optional(),
        orderBy: z
            .union([FamiliesOrderByWithRelationInputSchema.array(), FamiliesOrderByWithRelationInputSchema])
            .optional(),
        cursor: FamiliesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesAggregateArgs>

export const FamiliesGroupByArgsSchema: z.ZodType<Prisma.FamiliesGroupByArgs> = z
    .object({
        where: FamiliesWhereInputSchema.optional(),
        orderBy: z
            .union([FamiliesOrderByWithAggregationInputSchema.array(), FamiliesOrderByWithAggregationInputSchema])
            .optional(),
        by: FamiliesScalarFieldEnumSchema.array(),
        having: FamiliesScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesGroupByArgs>

export const FamiliesFindUniqueArgsSchema: z.ZodType<Prisma.FamiliesFindUniqueArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FamiliesFindUniqueArgs>

export const FamiliesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FamiliesFindUniqueOrThrowArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FamiliesFindUniqueOrThrowArgs>

export const Family_furnishingFindFirstArgsSchema: z.ZodType<Prisma.Family_furnishingFindFirstArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_furnishingOrderByWithRelationInputSchema.array(),
                Family_furnishingOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_furnishingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_furnishingScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingFindFirstArgs>

export const Family_furnishingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Family_furnishingFindFirstOrThrowArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_furnishingOrderByWithRelationInputSchema.array(),
                Family_furnishingOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_furnishingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_furnishingScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingFindFirstOrThrowArgs>

export const Family_furnishingFindManyArgsSchema: z.ZodType<Prisma.Family_furnishingFindManyArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_furnishingOrderByWithRelationInputSchema.array(),
                Family_furnishingOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_furnishingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_furnishingScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingFindManyArgs>

export const Family_furnishingAggregateArgsSchema: z.ZodType<Prisma.Family_furnishingAggregateArgs> = z
    .object({
        where: Family_furnishingWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_furnishingOrderByWithRelationInputSchema.array(),
                Family_furnishingOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_furnishingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingAggregateArgs>

export const Family_furnishingGroupByArgsSchema: z.ZodType<Prisma.Family_furnishingGroupByArgs> = z
    .object({
        where: Family_furnishingWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_furnishingOrderByWithAggregationInputSchema.array(),
                Family_furnishingOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Family_furnishingScalarFieldEnumSchema.array(),
        having: Family_furnishingScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingGroupByArgs>

export const Family_furnishingFindUniqueArgsSchema: z.ZodType<Prisma.Family_furnishingFindUniqueArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_furnishingFindUniqueArgs>

export const Family_furnishingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Family_furnishingFindUniqueOrThrowArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_furnishingFindUniqueOrThrowArgs>

export const Family_housingFindFirstArgsSchema: z.ZodType<Prisma.Family_housingFindFirstArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereInputSchema.optional(),
        orderBy: z
            .union([Family_housingOrderByWithRelationInputSchema.array(), Family_housingOrderByWithRelationInputSchema])
            .optional(),
        cursor: Family_housingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_housingScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingFindFirstArgs>

export const Family_housingFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Family_housingFindFirstOrThrowArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereInputSchema.optional(),
        orderBy: z
            .union([Family_housingOrderByWithRelationInputSchema.array(), Family_housingOrderByWithRelationInputSchema])
            .optional(),
        cursor: Family_housingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_housingScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingFindFirstOrThrowArgs>

export const Family_housingFindManyArgsSchema: z.ZodType<Prisma.Family_housingFindManyArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereInputSchema.optional(),
        orderBy: z
            .union([Family_housingOrderByWithRelationInputSchema.array(), Family_housingOrderByWithRelationInputSchema])
            .optional(),
        cursor: Family_housingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_housingScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingFindManyArgs>

export const Family_housingAggregateArgsSchema: z.ZodType<Prisma.Family_housingAggregateArgs> = z
    .object({
        where: Family_housingWhereInputSchema.optional(),
        orderBy: z
            .union([Family_housingOrderByWithRelationInputSchema.array(), Family_housingOrderByWithRelationInputSchema])
            .optional(),
        cursor: Family_housingWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingAggregateArgs>

export const Family_housingGroupByArgsSchema: z.ZodType<Prisma.Family_housingGroupByArgs> = z
    .object({
        where: Family_housingWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_housingOrderByWithAggregationInputSchema.array(),
                Family_housingOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Family_housingScalarFieldEnumSchema.array(),
        having: Family_housingScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingGroupByArgs>

export const Family_housingFindUniqueArgsSchema: z.ZodType<Prisma.Family_housingFindUniqueArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_housingFindUniqueArgs>

export const Family_housingFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Family_housingFindUniqueOrThrowArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_housingFindUniqueOrThrowArgs>

export const Family_sponsorshipFindFirstArgsSchema: z.ZodType<Prisma.Family_sponsorshipFindFirstArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        where: Family_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_sponsorshipOrderByWithRelationInputSchema.array(),
                Family_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipFindFirstArgs>

export const Family_sponsorshipFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Family_sponsorshipFindFirstOrThrowArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        where: Family_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_sponsorshipOrderByWithRelationInputSchema.array(),
                Family_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipFindFirstOrThrowArgs>

export const Family_sponsorshipFindManyArgsSchema: z.ZodType<Prisma.Family_sponsorshipFindManyArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        where: Family_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_sponsorshipOrderByWithRelationInputSchema.array(),
                Family_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Family_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipFindManyArgs>

export const Family_sponsorshipAggregateArgsSchema: z.ZodType<Prisma.Family_sponsorshipAggregateArgs> = z
    .object({
        where: Family_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_sponsorshipOrderByWithRelationInputSchema.array(),
                Family_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Family_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipAggregateArgs>

export const Family_sponsorshipGroupByArgsSchema: z.ZodType<Prisma.Family_sponsorshipGroupByArgs> = z
    .object({
        where: Family_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Family_sponsorshipOrderByWithAggregationInputSchema.array(),
                Family_sponsorshipOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Family_sponsorshipScalarFieldEnumSchema.array(),
        having: Family_sponsorshipScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipGroupByArgs>

export const Family_sponsorshipFindUniqueArgsSchema: z.ZodType<Prisma.Family_sponsorshipFindUniqueArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        where: Family_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipFindUniqueArgs>

export const Family_sponsorshipFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Family_sponsorshipFindUniqueOrThrowArgs> =
    z
        .object({
            select: Family_sponsorshipSelectSchema.optional(),
            include: Family_sponsorshipIncludeSchema.optional(),
            where: Family_sponsorshipWhereUniqueInputSchema
        })
        .strict() as z.ZodType<Prisma.Family_sponsorshipFindUniqueOrThrowArgs>

export const FurnishingsFindFirstArgsSchema: z.ZodType<Prisma.FurnishingsFindFirstArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereInputSchema.optional(),
        orderBy: z
            .union([FurnishingsOrderByWithRelationInputSchema.array(), FurnishingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: FurnishingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: FurnishingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsFindFirstArgs>

export const FurnishingsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FurnishingsFindFirstOrThrowArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereInputSchema.optional(),
        orderBy: z
            .union([FurnishingsOrderByWithRelationInputSchema.array(), FurnishingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: FurnishingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: FurnishingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsFindFirstOrThrowArgs>

export const FurnishingsFindManyArgsSchema: z.ZodType<Prisma.FurnishingsFindManyArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereInputSchema.optional(),
        orderBy: z
            .union([FurnishingsOrderByWithRelationInputSchema.array(), FurnishingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: FurnishingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: FurnishingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsFindManyArgs>

export const FurnishingsAggregateArgsSchema: z.ZodType<Prisma.FurnishingsAggregateArgs> = z
    .object({
        where: FurnishingsWhereInputSchema.optional(),
        orderBy: z
            .union([FurnishingsOrderByWithRelationInputSchema.array(), FurnishingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: FurnishingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsAggregateArgs>

export const FurnishingsGroupByArgsSchema: z.ZodType<Prisma.FurnishingsGroupByArgs> = z
    .object({
        where: FurnishingsWhereInputSchema.optional(),
        orderBy: z
            .union([FurnishingsOrderByWithAggregationInputSchema.array(), FurnishingsOrderByWithAggregationInputSchema])
            .optional(),
        by: FurnishingsScalarFieldEnumSchema.array(),
        having: FurnishingsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsGroupByArgs>

export const FurnishingsFindUniqueArgsSchema: z.ZodType<Prisma.FurnishingsFindUniqueArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FurnishingsFindUniqueArgs>

export const FurnishingsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FurnishingsFindUniqueOrThrowArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FurnishingsFindUniqueOrThrowArgs>

export const HousingsFindFirstArgsSchema: z.ZodType<Prisma.HousingsFindFirstArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereInputSchema.optional(),
        orderBy: z
            .union([HousingsOrderByWithRelationInputSchema.array(), HousingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: HousingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: HousingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.HousingsFindFirstArgs>

export const HousingsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.HousingsFindFirstOrThrowArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereInputSchema.optional(),
        orderBy: z
            .union([HousingsOrderByWithRelationInputSchema.array(), HousingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: HousingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: HousingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.HousingsFindFirstOrThrowArgs>

export const HousingsFindManyArgsSchema: z.ZodType<Prisma.HousingsFindManyArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereInputSchema.optional(),
        orderBy: z
            .union([HousingsOrderByWithRelationInputSchema.array(), HousingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: HousingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: HousingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.HousingsFindManyArgs>

export const HousingsAggregateArgsSchema: z.ZodType<Prisma.HousingsAggregateArgs> = z
    .object({
        where: HousingsWhereInputSchema.optional(),
        orderBy: z
            .union([HousingsOrderByWithRelationInputSchema.array(), HousingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: HousingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.HousingsAggregateArgs>

export const HousingsGroupByArgsSchema: z.ZodType<Prisma.HousingsGroupByArgs> = z
    .object({
        where: HousingsWhereInputSchema.optional(),
        orderBy: z
            .union([HousingsOrderByWithAggregationInputSchema.array(), HousingsOrderByWithAggregationInputSchema])
            .optional(),
        by: HousingsScalarFieldEnumSchema.array(),
        having: HousingsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.HousingsGroupByArgs>

export const HousingsFindUniqueArgsSchema: z.ZodType<Prisma.HousingsFindUniqueArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.HousingsFindUniqueArgs>

export const HousingsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.HousingsFindUniqueOrThrowArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.HousingsFindUniqueOrThrowArgs>

export const Income_sponsorFindFirstArgsSchema: z.ZodType<Prisma.Income_sponsorFindFirstArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereInputSchema.optional(),
        orderBy: z
            .union([Income_sponsorOrderByWithRelationInputSchema.array(), Income_sponsorOrderByWithRelationInputSchema])
            .optional(),
        cursor: Income_sponsorWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Income_sponsorScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorFindFirstArgs>

export const Income_sponsorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Income_sponsorFindFirstOrThrowArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereInputSchema.optional(),
        orderBy: z
            .union([Income_sponsorOrderByWithRelationInputSchema.array(), Income_sponsorOrderByWithRelationInputSchema])
            .optional(),
        cursor: Income_sponsorWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Income_sponsorScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorFindFirstOrThrowArgs>

export const Income_sponsorFindManyArgsSchema: z.ZodType<Prisma.Income_sponsorFindManyArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereInputSchema.optional(),
        orderBy: z
            .union([Income_sponsorOrderByWithRelationInputSchema.array(), Income_sponsorOrderByWithRelationInputSchema])
            .optional(),
        cursor: Income_sponsorWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Income_sponsorScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorFindManyArgs>

export const Income_sponsorAggregateArgsSchema: z.ZodType<Prisma.Income_sponsorAggregateArgs> = z
    .object({
        where: Income_sponsorWhereInputSchema.optional(),
        orderBy: z
            .union([Income_sponsorOrderByWithRelationInputSchema.array(), Income_sponsorOrderByWithRelationInputSchema])
            .optional(),
        cursor: Income_sponsorWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorAggregateArgs>

export const Income_sponsorGroupByArgsSchema: z.ZodType<Prisma.Income_sponsorGroupByArgs> = z
    .object({
        where: Income_sponsorWhereInputSchema.optional(),
        orderBy: z
            .union([
                Income_sponsorOrderByWithAggregationInputSchema.array(),
                Income_sponsorOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Income_sponsorScalarFieldEnumSchema.array(),
        having: Income_sponsorScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorGroupByArgs>

export const Income_sponsorFindUniqueArgsSchema: z.ZodType<Prisma.Income_sponsorFindUniqueArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Income_sponsorFindUniqueArgs>

export const Income_sponsorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Income_sponsorFindUniqueOrThrowArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Income_sponsorFindUniqueOrThrowArgs>

export const IncomesFindFirstArgsSchema: z.ZodType<Prisma.IncomesFindFirstArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereInputSchema.optional(),
        orderBy: z
            .union([IncomesOrderByWithRelationInputSchema.array(), IncomesOrderByWithRelationInputSchema])
            .optional(),
        cursor: IncomesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: IncomesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.IncomesFindFirstArgs>

export const IncomesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.IncomesFindFirstOrThrowArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereInputSchema.optional(),
        orderBy: z
            .union([IncomesOrderByWithRelationInputSchema.array(), IncomesOrderByWithRelationInputSchema])
            .optional(),
        cursor: IncomesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: IncomesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.IncomesFindFirstOrThrowArgs>

export const IncomesFindManyArgsSchema: z.ZodType<Prisma.IncomesFindManyArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereInputSchema.optional(),
        orderBy: z
            .union([IncomesOrderByWithRelationInputSchema.array(), IncomesOrderByWithRelationInputSchema])
            .optional(),
        cursor: IncomesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: IncomesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.IncomesFindManyArgs>

export const IncomesAggregateArgsSchema: z.ZodType<Prisma.IncomesAggregateArgs> = z
    .object({
        where: IncomesWhereInputSchema.optional(),
        orderBy: z
            .union([IncomesOrderByWithRelationInputSchema.array(), IncomesOrderByWithRelationInputSchema])
            .optional(),
        cursor: IncomesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.IncomesAggregateArgs>

export const IncomesGroupByArgsSchema: z.ZodType<Prisma.IncomesGroupByArgs> = z
    .object({
        where: IncomesWhereInputSchema.optional(),
        orderBy: z
            .union([IncomesOrderByWithAggregationInputSchema.array(), IncomesOrderByWithAggregationInputSchema])
            .optional(),
        by: IncomesScalarFieldEnumSchema.array(),
        having: IncomesScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.IncomesGroupByArgs>

export const IncomesFindUniqueArgsSchema: z.ZodType<Prisma.IncomesFindUniqueArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.IncomesFindUniqueArgs>

export const IncomesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.IncomesFindUniqueOrThrowArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.IncomesFindUniqueOrThrowArgs>

export const MediaFindFirstArgsSchema: z.ZodType<Prisma.MediaFindFirstArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereInputSchema.optional(),
        orderBy: z.union([MediaOrderByWithRelationInputSchema.array(), MediaOrderByWithRelationInputSchema]).optional(),
        cursor: MediaWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: MediaScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const MediaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MediaFindFirstOrThrowArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereInputSchema.optional(),
        orderBy: z.union([MediaOrderByWithRelationInputSchema.array(), MediaOrderByWithRelationInputSchema]).optional(),
        cursor: MediaWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: MediaScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const MediaFindManyArgsSchema: z.ZodType<Prisma.MediaFindManyArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereInputSchema.optional(),
        orderBy: z.union([MediaOrderByWithRelationInputSchema.array(), MediaOrderByWithRelationInputSchema]).optional(),
        cursor: MediaWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: MediaScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const MediaAggregateArgsSchema: z.ZodType<Prisma.MediaAggregateArgs> = z
    .object({
        where: MediaWhereInputSchema.optional(),
        orderBy: z.union([MediaOrderByWithRelationInputSchema.array(), MediaOrderByWithRelationInputSchema]).optional(),
        cursor: MediaWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const MediaGroupByArgsSchema: z.ZodType<Prisma.MediaGroupByArgs> = z
    .object({
        where: MediaWhereInputSchema.optional(),
        orderBy: z
            .union([MediaOrderByWithAggregationInputSchema.array(), MediaOrderByWithAggregationInputSchema])
            .optional(),
        by: MediaScalarFieldEnumSchema.array(),
        having: MediaScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const MediaFindUniqueArgsSchema: z.ZodType<Prisma.MediaFindUniqueArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereUniqueInputSchema
    })
    .strict()

export const MediaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MediaFindUniqueOrThrowArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereUniqueInputSchema
    })
    .strict()

export const Model_has_permissionsFindFirstArgsSchema: z.ZodType<Prisma.Model_has_permissionsFindFirstArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        where: Model_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_permissionsOrderByWithRelationInputSchema.array(),
                Model_has_permissionsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_permissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Model_has_permissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsFindFirstArgs>

export const Model_has_permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Model_has_permissionsFindFirstOrThrowArgs> =
    z
        .object({
            select: Model_has_permissionsSelectSchema.optional(),
            include: Model_has_permissionsIncludeSchema.optional(),
            where: Model_has_permissionsWhereInputSchema.optional(),
            orderBy: z
                .union([
                    Model_has_permissionsOrderByWithRelationInputSchema.array(),
                    Model_has_permissionsOrderByWithRelationInputSchema
                ])
                .optional(),
            cursor: Model_has_permissionsWhereUniqueInputSchema.optional(),
            take: z.number().optional(),
            skip: z.number().optional(),
            distinct: Model_has_permissionsScalarFieldEnumSchema.array().optional()
        })
        .strict() as z.ZodType<Prisma.Model_has_permissionsFindFirstOrThrowArgs>

export const Model_has_permissionsFindManyArgsSchema: z.ZodType<Prisma.Model_has_permissionsFindManyArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        where: Model_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_permissionsOrderByWithRelationInputSchema.array(),
                Model_has_permissionsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_permissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Model_has_permissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsFindManyArgs>

export const Model_has_permissionsAggregateArgsSchema: z.ZodType<Prisma.Model_has_permissionsAggregateArgs> = z
    .object({
        where: Model_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_permissionsOrderByWithRelationInputSchema.array(),
                Model_has_permissionsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_permissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsAggregateArgs>

export const Model_has_permissionsGroupByArgsSchema: z.ZodType<Prisma.Model_has_permissionsGroupByArgs> = z
    .object({
        where: Model_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_permissionsOrderByWithAggregationInputSchema.array(),
                Model_has_permissionsOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Model_has_permissionsScalarFieldEnumSchema.array(),
        having: Model_has_permissionsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsGroupByArgs>

export const Model_has_permissionsFindUniqueArgsSchema: z.ZodType<Prisma.Model_has_permissionsFindUniqueArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        where: Model_has_permissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsFindUniqueArgs>

export const Model_has_permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Model_has_permissionsFindUniqueOrThrowArgs> =
    z
        .object({
            select: Model_has_permissionsSelectSchema.optional(),
            include: Model_has_permissionsIncludeSchema.optional(),
            where: Model_has_permissionsWhereUniqueInputSchema
        })
        .strict() as z.ZodType<Prisma.Model_has_permissionsFindUniqueOrThrowArgs>

export const Model_has_rolesFindFirstArgsSchema: z.ZodType<Prisma.Model_has_rolesFindFirstArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_rolesOrderByWithRelationInputSchema.array(),
                Model_has_rolesOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_rolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Model_has_rolesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesFindFirstArgs>

export const Model_has_rolesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Model_has_rolesFindFirstOrThrowArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_rolesOrderByWithRelationInputSchema.array(),
                Model_has_rolesOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_rolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Model_has_rolesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesFindFirstOrThrowArgs>

export const Model_has_rolesFindManyArgsSchema: z.ZodType<Prisma.Model_has_rolesFindManyArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_rolesOrderByWithRelationInputSchema.array(),
                Model_has_rolesOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_rolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Model_has_rolesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesFindManyArgs>

export const Model_has_rolesAggregateArgsSchema: z.ZodType<Prisma.Model_has_rolesAggregateArgs> = z
    .object({
        where: Model_has_rolesWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_rolesOrderByWithRelationInputSchema.array(),
                Model_has_rolesOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Model_has_rolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesAggregateArgs>

export const Model_has_rolesGroupByArgsSchema: z.ZodType<Prisma.Model_has_rolesGroupByArgs> = z
    .object({
        where: Model_has_rolesWhereInputSchema.optional(),
        orderBy: z
            .union([
                Model_has_rolesOrderByWithAggregationInputSchema.array(),
                Model_has_rolesOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Model_has_rolesScalarFieldEnumSchema.array(),
        having: Model_has_rolesScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesGroupByArgs>

export const Model_has_rolesFindUniqueArgsSchema: z.ZodType<Prisma.Model_has_rolesFindUniqueArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesFindUniqueArgs>

export const Model_has_rolesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Model_has_rolesFindUniqueOrThrowArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesFindUniqueOrThrowArgs>

export const Orphan_sponsorshipFindFirstArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipFindFirstArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        where: Orphan_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Orphan_sponsorshipOrderByWithRelationInputSchema.array(),
                Orphan_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Orphan_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Orphan_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipFindFirstArgs>

export const Orphan_sponsorshipFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipFindFirstOrThrowArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        where: Orphan_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Orphan_sponsorshipOrderByWithRelationInputSchema.array(),
                Orphan_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Orphan_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Orphan_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipFindFirstOrThrowArgs>

export const Orphan_sponsorshipFindManyArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipFindManyArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        where: Orphan_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Orphan_sponsorshipOrderByWithRelationInputSchema.array(),
                Orphan_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Orphan_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Orphan_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipFindManyArgs>

export const Orphan_sponsorshipAggregateArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipAggregateArgs> = z
    .object({
        where: Orphan_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Orphan_sponsorshipOrderByWithRelationInputSchema.array(),
                Orphan_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Orphan_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipAggregateArgs>

export const Orphan_sponsorshipGroupByArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipGroupByArgs> = z
    .object({
        where: Orphan_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Orphan_sponsorshipOrderByWithAggregationInputSchema.array(),
                Orphan_sponsorshipOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Orphan_sponsorshipScalarFieldEnumSchema.array(),
        having: Orphan_sponsorshipScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipGroupByArgs>

export const Orphan_sponsorshipFindUniqueArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipFindUniqueArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        where: Orphan_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipFindUniqueArgs>

export const Orphan_sponsorshipFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipFindUniqueOrThrowArgs> =
    z
        .object({
            select: Orphan_sponsorshipSelectSchema.optional(),
            include: Orphan_sponsorshipIncludeSchema.optional(),
            where: Orphan_sponsorshipWhereUniqueInputSchema
        })
        .strict() as z.ZodType<Prisma.Orphan_sponsorshipFindUniqueOrThrowArgs>

export const OrphansFindFirstArgsSchema: z.ZodType<Prisma.OrphansFindFirstArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereInputSchema.optional(),
        orderBy: z
            .union([OrphansOrderByWithRelationInputSchema.array(), OrphansOrderByWithRelationInputSchema])
            .optional(),
        cursor: OrphansWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: OrphansScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.OrphansFindFirstArgs>

export const OrphansFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrphansFindFirstOrThrowArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereInputSchema.optional(),
        orderBy: z
            .union([OrphansOrderByWithRelationInputSchema.array(), OrphansOrderByWithRelationInputSchema])
            .optional(),
        cursor: OrphansWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: OrphansScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.OrphansFindFirstOrThrowArgs>

export const OrphansFindManyArgsSchema: z.ZodType<Prisma.OrphansFindManyArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereInputSchema.optional(),
        orderBy: z
            .union([OrphansOrderByWithRelationInputSchema.array(), OrphansOrderByWithRelationInputSchema])
            .optional(),
        cursor: OrphansWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: OrphansScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.OrphansFindManyArgs>

export const OrphansAggregateArgsSchema: z.ZodType<Prisma.OrphansAggregateArgs> = z
    .object({
        where: OrphansWhereInputSchema.optional(),
        orderBy: z
            .union([OrphansOrderByWithRelationInputSchema.array(), OrphansOrderByWithRelationInputSchema])
            .optional(),
        cursor: OrphansWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.OrphansAggregateArgs>

export const OrphansGroupByArgsSchema: z.ZodType<Prisma.OrphansGroupByArgs> = z
    .object({
        where: OrphansWhereInputSchema.optional(),
        orderBy: z
            .union([OrphansOrderByWithAggregationInputSchema.array(), OrphansOrderByWithAggregationInputSchema])
            .optional(),
        by: OrphansScalarFieldEnumSchema.array(),
        having: OrphansScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.OrphansGroupByArgs>

export const OrphansFindUniqueArgsSchema: z.ZodType<Prisma.OrphansFindUniqueArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.OrphansFindUniqueArgs>

export const OrphansFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrphansFindUniqueOrThrowArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.OrphansFindUniqueOrThrowArgs>

export const Password_reset_tokensFindFirstArgsSchema: z.ZodType<Prisma.Password_reset_tokensFindFirstArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        where: Password_reset_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Password_reset_tokensOrderByWithRelationInputSchema.array(),
                Password_reset_tokensOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Password_reset_tokensWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Password_reset_tokensScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Password_reset_tokensFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Password_reset_tokensFindFirstOrThrowArgs> =
    z
        .object({
            select: Password_reset_tokensSelectSchema.optional(),
            where: Password_reset_tokensWhereInputSchema.optional(),
            orderBy: z
                .union([
                    Password_reset_tokensOrderByWithRelationInputSchema.array(),
                    Password_reset_tokensOrderByWithRelationInputSchema
                ])
                .optional(),
            cursor: Password_reset_tokensWhereUniqueInputSchema.optional(),
            take: z.number().optional(),
            skip: z.number().optional(),
            distinct: Password_reset_tokensScalarFieldEnumSchema.array().optional()
        })
        .strict()

export const Password_reset_tokensFindManyArgsSchema: z.ZodType<Prisma.Password_reset_tokensFindManyArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        where: Password_reset_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Password_reset_tokensOrderByWithRelationInputSchema.array(),
                Password_reset_tokensOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Password_reset_tokensWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Password_reset_tokensScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Password_reset_tokensAggregateArgsSchema: z.ZodType<Prisma.Password_reset_tokensAggregateArgs> = z
    .object({
        where: Password_reset_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Password_reset_tokensOrderByWithRelationInputSchema.array(),
                Password_reset_tokensOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Password_reset_tokensWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const Password_reset_tokensGroupByArgsSchema: z.ZodType<Prisma.Password_reset_tokensGroupByArgs> = z
    .object({
        where: Password_reset_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Password_reset_tokensOrderByWithAggregationInputSchema.array(),
                Password_reset_tokensOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Password_reset_tokensScalarFieldEnumSchema.array(),
        having: Password_reset_tokensScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const Password_reset_tokensFindUniqueArgsSchema: z.ZodType<Prisma.Password_reset_tokensFindUniqueArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        where: Password_reset_tokensWhereUniqueInputSchema
    })
    .strict()

export const Password_reset_tokensFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Password_reset_tokensFindUniqueOrThrowArgs> =
    z
        .object({
            select: Password_reset_tokensSelectSchema.optional(),
            where: Password_reset_tokensWhereUniqueInputSchema
        })
        .strict()

export const PermissionsFindFirstArgsSchema: z.ZodType<Prisma.PermissionsFindFirstArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereInputSchema.optional(),
        orderBy: z
            .union([PermissionsOrderByWithRelationInputSchema.array(), PermissionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: PermissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: PermissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsFindFirstArgs>

export const PermissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PermissionsFindFirstOrThrowArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereInputSchema.optional(),
        orderBy: z
            .union([PermissionsOrderByWithRelationInputSchema.array(), PermissionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: PermissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: PermissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsFindFirstOrThrowArgs>

export const PermissionsFindManyArgsSchema: z.ZodType<Prisma.PermissionsFindManyArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereInputSchema.optional(),
        orderBy: z
            .union([PermissionsOrderByWithRelationInputSchema.array(), PermissionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: PermissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: PermissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsFindManyArgs>

export const PermissionsAggregateArgsSchema: z.ZodType<Prisma.PermissionsAggregateArgs> = z
    .object({
        where: PermissionsWhereInputSchema.optional(),
        orderBy: z
            .union([PermissionsOrderByWithRelationInputSchema.array(), PermissionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: PermissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsAggregateArgs>

export const PermissionsGroupByArgsSchema: z.ZodType<Prisma.PermissionsGroupByArgs> = z
    .object({
        where: PermissionsWhereInputSchema.optional(),
        orderBy: z
            .union([PermissionsOrderByWithAggregationInputSchema.array(), PermissionsOrderByWithAggregationInputSchema])
            .optional(),
        by: PermissionsScalarFieldEnumSchema.array(),
        having: PermissionsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsGroupByArgs>

export const PermissionsFindUniqueArgsSchema: z.ZodType<Prisma.PermissionsFindUniqueArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.PermissionsFindUniqueArgs>

export const PermissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PermissionsFindUniqueOrThrowArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.PermissionsFindUniqueOrThrowArgs>

export const Personal_access_tokensFindFirstArgsSchema: z.ZodType<Prisma.Personal_access_tokensFindFirstArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        where: Personal_access_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Personal_access_tokensOrderByWithRelationInputSchema.array(),
                Personal_access_tokensOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Personal_access_tokensWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Personal_access_tokensScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Personal_access_tokensFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Personal_access_tokensFindFirstOrThrowArgs> =
    z
        .object({
            select: Personal_access_tokensSelectSchema.optional(),
            where: Personal_access_tokensWhereInputSchema.optional(),
            orderBy: z
                .union([
                    Personal_access_tokensOrderByWithRelationInputSchema.array(),
                    Personal_access_tokensOrderByWithRelationInputSchema
                ])
                .optional(),
            cursor: Personal_access_tokensWhereUniqueInputSchema.optional(),
            take: z.number().optional(),
            skip: z.number().optional(),
            distinct: Personal_access_tokensScalarFieldEnumSchema.array().optional()
        })
        .strict()

export const Personal_access_tokensFindManyArgsSchema: z.ZodType<Prisma.Personal_access_tokensFindManyArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        where: Personal_access_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Personal_access_tokensOrderByWithRelationInputSchema.array(),
                Personal_access_tokensOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Personal_access_tokensWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Personal_access_tokensScalarFieldEnumSchema.array().optional()
    })
    .strict()

export const Personal_access_tokensAggregateArgsSchema: z.ZodType<Prisma.Personal_access_tokensAggregateArgs> = z
    .object({
        where: Personal_access_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Personal_access_tokensOrderByWithRelationInputSchema.array(),
                Personal_access_tokensOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Personal_access_tokensWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const Personal_access_tokensGroupByArgsSchema: z.ZodType<Prisma.Personal_access_tokensGroupByArgs> = z
    .object({
        where: Personal_access_tokensWhereInputSchema.optional(),
        orderBy: z
            .union([
                Personal_access_tokensOrderByWithAggregationInputSchema.array(),
                Personal_access_tokensOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Personal_access_tokensScalarFieldEnumSchema.array(),
        having: Personal_access_tokensScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict()

export const Personal_access_tokensFindUniqueArgsSchema: z.ZodType<Prisma.Personal_access_tokensFindUniqueArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        where: Personal_access_tokensWhereUniqueInputSchema
    })
    .strict()

export const Personal_access_tokensFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Personal_access_tokensFindUniqueOrThrowArgs> =
    z
        .object({
            select: Personal_access_tokensSelectSchema.optional(),
            where: Personal_access_tokensWhereUniqueInputSchema
        })
        .strict()

export const Role_has_permissionsFindFirstArgsSchema: z.ZodType<Prisma.Role_has_permissionsFindFirstArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        where: Role_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Role_has_permissionsOrderByWithRelationInputSchema.array(),
                Role_has_permissionsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Role_has_permissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Role_has_permissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsFindFirstArgs>

export const Role_has_permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Role_has_permissionsFindFirstOrThrowArgs> =
    z
        .object({
            select: Role_has_permissionsSelectSchema.optional(),
            include: Role_has_permissionsIncludeSchema.optional(),
            where: Role_has_permissionsWhereInputSchema.optional(),
            orderBy: z
                .union([
                    Role_has_permissionsOrderByWithRelationInputSchema.array(),
                    Role_has_permissionsOrderByWithRelationInputSchema
                ])
                .optional(),
            cursor: Role_has_permissionsWhereUniqueInputSchema.optional(),
            take: z.number().optional(),
            skip: z.number().optional(),
            distinct: Role_has_permissionsScalarFieldEnumSchema.array().optional()
        })
        .strict() as z.ZodType<Prisma.Role_has_permissionsFindFirstOrThrowArgs>

export const Role_has_permissionsFindManyArgsSchema: z.ZodType<Prisma.Role_has_permissionsFindManyArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        where: Role_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Role_has_permissionsOrderByWithRelationInputSchema.array(),
                Role_has_permissionsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Role_has_permissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Role_has_permissionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsFindManyArgs>

export const Role_has_permissionsAggregateArgsSchema: z.ZodType<Prisma.Role_has_permissionsAggregateArgs> = z
    .object({
        where: Role_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Role_has_permissionsOrderByWithRelationInputSchema.array(),
                Role_has_permissionsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Role_has_permissionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsAggregateArgs>

export const Role_has_permissionsGroupByArgsSchema: z.ZodType<Prisma.Role_has_permissionsGroupByArgs> = z
    .object({
        where: Role_has_permissionsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Role_has_permissionsOrderByWithAggregationInputSchema.array(),
                Role_has_permissionsOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Role_has_permissionsScalarFieldEnumSchema.array(),
        having: Role_has_permissionsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsGroupByArgs>

export const Role_has_permissionsFindUniqueArgsSchema: z.ZodType<Prisma.Role_has_permissionsFindUniqueArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        where: Role_has_permissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsFindUniqueArgs>

export const Role_has_permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Role_has_permissionsFindUniqueOrThrowArgs> =
    z
        .object({
            select: Role_has_permissionsSelectSchema.optional(),
            include: Role_has_permissionsIncludeSchema.optional(),
            where: Role_has_permissionsWhereUniqueInputSchema
        })
        .strict() as z.ZodType<Prisma.Role_has_permissionsFindUniqueOrThrowArgs>

export const RolesFindFirstArgsSchema: z.ZodType<Prisma.RolesFindFirstArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereInputSchema.optional(),
        orderBy: z.union([RolesOrderByWithRelationInputSchema.array(), RolesOrderByWithRelationInputSchema]).optional(),
        cursor: RolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: RolesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.RolesFindFirstArgs>

export const RolesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RolesFindFirstOrThrowArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereInputSchema.optional(),
        orderBy: z.union([RolesOrderByWithRelationInputSchema.array(), RolesOrderByWithRelationInputSchema]).optional(),
        cursor: RolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: RolesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.RolesFindFirstOrThrowArgs>

export const RolesFindManyArgsSchema: z.ZodType<Prisma.RolesFindManyArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereInputSchema.optional(),
        orderBy: z.union([RolesOrderByWithRelationInputSchema.array(), RolesOrderByWithRelationInputSchema]).optional(),
        cursor: RolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: RolesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.RolesFindManyArgs>

export const RolesAggregateArgsSchema: z.ZodType<Prisma.RolesAggregateArgs> = z
    .object({
        where: RolesWhereInputSchema.optional(),
        orderBy: z.union([RolesOrderByWithRelationInputSchema.array(), RolesOrderByWithRelationInputSchema]).optional(),
        cursor: RolesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.RolesAggregateArgs>

export const RolesGroupByArgsSchema: z.ZodType<Prisma.RolesGroupByArgs> = z
    .object({
        where: RolesWhereInputSchema.optional(),
        orderBy: z
            .union([RolesOrderByWithAggregationInputSchema.array(), RolesOrderByWithAggregationInputSchema])
            .optional(),
        by: RolesScalarFieldEnumSchema.array(),
        having: RolesScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.RolesGroupByArgs>

export const RolesFindUniqueArgsSchema: z.ZodType<Prisma.RolesFindUniqueArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.RolesFindUniqueArgs>

export const RolesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RolesFindUniqueOrThrowArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.RolesFindUniqueOrThrowArgs>

export const Second_sponsorsFindFirstArgsSchema: z.ZodType<Prisma.Second_sponsorsFindFirstArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Second_sponsorsOrderByWithRelationInputSchema.array(),
                Second_sponsorsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Second_sponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Second_sponsorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsFindFirstArgs>

export const Second_sponsorsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Second_sponsorsFindFirstOrThrowArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Second_sponsorsOrderByWithRelationInputSchema.array(),
                Second_sponsorsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Second_sponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Second_sponsorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsFindFirstOrThrowArgs>

export const Second_sponsorsFindManyArgsSchema: z.ZodType<Prisma.Second_sponsorsFindManyArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Second_sponsorsOrderByWithRelationInputSchema.array(),
                Second_sponsorsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Second_sponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Second_sponsorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsFindManyArgs>

export const Second_sponsorsAggregateArgsSchema: z.ZodType<Prisma.Second_sponsorsAggregateArgs> = z
    .object({
        where: Second_sponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Second_sponsorsOrderByWithRelationInputSchema.array(),
                Second_sponsorsOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Second_sponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsAggregateArgs>

export const Second_sponsorsGroupByArgsSchema: z.ZodType<Prisma.Second_sponsorsGroupByArgs> = z
    .object({
        where: Second_sponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([
                Second_sponsorsOrderByWithAggregationInputSchema.array(),
                Second_sponsorsOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Second_sponsorsScalarFieldEnumSchema.array(),
        having: Second_sponsorsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsGroupByArgs>

export const Second_sponsorsFindUniqueArgsSchema: z.ZodType<Prisma.Second_sponsorsFindUniqueArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsFindUniqueArgs>

export const Second_sponsorsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Second_sponsorsFindUniqueOrThrowArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsFindUniqueOrThrowArgs>

export const SessionsFindFirstArgsSchema: z.ZodType<Prisma.SessionsFindFirstArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereInputSchema.optional(),
        orderBy: z
            .union([SessionsOrderByWithRelationInputSchema.array(), SessionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SessionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SessionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SessionsFindFirstArgs>

export const SessionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionsFindFirstOrThrowArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereInputSchema.optional(),
        orderBy: z
            .union([SessionsOrderByWithRelationInputSchema.array(), SessionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SessionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SessionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SessionsFindFirstOrThrowArgs>

export const SessionsFindManyArgsSchema: z.ZodType<Prisma.SessionsFindManyArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereInputSchema.optional(),
        orderBy: z
            .union([SessionsOrderByWithRelationInputSchema.array(), SessionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SessionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SessionsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SessionsFindManyArgs>

export const SessionsAggregateArgsSchema: z.ZodType<Prisma.SessionsAggregateArgs> = z
    .object({
        where: SessionsWhereInputSchema.optional(),
        orderBy: z
            .union([SessionsOrderByWithRelationInputSchema.array(), SessionsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SessionsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SessionsAggregateArgs>

export const SessionsGroupByArgsSchema: z.ZodType<Prisma.SessionsGroupByArgs> = z
    .object({
        where: SessionsWhereInputSchema.optional(),
        orderBy: z
            .union([SessionsOrderByWithAggregationInputSchema.array(), SessionsOrderByWithAggregationInputSchema])
            .optional(),
        by: SessionsScalarFieldEnumSchema.array(),
        having: SessionsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SessionsGroupByArgs>

export const SessionsFindUniqueArgsSchema: z.ZodType<Prisma.SessionsFindUniqueArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SessionsFindUniqueArgs>

export const SessionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionsFindUniqueOrThrowArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SessionsFindUniqueOrThrowArgs>

export const SettingsFindFirstArgsSchema: z.ZodType<Prisma.SettingsFindFirstArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereInputSchema.optional(),
        orderBy: z
            .union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SettingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SettingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SettingsFindFirstArgs>

export const SettingsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SettingsFindFirstOrThrowArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereInputSchema.optional(),
        orderBy: z
            .union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SettingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SettingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SettingsFindFirstOrThrowArgs>

export const SettingsFindManyArgsSchema: z.ZodType<Prisma.SettingsFindManyArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereInputSchema.optional(),
        orderBy: z
            .union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SettingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SettingsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SettingsFindManyArgs>

export const SettingsAggregateArgsSchema: z.ZodType<Prisma.SettingsAggregateArgs> = z
    .object({
        where: SettingsWhereInputSchema.optional(),
        orderBy: z
            .union([SettingsOrderByWithRelationInputSchema.array(), SettingsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SettingsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SettingsAggregateArgs>

export const SettingsGroupByArgsSchema: z.ZodType<Prisma.SettingsGroupByArgs> = z
    .object({
        where: SettingsWhereInputSchema.optional(),
        orderBy: z
            .union([SettingsOrderByWithAggregationInputSchema.array(), SettingsOrderByWithAggregationInputSchema])
            .optional(),
        by: SettingsScalarFieldEnumSchema.array(),
        having: SettingsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SettingsGroupByArgs>

export const SettingsFindUniqueArgsSchema: z.ZodType<Prisma.SettingsFindUniqueArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SettingsFindUniqueArgs>

export const SettingsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SettingsFindUniqueOrThrowArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SettingsFindUniqueOrThrowArgs>

export const Sponsor_sponsorshipFindFirstArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipFindFirstArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        where: Sponsor_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Sponsor_sponsorshipOrderByWithRelationInputSchema.array(),
                Sponsor_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Sponsor_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Sponsor_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipFindFirstArgs>

export const Sponsor_sponsorshipFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipFindFirstOrThrowArgs> =
    z
        .object({
            select: Sponsor_sponsorshipSelectSchema.optional(),
            include: Sponsor_sponsorshipIncludeSchema.optional(),
            where: Sponsor_sponsorshipWhereInputSchema.optional(),
            orderBy: z
                .union([
                    Sponsor_sponsorshipOrderByWithRelationInputSchema.array(),
                    Sponsor_sponsorshipOrderByWithRelationInputSchema
                ])
                .optional(),
            cursor: Sponsor_sponsorshipWhereUniqueInputSchema.optional(),
            take: z.number().optional(),
            skip: z.number().optional(),
            distinct: Sponsor_sponsorshipScalarFieldEnumSchema.array().optional()
        })
        .strict() as z.ZodType<Prisma.Sponsor_sponsorshipFindFirstOrThrowArgs>

export const Sponsor_sponsorshipFindManyArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipFindManyArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        where: Sponsor_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Sponsor_sponsorshipOrderByWithRelationInputSchema.array(),
                Sponsor_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Sponsor_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: Sponsor_sponsorshipScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipFindManyArgs>

export const Sponsor_sponsorshipAggregateArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipAggregateArgs> = z
    .object({
        where: Sponsor_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Sponsor_sponsorshipOrderByWithRelationInputSchema.array(),
                Sponsor_sponsorshipOrderByWithRelationInputSchema
            ])
            .optional(),
        cursor: Sponsor_sponsorshipWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipAggregateArgs>

export const Sponsor_sponsorshipGroupByArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipGroupByArgs> = z
    .object({
        where: Sponsor_sponsorshipWhereInputSchema.optional(),
        orderBy: z
            .union([
                Sponsor_sponsorshipOrderByWithAggregationInputSchema.array(),
                Sponsor_sponsorshipOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: Sponsor_sponsorshipScalarFieldEnumSchema.array(),
        having: Sponsor_sponsorshipScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipGroupByArgs>

export const Sponsor_sponsorshipFindUniqueArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipFindUniqueArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        where: Sponsor_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipFindUniqueArgs>

export const Sponsor_sponsorshipFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipFindUniqueOrThrowArgs> =
    z
        .object({
            select: Sponsor_sponsorshipSelectSchema.optional(),
            include: Sponsor_sponsorshipIncludeSchema.optional(),
            where: Sponsor_sponsorshipWhereUniqueInputSchema
        })
        .strict() as z.ZodType<Prisma.Sponsor_sponsorshipFindUniqueOrThrowArgs>

export const SponsorsFindFirstArgsSchema: z.ZodType<Prisma.SponsorsFindFirstArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorsOrderByWithRelationInputSchema.array(), SponsorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SponsorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsFindFirstArgs>

export const SponsorsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SponsorsFindFirstOrThrowArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorsOrderByWithRelationInputSchema.array(), SponsorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SponsorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsFindFirstOrThrowArgs>

export const SponsorsFindManyArgsSchema: z.ZodType<Prisma.SponsorsFindManyArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorsOrderByWithRelationInputSchema.array(), SponsorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SponsorsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsFindManyArgs>

export const SponsorsAggregateArgsSchema: z.ZodType<Prisma.SponsorsAggregateArgs> = z
    .object({
        where: SponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorsOrderByWithRelationInputSchema.array(), SponsorsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsAggregateArgs>

export const SponsorsGroupByArgsSchema: z.ZodType<Prisma.SponsorsGroupByArgs> = z
    .object({
        where: SponsorsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorsOrderByWithAggregationInputSchema.array(), SponsorsOrderByWithAggregationInputSchema])
            .optional(),
        by: SponsorsScalarFieldEnumSchema.array(),
        having: SponsorsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsGroupByArgs>

export const SponsorsFindUniqueArgsSchema: z.ZodType<Prisma.SponsorsFindUniqueArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorsFindUniqueArgs>

export const SponsorsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SponsorsFindUniqueOrThrowArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorsFindUniqueOrThrowArgs>

export const SponsorshipsFindFirstArgsSchema: z.ZodType<Prisma.SponsorshipsFindFirstArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorshipsOrderByWithRelationInputSchema.array(), SponsorshipsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorshipsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SponsorshipsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsFindFirstArgs>

export const SponsorshipsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SponsorshipsFindFirstOrThrowArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorshipsOrderByWithRelationInputSchema.array(), SponsorshipsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorshipsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SponsorshipsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsFindFirstOrThrowArgs>

export const SponsorshipsFindManyArgsSchema: z.ZodType<Prisma.SponsorshipsFindManyArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorshipsOrderByWithRelationInputSchema.array(), SponsorshipsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorshipsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SponsorshipsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsFindManyArgs>

export const SponsorshipsAggregateArgsSchema: z.ZodType<Prisma.SponsorshipsAggregateArgs> = z
    .object({
        where: SponsorshipsWhereInputSchema.optional(),
        orderBy: z
            .union([SponsorshipsOrderByWithRelationInputSchema.array(), SponsorshipsOrderByWithRelationInputSchema])
            .optional(),
        cursor: SponsorshipsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsAggregateArgs>

export const SponsorshipsGroupByArgsSchema: z.ZodType<Prisma.SponsorshipsGroupByArgs> = z
    .object({
        where: SponsorshipsWhereInputSchema.optional(),
        orderBy: z
            .union([
                SponsorshipsOrderByWithAggregationInputSchema.array(),
                SponsorshipsOrderByWithAggregationInputSchema
            ])
            .optional(),
        by: SponsorshipsScalarFieldEnumSchema.array(),
        having: SponsorshipsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsGroupByArgs>

export const SponsorshipsFindUniqueArgsSchema: z.ZodType<Prisma.SponsorshipsFindUniqueArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorshipsFindUniqueArgs>

export const SponsorshipsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SponsorshipsFindUniqueOrThrowArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorshipsFindUniqueOrThrowArgs>

export const SpousesFindFirstArgsSchema: z.ZodType<Prisma.SpousesFindFirstArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereInputSchema.optional(),
        orderBy: z
            .union([SpousesOrderByWithRelationInputSchema.array(), SpousesOrderByWithRelationInputSchema])
            .optional(),
        cursor: SpousesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SpousesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SpousesFindFirstArgs>

export const SpousesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SpousesFindFirstOrThrowArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereInputSchema.optional(),
        orderBy: z
            .union([SpousesOrderByWithRelationInputSchema.array(), SpousesOrderByWithRelationInputSchema])
            .optional(),
        cursor: SpousesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SpousesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SpousesFindFirstOrThrowArgs>

export const SpousesFindManyArgsSchema: z.ZodType<Prisma.SpousesFindManyArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereInputSchema.optional(),
        orderBy: z
            .union([SpousesOrderByWithRelationInputSchema.array(), SpousesOrderByWithRelationInputSchema])
            .optional(),
        cursor: SpousesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: SpousesScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.SpousesFindManyArgs>

export const SpousesAggregateArgsSchema: z.ZodType<Prisma.SpousesAggregateArgs> = z
    .object({
        where: SpousesWhereInputSchema.optional(),
        orderBy: z
            .union([SpousesOrderByWithRelationInputSchema.array(), SpousesOrderByWithRelationInputSchema])
            .optional(),
        cursor: SpousesWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SpousesAggregateArgs>

export const SpousesGroupByArgsSchema: z.ZodType<Prisma.SpousesGroupByArgs> = z
    .object({
        where: SpousesWhereInputSchema.optional(),
        orderBy: z
            .union([SpousesOrderByWithAggregationInputSchema.array(), SpousesOrderByWithAggregationInputSchema])
            .optional(),
        by: SpousesScalarFieldEnumSchema.array(),
        having: SpousesScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.SpousesGroupByArgs>

export const SpousesFindUniqueArgsSchema: z.ZodType<Prisma.SpousesFindUniqueArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SpousesFindUniqueArgs>

export const SpousesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SpousesFindUniqueOrThrowArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SpousesFindUniqueOrThrowArgs>

export const TenantsFindFirstArgsSchema: z.ZodType<Prisma.TenantsFindFirstArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereInputSchema.optional(),
        orderBy: z
            .union([TenantsOrderByWithRelationInputSchema.array(), TenantsOrderByWithRelationInputSchema])
            .optional(),
        cursor: TenantsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: TenantsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.TenantsFindFirstArgs>

export const TenantsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TenantsFindFirstOrThrowArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereInputSchema.optional(),
        orderBy: z
            .union([TenantsOrderByWithRelationInputSchema.array(), TenantsOrderByWithRelationInputSchema])
            .optional(),
        cursor: TenantsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: TenantsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.TenantsFindFirstOrThrowArgs>

export const TenantsFindManyArgsSchema: z.ZodType<Prisma.TenantsFindManyArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereInputSchema.optional(),
        orderBy: z
            .union([TenantsOrderByWithRelationInputSchema.array(), TenantsOrderByWithRelationInputSchema])
            .optional(),
        cursor: TenantsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: TenantsScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.TenantsFindManyArgs>

export const TenantsAggregateArgsSchema: z.ZodType<Prisma.TenantsAggregateArgs> = z
    .object({
        where: TenantsWhereInputSchema.optional(),
        orderBy: z
            .union([TenantsOrderByWithRelationInputSchema.array(), TenantsOrderByWithRelationInputSchema])
            .optional(),
        cursor: TenantsWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.TenantsAggregateArgs>

export const TenantsGroupByArgsSchema: z.ZodType<Prisma.TenantsGroupByArgs> = z
    .object({
        where: TenantsWhereInputSchema.optional(),
        orderBy: z
            .union([TenantsOrderByWithAggregationInputSchema.array(), TenantsOrderByWithAggregationInputSchema])
            .optional(),
        by: TenantsScalarFieldEnumSchema.array(),
        having: TenantsScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.TenantsGroupByArgs>

export const TenantsFindUniqueArgsSchema: z.ZodType<Prisma.TenantsFindUniqueArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.TenantsFindUniqueArgs>

export const TenantsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TenantsFindUniqueOrThrowArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.TenantsFindUniqueOrThrowArgs>

export const UsersFindFirstArgsSchema: z.ZodType<Prisma.UsersFindFirstArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereInputSchema.optional(),
        orderBy: z.union([UsersOrderByWithRelationInputSchema.array(), UsersOrderByWithRelationInputSchema]).optional(),
        cursor: UsersWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: UsersScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.UsersFindFirstArgs>

export const UsersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UsersFindFirstOrThrowArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereInputSchema.optional(),
        orderBy: z.union([UsersOrderByWithRelationInputSchema.array(), UsersOrderByWithRelationInputSchema]).optional(),
        cursor: UsersWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: UsersScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.UsersFindFirstOrThrowArgs>

export const UsersFindManyArgsSchema: z.ZodType<Prisma.UsersFindManyArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereInputSchema.optional(),
        orderBy: z.union([UsersOrderByWithRelationInputSchema.array(), UsersOrderByWithRelationInputSchema]).optional(),
        cursor: UsersWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional(),
        distinct: UsersScalarFieldEnumSchema.array().optional()
    })
    .strict() as z.ZodType<Prisma.UsersFindManyArgs>

export const UsersAggregateArgsSchema: z.ZodType<Prisma.UsersAggregateArgs> = z
    .object({
        where: UsersWhereInputSchema.optional(),
        orderBy: z.union([UsersOrderByWithRelationInputSchema.array(), UsersOrderByWithRelationInputSchema]).optional(),
        cursor: UsersWhereUniqueInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.UsersAggregateArgs>

export const UsersGroupByArgsSchema: z.ZodType<Prisma.UsersGroupByArgs> = z
    .object({
        where: UsersWhereInputSchema.optional(),
        orderBy: z
            .union([UsersOrderByWithAggregationInputSchema.array(), UsersOrderByWithAggregationInputSchema])
            .optional(),
        by: UsersScalarFieldEnumSchema.array(),
        having: UsersScalarWhereWithAggregatesInputSchema.optional(),
        take: z.number().optional(),
        skip: z.number().optional()
    })
    .strict() as z.ZodType<Prisma.UsersGroupByArgs>

export const UsersFindUniqueArgsSchema: z.ZodType<Prisma.UsersFindUniqueArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.UsersFindUniqueArgs>

export const UsersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UsersFindUniqueOrThrowArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.UsersFindUniqueOrThrowArgs>

export const BenefactorsCreateArgsSchema: z.ZodType<Prisma.BenefactorsCreateArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        data: z.union([BenefactorsCreateInputSchema, BenefactorsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.BenefactorsCreateArgs>

export const BenefactorsUpsertArgsSchema: z.ZodType<Prisma.BenefactorsUpsertArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereUniqueInputSchema,
        create: z.union([BenefactorsCreateInputSchema, BenefactorsUncheckedCreateInputSchema]),
        update: z.union([BenefactorsUpdateInputSchema, BenefactorsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.BenefactorsUpsertArgs>

export const BenefactorsCreateManyArgsSchema: z.ZodType<Prisma.BenefactorsCreateManyArgs> = z
    .object({
        data: BenefactorsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsCreateManyArgs>

export const BenefactorsDeleteArgsSchema: z.ZodType<Prisma.BenefactorsDeleteArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        where: BenefactorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.BenefactorsDeleteArgs>

export const BenefactorsUpdateArgsSchema: z.ZodType<Prisma.BenefactorsUpdateArgs> = z
    .object({
        select: BenefactorsSelectSchema.optional(),
        include: BenefactorsIncludeSchema.optional(),
        data: z.union([BenefactorsUpdateInputSchema, BenefactorsUncheckedUpdateInputSchema]),
        where: BenefactorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.BenefactorsUpdateArgs>

export const BenefactorsUpdateManyArgsSchema: z.ZodType<Prisma.BenefactorsUpdateManyArgs> = z
    .object({
        data: z.union([BenefactorsUpdateManyMutationInputSchema, BenefactorsUncheckedUpdateManyInputSchema]),
        where: BenefactorsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsUpdateManyArgs>

export const BenefactorsDeleteManyArgsSchema: z.ZodType<Prisma.BenefactorsDeleteManyArgs> = z
    .object({
        where: BenefactorsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.BenefactorsDeleteManyArgs>

export const CacheCreateArgsSchema: z.ZodType<Prisma.CacheCreateArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        data: z.union([CacheCreateInputSchema, CacheUncheckedCreateInputSchema])
    })
    .strict()

export const CacheUpsertArgsSchema: z.ZodType<Prisma.CacheUpsertArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereUniqueInputSchema,
        create: z.union([CacheCreateInputSchema, CacheUncheckedCreateInputSchema]),
        update: z.union([CacheUpdateInputSchema, CacheUncheckedUpdateInputSchema])
    })
    .strict()

export const CacheCreateManyArgsSchema: z.ZodType<Prisma.CacheCreateManyArgs> = z
    .object({
        data: CacheCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const CacheDeleteArgsSchema: z.ZodType<Prisma.CacheDeleteArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        where: CacheWhereUniqueInputSchema
    })
    .strict()

export const CacheUpdateArgsSchema: z.ZodType<Prisma.CacheUpdateArgs> = z
    .object({
        select: CacheSelectSchema.optional(),
        data: z.union([CacheUpdateInputSchema, CacheUncheckedUpdateInputSchema]),
        where: CacheWhereUniqueInputSchema
    })
    .strict()

export const CacheUpdateManyArgsSchema: z.ZodType<Prisma.CacheUpdateManyArgs> = z
    .object({
        data: z.union([CacheUpdateManyMutationInputSchema, CacheUncheckedUpdateManyInputSchema]),
        where: CacheWhereInputSchema.optional()
    })
    .strict()

export const CacheDeleteManyArgsSchema: z.ZodType<Prisma.CacheDeleteManyArgs> = z
    .object({
        where: CacheWhereInputSchema.optional()
    })
    .strict()

export const Cache_locksCreateArgsSchema: z.ZodType<Prisma.Cache_locksCreateArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        data: z.union([Cache_locksCreateInputSchema, Cache_locksUncheckedCreateInputSchema])
    })
    .strict()

export const Cache_locksUpsertArgsSchema: z.ZodType<Prisma.Cache_locksUpsertArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereUniqueInputSchema,
        create: z.union([Cache_locksCreateInputSchema, Cache_locksUncheckedCreateInputSchema]),
        update: z.union([Cache_locksUpdateInputSchema, Cache_locksUncheckedUpdateInputSchema])
    })
    .strict()

export const Cache_locksCreateManyArgsSchema: z.ZodType<Prisma.Cache_locksCreateManyArgs> = z
    .object({
        data: Cache_locksCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const Cache_locksDeleteArgsSchema: z.ZodType<Prisma.Cache_locksDeleteArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        where: Cache_locksWhereUniqueInputSchema
    })
    .strict()

export const Cache_locksUpdateArgsSchema: z.ZodType<Prisma.Cache_locksUpdateArgs> = z
    .object({
        select: Cache_locksSelectSchema.optional(),
        data: z.union([Cache_locksUpdateInputSchema, Cache_locksUncheckedUpdateInputSchema]),
        where: Cache_locksWhereUniqueInputSchema
    })
    .strict()

export const Cache_locksUpdateManyArgsSchema: z.ZodType<Prisma.Cache_locksUpdateManyArgs> = z
    .object({
        data: z.union([Cache_locksUpdateManyMutationInputSchema, Cache_locksUncheckedUpdateManyInputSchema]),
        where: Cache_locksWhereInputSchema.optional()
    })
    .strict()

export const Cache_locksDeleteManyArgsSchema: z.ZodType<Prisma.Cache_locksDeleteManyArgs> = z
    .object({
        where: Cache_locksWhereInputSchema.optional()
    })
    .strict()

export const DomainsCreateArgsSchema: z.ZodType<Prisma.DomainsCreateArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        data: z.union([DomainsCreateInputSchema, DomainsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.DomainsCreateArgs>

export const DomainsUpsertArgsSchema: z.ZodType<Prisma.DomainsUpsertArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereUniqueInputSchema,
        create: z.union([DomainsCreateInputSchema, DomainsUncheckedCreateInputSchema]),
        update: z.union([DomainsUpdateInputSchema, DomainsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.DomainsUpsertArgs>

export const DomainsCreateManyArgsSchema: z.ZodType<Prisma.DomainsCreateManyArgs> = z
    .object({
        data: DomainsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.DomainsCreateManyArgs>

export const DomainsDeleteArgsSchema: z.ZodType<Prisma.DomainsDeleteArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        where: DomainsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.DomainsDeleteArgs>

export const DomainsUpdateArgsSchema: z.ZodType<Prisma.DomainsUpdateArgs> = z
    .object({
        select: DomainsSelectSchema.optional(),
        include: DomainsIncludeSchema.optional(),
        data: z.union([DomainsUpdateInputSchema, DomainsUncheckedUpdateInputSchema]),
        where: DomainsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.DomainsUpdateArgs>

export const DomainsUpdateManyArgsSchema: z.ZodType<Prisma.DomainsUpdateManyArgs> = z
    .object({
        data: z.union([DomainsUpdateManyMutationInputSchema, DomainsUncheckedUpdateManyInputSchema]),
        where: DomainsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.DomainsUpdateManyArgs>

export const DomainsDeleteManyArgsSchema: z.ZodType<Prisma.DomainsDeleteManyArgs> = z
    .object({
        where: DomainsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.DomainsDeleteManyArgs>

export const FamiliesCreateArgsSchema: z.ZodType<Prisma.FamiliesCreateArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        data: z.union([FamiliesCreateInputSchema, FamiliesUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.FamiliesCreateArgs>

export const FamiliesUpsertArgsSchema: z.ZodType<Prisma.FamiliesUpsertArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereUniqueInputSchema,
        create: z.union([FamiliesCreateInputSchema, FamiliesUncheckedCreateInputSchema]),
        update: z.union([FamiliesUpdateInputSchema, FamiliesUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.FamiliesUpsertArgs>

export const FamiliesCreateManyArgsSchema: z.ZodType<Prisma.FamiliesCreateManyArgs> = z
    .object({
        data: FamiliesCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesCreateManyArgs>

export const FamiliesDeleteArgsSchema: z.ZodType<Prisma.FamiliesDeleteArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        where: FamiliesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FamiliesDeleteArgs>

export const FamiliesUpdateArgsSchema: z.ZodType<Prisma.FamiliesUpdateArgs> = z
    .object({
        select: FamiliesSelectSchema.optional(),
        include: FamiliesIncludeSchema.optional(),
        data: z.union([FamiliesUpdateInputSchema, FamiliesUncheckedUpdateInputSchema]),
        where: FamiliesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FamiliesUpdateArgs>

export const FamiliesUpdateManyArgsSchema: z.ZodType<Prisma.FamiliesUpdateManyArgs> = z
    .object({
        data: z.union([FamiliesUpdateManyMutationInputSchema, FamiliesUncheckedUpdateManyInputSchema]),
        where: FamiliesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesUpdateManyArgs>

export const FamiliesDeleteManyArgsSchema: z.ZodType<Prisma.FamiliesDeleteManyArgs> = z
    .object({
        where: FamiliesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.FamiliesDeleteManyArgs>

export const Family_furnishingCreateArgsSchema: z.ZodType<Prisma.Family_furnishingCreateArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        data: z.union([Family_furnishingCreateInputSchema, Family_furnishingUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Family_furnishingCreateArgs>

export const Family_furnishingUpsertArgsSchema: z.ZodType<Prisma.Family_furnishingUpsertArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereUniqueInputSchema,
        create: z.union([Family_furnishingCreateInputSchema, Family_furnishingUncheckedCreateInputSchema]),
        update: z.union([Family_furnishingUpdateInputSchema, Family_furnishingUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Family_furnishingUpsertArgs>

export const Family_furnishingCreateManyArgsSchema: z.ZodType<Prisma.Family_furnishingCreateManyArgs> = z
    .object({
        data: Family_furnishingCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingCreateManyArgs>

export const Family_furnishingDeleteArgsSchema: z.ZodType<Prisma.Family_furnishingDeleteArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        where: Family_furnishingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_furnishingDeleteArgs>

export const Family_furnishingUpdateArgsSchema: z.ZodType<Prisma.Family_furnishingUpdateArgs> = z
    .object({
        select: Family_furnishingSelectSchema.optional(),
        include: Family_furnishingIncludeSchema.optional(),
        data: z.union([Family_furnishingUpdateInputSchema, Family_furnishingUncheckedUpdateInputSchema]),
        where: Family_furnishingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_furnishingUpdateArgs>

export const Family_furnishingUpdateManyArgsSchema: z.ZodType<Prisma.Family_furnishingUpdateManyArgs> = z
    .object({
        data: z.union([
            Family_furnishingUpdateManyMutationInputSchema,
            Family_furnishingUncheckedUpdateManyInputSchema
        ]),
        where: Family_furnishingWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingUpdateManyArgs>

export const Family_furnishingDeleteManyArgsSchema: z.ZodType<Prisma.Family_furnishingDeleteManyArgs> = z
    .object({
        where: Family_furnishingWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Family_furnishingDeleteManyArgs>

export const Family_housingCreateArgsSchema: z.ZodType<Prisma.Family_housingCreateArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        data: z.union([Family_housingCreateInputSchema, Family_housingUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Family_housingCreateArgs>

export const Family_housingUpsertArgsSchema: z.ZodType<Prisma.Family_housingUpsertArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereUniqueInputSchema,
        create: z.union([Family_housingCreateInputSchema, Family_housingUncheckedCreateInputSchema]),
        update: z.union([Family_housingUpdateInputSchema, Family_housingUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Family_housingUpsertArgs>

export const Family_housingCreateManyArgsSchema: z.ZodType<Prisma.Family_housingCreateManyArgs> = z
    .object({
        data: Family_housingCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingCreateManyArgs>

export const Family_housingDeleteArgsSchema: z.ZodType<Prisma.Family_housingDeleteArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        where: Family_housingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_housingDeleteArgs>

export const Family_housingUpdateArgsSchema: z.ZodType<Prisma.Family_housingUpdateArgs> = z
    .object({
        select: Family_housingSelectSchema.optional(),
        include: Family_housingIncludeSchema.optional(),
        data: z.union([Family_housingUpdateInputSchema, Family_housingUncheckedUpdateInputSchema]),
        where: Family_housingWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_housingUpdateArgs>

export const Family_housingUpdateManyArgsSchema: z.ZodType<Prisma.Family_housingUpdateManyArgs> = z
    .object({
        data: z.union([Family_housingUpdateManyMutationInputSchema, Family_housingUncheckedUpdateManyInputSchema]),
        where: Family_housingWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingUpdateManyArgs>

export const Family_housingDeleteManyArgsSchema: z.ZodType<Prisma.Family_housingDeleteManyArgs> = z
    .object({
        where: Family_housingWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Family_housingDeleteManyArgs>

export const Family_sponsorshipCreateArgsSchema: z.ZodType<Prisma.Family_sponsorshipCreateArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        data: z.union([Family_sponsorshipCreateInputSchema, Family_sponsorshipUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipCreateArgs>

export const Family_sponsorshipUpsertArgsSchema: z.ZodType<Prisma.Family_sponsorshipUpsertArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        where: Family_sponsorshipWhereUniqueInputSchema,
        create: z.union([Family_sponsorshipCreateInputSchema, Family_sponsorshipUncheckedCreateInputSchema]),
        update: z.union([Family_sponsorshipUpdateInputSchema, Family_sponsorshipUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipUpsertArgs>

export const Family_sponsorshipCreateManyArgsSchema: z.ZodType<Prisma.Family_sponsorshipCreateManyArgs> = z
    .object({
        data: Family_sponsorshipCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipCreateManyArgs>

export const Family_sponsorshipDeleteArgsSchema: z.ZodType<Prisma.Family_sponsorshipDeleteArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        where: Family_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipDeleteArgs>

export const Family_sponsorshipUpdateArgsSchema: z.ZodType<Prisma.Family_sponsorshipUpdateArgs> = z
    .object({
        select: Family_sponsorshipSelectSchema.optional(),
        include: Family_sponsorshipIncludeSchema.optional(),
        data: z.union([Family_sponsorshipUpdateInputSchema, Family_sponsorshipUncheckedUpdateInputSchema]),
        where: Family_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipUpdateArgs>

export const Family_sponsorshipUpdateManyArgsSchema: z.ZodType<Prisma.Family_sponsorshipUpdateManyArgs> = z
    .object({
        data: z.union([
            Family_sponsorshipUpdateManyMutationInputSchema,
            Family_sponsorshipUncheckedUpdateManyInputSchema
        ]),
        where: Family_sponsorshipWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipUpdateManyArgs>

export const Family_sponsorshipDeleteManyArgsSchema: z.ZodType<Prisma.Family_sponsorshipDeleteManyArgs> = z
    .object({
        where: Family_sponsorshipWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Family_sponsorshipDeleteManyArgs>

export const FurnishingsCreateArgsSchema: z.ZodType<Prisma.FurnishingsCreateArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        data: z.union([FurnishingsCreateInputSchema, FurnishingsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.FurnishingsCreateArgs>

export const FurnishingsUpsertArgsSchema: z.ZodType<Prisma.FurnishingsUpsertArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereUniqueInputSchema,
        create: z.union([FurnishingsCreateInputSchema, FurnishingsUncheckedCreateInputSchema]),
        update: z.union([FurnishingsUpdateInputSchema, FurnishingsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.FurnishingsUpsertArgs>

export const FurnishingsCreateManyArgsSchema: z.ZodType<Prisma.FurnishingsCreateManyArgs> = z
    .object({
        data: FurnishingsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsCreateManyArgs>

export const FurnishingsDeleteArgsSchema: z.ZodType<Prisma.FurnishingsDeleteArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        where: FurnishingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FurnishingsDeleteArgs>

export const FurnishingsUpdateArgsSchema: z.ZodType<Prisma.FurnishingsUpdateArgs> = z
    .object({
        select: FurnishingsSelectSchema.optional(),
        include: FurnishingsIncludeSchema.optional(),
        data: z.union([FurnishingsUpdateInputSchema, FurnishingsUncheckedUpdateInputSchema]),
        where: FurnishingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.FurnishingsUpdateArgs>

export const FurnishingsUpdateManyArgsSchema: z.ZodType<Prisma.FurnishingsUpdateManyArgs> = z
    .object({
        data: z.union([FurnishingsUpdateManyMutationInputSchema, FurnishingsUncheckedUpdateManyInputSchema]),
        where: FurnishingsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsUpdateManyArgs>

export const FurnishingsDeleteManyArgsSchema: z.ZodType<Prisma.FurnishingsDeleteManyArgs> = z
    .object({
        where: FurnishingsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.FurnishingsDeleteManyArgs>

export const HousingsCreateArgsSchema: z.ZodType<Prisma.HousingsCreateArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        data: z.union([HousingsCreateInputSchema, HousingsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.HousingsCreateArgs>

export const HousingsUpsertArgsSchema: z.ZodType<Prisma.HousingsUpsertArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereUniqueInputSchema,
        create: z.union([HousingsCreateInputSchema, HousingsUncheckedCreateInputSchema]),
        update: z.union([HousingsUpdateInputSchema, HousingsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.HousingsUpsertArgs>

export const HousingsCreateManyArgsSchema: z.ZodType<Prisma.HousingsCreateManyArgs> = z
    .object({
        data: HousingsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.HousingsCreateManyArgs>

export const HousingsDeleteArgsSchema: z.ZodType<Prisma.HousingsDeleteArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        where: HousingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.HousingsDeleteArgs>

export const HousingsUpdateArgsSchema: z.ZodType<Prisma.HousingsUpdateArgs> = z
    .object({
        select: HousingsSelectSchema.optional(),
        include: HousingsIncludeSchema.optional(),
        data: z.union([HousingsUpdateInputSchema, HousingsUncheckedUpdateInputSchema]),
        where: HousingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.HousingsUpdateArgs>

export const HousingsUpdateManyArgsSchema: z.ZodType<Prisma.HousingsUpdateManyArgs> = z
    .object({
        data: z.union([HousingsUpdateManyMutationInputSchema, HousingsUncheckedUpdateManyInputSchema]),
        where: HousingsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.HousingsUpdateManyArgs>

export const HousingsDeleteManyArgsSchema: z.ZodType<Prisma.HousingsDeleteManyArgs> = z
    .object({
        where: HousingsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.HousingsDeleteManyArgs>

export const Income_sponsorCreateArgsSchema: z.ZodType<Prisma.Income_sponsorCreateArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        data: z.union([Income_sponsorCreateInputSchema, Income_sponsorUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Income_sponsorCreateArgs>

export const Income_sponsorUpsertArgsSchema: z.ZodType<Prisma.Income_sponsorUpsertArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereUniqueInputSchema,
        create: z.union([Income_sponsorCreateInputSchema, Income_sponsorUncheckedCreateInputSchema]),
        update: z.union([Income_sponsorUpdateInputSchema, Income_sponsorUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Income_sponsorUpsertArgs>

export const Income_sponsorCreateManyArgsSchema: z.ZodType<Prisma.Income_sponsorCreateManyArgs> = z
    .object({
        data: Income_sponsorCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorCreateManyArgs>

export const Income_sponsorDeleteArgsSchema: z.ZodType<Prisma.Income_sponsorDeleteArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        where: Income_sponsorWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Income_sponsorDeleteArgs>

export const Income_sponsorUpdateArgsSchema: z.ZodType<Prisma.Income_sponsorUpdateArgs> = z
    .object({
        select: Income_sponsorSelectSchema.optional(),
        include: Income_sponsorIncludeSchema.optional(),
        data: z.union([Income_sponsorUpdateInputSchema, Income_sponsorUncheckedUpdateInputSchema]),
        where: Income_sponsorWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Income_sponsorUpdateArgs>

export const Income_sponsorUpdateManyArgsSchema: z.ZodType<Prisma.Income_sponsorUpdateManyArgs> = z
    .object({
        data: z.union([Income_sponsorUpdateManyMutationInputSchema, Income_sponsorUncheckedUpdateManyInputSchema]),
        where: Income_sponsorWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorUpdateManyArgs>

export const Income_sponsorDeleteManyArgsSchema: z.ZodType<Prisma.Income_sponsorDeleteManyArgs> = z
    .object({
        where: Income_sponsorWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Income_sponsorDeleteManyArgs>

export const IncomesCreateArgsSchema: z.ZodType<Prisma.IncomesCreateArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        data: z.union([IncomesCreateInputSchema, IncomesUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.IncomesCreateArgs>

export const IncomesUpsertArgsSchema: z.ZodType<Prisma.IncomesUpsertArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereUniqueInputSchema,
        create: z.union([IncomesCreateInputSchema, IncomesUncheckedCreateInputSchema]),
        update: z.union([IncomesUpdateInputSchema, IncomesUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.IncomesUpsertArgs>

export const IncomesCreateManyArgsSchema: z.ZodType<Prisma.IncomesCreateManyArgs> = z
    .object({
        data: IncomesCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.IncomesCreateManyArgs>

export const IncomesDeleteArgsSchema: z.ZodType<Prisma.IncomesDeleteArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        where: IncomesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.IncomesDeleteArgs>

export const IncomesUpdateArgsSchema: z.ZodType<Prisma.IncomesUpdateArgs> = z
    .object({
        select: IncomesSelectSchema.optional(),
        include: IncomesIncludeSchema.optional(),
        data: z.union([IncomesUpdateInputSchema, IncomesUncheckedUpdateInputSchema]),
        where: IncomesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.IncomesUpdateArgs>

export const IncomesUpdateManyArgsSchema: z.ZodType<Prisma.IncomesUpdateManyArgs> = z
    .object({
        data: z.union([IncomesUpdateManyMutationInputSchema, IncomesUncheckedUpdateManyInputSchema]),
        where: IncomesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.IncomesUpdateManyArgs>

export const IncomesDeleteManyArgsSchema: z.ZodType<Prisma.IncomesDeleteManyArgs> = z
    .object({
        where: IncomesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.IncomesDeleteManyArgs>

export const MediaCreateArgsSchema: z.ZodType<Prisma.MediaCreateArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        data: z.union([MediaCreateInputSchema, MediaUncheckedCreateInputSchema])
    })
    .strict()

export const MediaUpsertArgsSchema: z.ZodType<Prisma.MediaUpsertArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereUniqueInputSchema,
        create: z.union([MediaCreateInputSchema, MediaUncheckedCreateInputSchema]),
        update: z.union([MediaUpdateInputSchema, MediaUncheckedUpdateInputSchema])
    })
    .strict()

export const MediaCreateManyArgsSchema: z.ZodType<Prisma.MediaCreateManyArgs> = z
    .object({
        data: MediaCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const MediaDeleteArgsSchema: z.ZodType<Prisma.MediaDeleteArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        where: MediaWhereUniqueInputSchema
    })
    .strict()

export const MediaUpdateArgsSchema: z.ZodType<Prisma.MediaUpdateArgs> = z
    .object({
        select: MediaSelectSchema.optional(),
        data: z.union([MediaUpdateInputSchema, MediaUncheckedUpdateInputSchema]),
        where: MediaWhereUniqueInputSchema
    })
    .strict()

export const MediaUpdateManyArgsSchema: z.ZodType<Prisma.MediaUpdateManyArgs> = z
    .object({
        data: z.union([MediaUpdateManyMutationInputSchema, MediaUncheckedUpdateManyInputSchema]),
        where: MediaWhereInputSchema.optional()
    })
    .strict()

export const MediaDeleteManyArgsSchema: z.ZodType<Prisma.MediaDeleteManyArgs> = z
    .object({
        where: MediaWhereInputSchema.optional()
    })
    .strict()

export const Model_has_permissionsCreateArgsSchema: z.ZodType<Prisma.Model_has_permissionsCreateArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        data: z.union([Model_has_permissionsCreateInputSchema, Model_has_permissionsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsCreateArgs>

export const Model_has_permissionsUpsertArgsSchema: z.ZodType<Prisma.Model_has_permissionsUpsertArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        where: Model_has_permissionsWhereUniqueInputSchema,
        create: z.union([Model_has_permissionsCreateInputSchema, Model_has_permissionsUncheckedCreateInputSchema]),
        update: z.union([Model_has_permissionsUpdateInputSchema, Model_has_permissionsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsUpsertArgs>

export const Model_has_permissionsCreateManyArgsSchema: z.ZodType<Prisma.Model_has_permissionsCreateManyArgs> = z
    .object({
        data: Model_has_permissionsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsCreateManyArgs>

export const Model_has_permissionsDeleteArgsSchema: z.ZodType<Prisma.Model_has_permissionsDeleteArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        where: Model_has_permissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsDeleteArgs>

export const Model_has_permissionsUpdateArgsSchema: z.ZodType<Prisma.Model_has_permissionsUpdateArgs> = z
    .object({
        select: Model_has_permissionsSelectSchema.optional(),
        include: Model_has_permissionsIncludeSchema.optional(),
        data: z.union([Model_has_permissionsUpdateInputSchema, Model_has_permissionsUncheckedUpdateInputSchema]),
        where: Model_has_permissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsUpdateArgs>

export const Model_has_permissionsUpdateManyArgsSchema: z.ZodType<Prisma.Model_has_permissionsUpdateManyArgs> = z
    .object({
        data: z.union([
            Model_has_permissionsUpdateManyMutationInputSchema,
            Model_has_permissionsUncheckedUpdateManyInputSchema
        ]),
        where: Model_has_permissionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsUpdateManyArgs>

export const Model_has_permissionsDeleteManyArgsSchema: z.ZodType<Prisma.Model_has_permissionsDeleteManyArgs> = z
    .object({
        where: Model_has_permissionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_permissionsDeleteManyArgs>

export const Model_has_rolesCreateArgsSchema: z.ZodType<Prisma.Model_has_rolesCreateArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        data: z.union([Model_has_rolesCreateInputSchema, Model_has_rolesUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesCreateArgs>

export const Model_has_rolesUpsertArgsSchema: z.ZodType<Prisma.Model_has_rolesUpsertArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereUniqueInputSchema,
        create: z.union([Model_has_rolesCreateInputSchema, Model_has_rolesUncheckedCreateInputSchema]),
        update: z.union([Model_has_rolesUpdateInputSchema, Model_has_rolesUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesUpsertArgs>

export const Model_has_rolesCreateManyArgsSchema: z.ZodType<Prisma.Model_has_rolesCreateManyArgs> = z
    .object({
        data: Model_has_rolesCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesCreateManyArgs>

export const Model_has_rolesDeleteArgsSchema: z.ZodType<Prisma.Model_has_rolesDeleteArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        where: Model_has_rolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesDeleteArgs>

export const Model_has_rolesUpdateArgsSchema: z.ZodType<Prisma.Model_has_rolesUpdateArgs> = z
    .object({
        select: Model_has_rolesSelectSchema.optional(),
        include: Model_has_rolesIncludeSchema.optional(),
        data: z.union([Model_has_rolesUpdateInputSchema, Model_has_rolesUncheckedUpdateInputSchema]),
        where: Model_has_rolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesUpdateArgs>

export const Model_has_rolesUpdateManyArgsSchema: z.ZodType<Prisma.Model_has_rolesUpdateManyArgs> = z
    .object({
        data: z.union([Model_has_rolesUpdateManyMutationInputSchema, Model_has_rolesUncheckedUpdateManyInputSchema]),
        where: Model_has_rolesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesUpdateManyArgs>

export const Model_has_rolesDeleteManyArgsSchema: z.ZodType<Prisma.Model_has_rolesDeleteManyArgs> = z
    .object({
        where: Model_has_rolesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Model_has_rolesDeleteManyArgs>

export const Orphan_sponsorshipCreateArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        data: z.union([Orphan_sponsorshipCreateInputSchema, Orphan_sponsorshipUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipCreateArgs>

export const Orphan_sponsorshipUpsertArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipUpsertArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        where: Orphan_sponsorshipWhereUniqueInputSchema,
        create: z.union([Orphan_sponsorshipCreateInputSchema, Orphan_sponsorshipUncheckedCreateInputSchema]),
        update: z.union([Orphan_sponsorshipUpdateInputSchema, Orphan_sponsorshipUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipUpsertArgs>

export const Orphan_sponsorshipCreateManyArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipCreateManyArgs> = z
    .object({
        data: Orphan_sponsorshipCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipCreateManyArgs>

export const Orphan_sponsorshipDeleteArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipDeleteArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        where: Orphan_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipDeleteArgs>

export const Orphan_sponsorshipUpdateArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateArgs> = z
    .object({
        select: Orphan_sponsorshipSelectSchema.optional(),
        include: Orphan_sponsorshipIncludeSchema.optional(),
        data: z.union([Orphan_sponsorshipUpdateInputSchema, Orphan_sponsorshipUncheckedUpdateInputSchema]),
        where: Orphan_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipUpdateArgs>

export const Orphan_sponsorshipUpdateManyArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipUpdateManyArgs> = z
    .object({
        data: z.union([
            Orphan_sponsorshipUpdateManyMutationInputSchema,
            Orphan_sponsorshipUncheckedUpdateManyInputSchema
        ]),
        where: Orphan_sponsorshipWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipUpdateManyArgs>

export const Orphan_sponsorshipDeleteManyArgsSchema: z.ZodType<Prisma.Orphan_sponsorshipDeleteManyArgs> = z
    .object({
        where: Orphan_sponsorshipWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Orphan_sponsorshipDeleteManyArgs>

export const OrphansCreateArgsSchema: z.ZodType<Prisma.OrphansCreateArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        data: z.union([OrphansCreateInputSchema, OrphansUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.OrphansCreateArgs>

export const OrphansUpsertArgsSchema: z.ZodType<Prisma.OrphansUpsertArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereUniqueInputSchema,
        create: z.union([OrphansCreateInputSchema, OrphansUncheckedCreateInputSchema]),
        update: z.union([OrphansUpdateInputSchema, OrphansUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.OrphansUpsertArgs>

export const OrphansCreateManyArgsSchema: z.ZodType<Prisma.OrphansCreateManyArgs> = z
    .object({
        data: OrphansCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.OrphansCreateManyArgs>

export const OrphansDeleteArgsSchema: z.ZodType<Prisma.OrphansDeleteArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        where: OrphansWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.OrphansDeleteArgs>

export const OrphansUpdateArgsSchema: z.ZodType<Prisma.OrphansUpdateArgs> = z
    .object({
        select: OrphansSelectSchema.optional(),
        include: OrphansIncludeSchema.optional(),
        data: z.union([OrphansUpdateInputSchema, OrphansUncheckedUpdateInputSchema]),
        where: OrphansWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.OrphansUpdateArgs>

export const OrphansUpdateManyArgsSchema: z.ZodType<Prisma.OrphansUpdateManyArgs> = z
    .object({
        data: z.union([OrphansUpdateManyMutationInputSchema, OrphansUncheckedUpdateManyInputSchema]),
        where: OrphansWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.OrphansUpdateManyArgs>

export const OrphansDeleteManyArgsSchema: z.ZodType<Prisma.OrphansDeleteManyArgs> = z
    .object({
        where: OrphansWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.OrphansDeleteManyArgs>

export const Password_reset_tokensCreateArgsSchema: z.ZodType<Prisma.Password_reset_tokensCreateArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        data: z.union([Password_reset_tokensCreateInputSchema, Password_reset_tokensUncheckedCreateInputSchema])
    })
    .strict()

export const Password_reset_tokensUpsertArgsSchema: z.ZodType<Prisma.Password_reset_tokensUpsertArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        where: Password_reset_tokensWhereUniqueInputSchema,
        create: z.union([Password_reset_tokensCreateInputSchema, Password_reset_tokensUncheckedCreateInputSchema]),
        update: z.union([Password_reset_tokensUpdateInputSchema, Password_reset_tokensUncheckedUpdateInputSchema])
    })
    .strict()

export const Password_reset_tokensCreateManyArgsSchema: z.ZodType<Prisma.Password_reset_tokensCreateManyArgs> = z
    .object({
        data: Password_reset_tokensCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const Password_reset_tokensDeleteArgsSchema: z.ZodType<Prisma.Password_reset_tokensDeleteArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        where: Password_reset_tokensWhereUniqueInputSchema
    })
    .strict()

export const Password_reset_tokensUpdateArgsSchema: z.ZodType<Prisma.Password_reset_tokensUpdateArgs> = z
    .object({
        select: Password_reset_tokensSelectSchema.optional(),
        data: z.union([Password_reset_tokensUpdateInputSchema, Password_reset_tokensUncheckedUpdateInputSchema]),
        where: Password_reset_tokensWhereUniqueInputSchema
    })
    .strict()

export const Password_reset_tokensUpdateManyArgsSchema: z.ZodType<Prisma.Password_reset_tokensUpdateManyArgs> = z
    .object({
        data: z.union([
            Password_reset_tokensUpdateManyMutationInputSchema,
            Password_reset_tokensUncheckedUpdateManyInputSchema
        ]),
        where: Password_reset_tokensWhereInputSchema.optional()
    })
    .strict()

export const Password_reset_tokensDeleteManyArgsSchema: z.ZodType<Prisma.Password_reset_tokensDeleteManyArgs> = z
    .object({
        where: Password_reset_tokensWhereInputSchema.optional()
    })
    .strict()

export const PermissionsCreateArgsSchema: z.ZodType<Prisma.PermissionsCreateArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        data: z.union([PermissionsCreateInputSchema, PermissionsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.PermissionsCreateArgs>

export const PermissionsUpsertArgsSchema: z.ZodType<Prisma.PermissionsUpsertArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereUniqueInputSchema,
        create: z.union([PermissionsCreateInputSchema, PermissionsUncheckedCreateInputSchema]),
        update: z.union([PermissionsUpdateInputSchema, PermissionsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.PermissionsUpsertArgs>

export const PermissionsCreateManyArgsSchema: z.ZodType<Prisma.PermissionsCreateManyArgs> = z
    .object({
        data: PermissionsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsCreateManyArgs>

export const PermissionsDeleteArgsSchema: z.ZodType<Prisma.PermissionsDeleteArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        where: PermissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.PermissionsDeleteArgs>

export const PermissionsUpdateArgsSchema: z.ZodType<Prisma.PermissionsUpdateArgs> = z
    .object({
        select: PermissionsSelectSchema.optional(),
        include: PermissionsIncludeSchema.optional(),
        data: z.union([PermissionsUpdateInputSchema, PermissionsUncheckedUpdateInputSchema]),
        where: PermissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.PermissionsUpdateArgs>

export const PermissionsUpdateManyArgsSchema: z.ZodType<Prisma.PermissionsUpdateManyArgs> = z
    .object({
        data: z.union([PermissionsUpdateManyMutationInputSchema, PermissionsUncheckedUpdateManyInputSchema]),
        where: PermissionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsUpdateManyArgs>

export const PermissionsDeleteManyArgsSchema: z.ZodType<Prisma.PermissionsDeleteManyArgs> = z
    .object({
        where: PermissionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.PermissionsDeleteManyArgs>

export const Personal_access_tokensCreateArgsSchema: z.ZodType<Prisma.Personal_access_tokensCreateArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        data: z.union([Personal_access_tokensCreateInputSchema, Personal_access_tokensUncheckedCreateInputSchema])
    })
    .strict()

export const Personal_access_tokensUpsertArgsSchema: z.ZodType<Prisma.Personal_access_tokensUpsertArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        where: Personal_access_tokensWhereUniqueInputSchema,
        create: z.union([Personal_access_tokensCreateInputSchema, Personal_access_tokensUncheckedCreateInputSchema]),
        update: z.union([Personal_access_tokensUpdateInputSchema, Personal_access_tokensUncheckedUpdateInputSchema])
    })
    .strict()

export const Personal_access_tokensCreateManyArgsSchema: z.ZodType<Prisma.Personal_access_tokensCreateManyArgs> = z
    .object({
        data: Personal_access_tokensCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict()

export const Personal_access_tokensDeleteArgsSchema: z.ZodType<Prisma.Personal_access_tokensDeleteArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        where: Personal_access_tokensWhereUniqueInputSchema
    })
    .strict()

export const Personal_access_tokensUpdateArgsSchema: z.ZodType<Prisma.Personal_access_tokensUpdateArgs> = z
    .object({
        select: Personal_access_tokensSelectSchema.optional(),
        data: z.union([Personal_access_tokensUpdateInputSchema, Personal_access_tokensUncheckedUpdateInputSchema]),
        where: Personal_access_tokensWhereUniqueInputSchema
    })
    .strict()

export const Personal_access_tokensUpdateManyArgsSchema: z.ZodType<Prisma.Personal_access_tokensUpdateManyArgs> = z
    .object({
        data: z.union([
            Personal_access_tokensUpdateManyMutationInputSchema,
            Personal_access_tokensUncheckedUpdateManyInputSchema
        ]),
        where: Personal_access_tokensWhereInputSchema.optional()
    })
    .strict()

export const Personal_access_tokensDeleteManyArgsSchema: z.ZodType<Prisma.Personal_access_tokensDeleteManyArgs> = z
    .object({
        where: Personal_access_tokensWhereInputSchema.optional()
    })
    .strict()

export const Role_has_permissionsCreateArgsSchema: z.ZodType<Prisma.Role_has_permissionsCreateArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        data: z.union([Role_has_permissionsCreateInputSchema, Role_has_permissionsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsCreateArgs>

export const Role_has_permissionsUpsertArgsSchema: z.ZodType<Prisma.Role_has_permissionsUpsertArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        where: Role_has_permissionsWhereUniqueInputSchema,
        create: z.union([Role_has_permissionsCreateInputSchema, Role_has_permissionsUncheckedCreateInputSchema]),
        update: z.union([Role_has_permissionsUpdateInputSchema, Role_has_permissionsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsUpsertArgs>

export const Role_has_permissionsCreateManyArgsSchema: z.ZodType<Prisma.Role_has_permissionsCreateManyArgs> = z
    .object({
        data: Role_has_permissionsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsCreateManyArgs>

export const Role_has_permissionsDeleteArgsSchema: z.ZodType<Prisma.Role_has_permissionsDeleteArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        where: Role_has_permissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsDeleteArgs>

export const Role_has_permissionsUpdateArgsSchema: z.ZodType<Prisma.Role_has_permissionsUpdateArgs> = z
    .object({
        select: Role_has_permissionsSelectSchema.optional(),
        include: Role_has_permissionsIncludeSchema.optional(),
        data: z.union([Role_has_permissionsUpdateInputSchema, Role_has_permissionsUncheckedUpdateInputSchema]),
        where: Role_has_permissionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsUpdateArgs>

export const Role_has_permissionsUpdateManyArgsSchema: z.ZodType<Prisma.Role_has_permissionsUpdateManyArgs> = z
    .object({
        data: z.union([
            Role_has_permissionsUpdateManyMutationInputSchema,
            Role_has_permissionsUncheckedUpdateManyInputSchema
        ]),
        where: Role_has_permissionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsUpdateManyArgs>

export const Role_has_permissionsDeleteManyArgsSchema: z.ZodType<Prisma.Role_has_permissionsDeleteManyArgs> = z
    .object({
        where: Role_has_permissionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Role_has_permissionsDeleteManyArgs>

export const RolesCreateArgsSchema: z.ZodType<Prisma.RolesCreateArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        data: z.union([RolesCreateInputSchema, RolesUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.RolesCreateArgs>

export const RolesUpsertArgsSchema: z.ZodType<Prisma.RolesUpsertArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereUniqueInputSchema,
        create: z.union([RolesCreateInputSchema, RolesUncheckedCreateInputSchema]),
        update: z.union([RolesUpdateInputSchema, RolesUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.RolesUpsertArgs>

export const RolesCreateManyArgsSchema: z.ZodType<Prisma.RolesCreateManyArgs> = z
    .object({
        data: RolesCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.RolesCreateManyArgs>

export const RolesDeleteArgsSchema: z.ZodType<Prisma.RolesDeleteArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        where: RolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.RolesDeleteArgs>

export const RolesUpdateArgsSchema: z.ZodType<Prisma.RolesUpdateArgs> = z
    .object({
        select: RolesSelectSchema.optional(),
        include: RolesIncludeSchema.optional(),
        data: z.union([RolesUpdateInputSchema, RolesUncheckedUpdateInputSchema]),
        where: RolesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.RolesUpdateArgs>

export const RolesUpdateManyArgsSchema: z.ZodType<Prisma.RolesUpdateManyArgs> = z
    .object({
        data: z.union([RolesUpdateManyMutationInputSchema, RolesUncheckedUpdateManyInputSchema]),
        where: RolesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.RolesUpdateManyArgs>

export const RolesDeleteManyArgsSchema: z.ZodType<Prisma.RolesDeleteManyArgs> = z
    .object({
        where: RolesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.RolesDeleteManyArgs>

export const Second_sponsorsCreateArgsSchema: z.ZodType<Prisma.Second_sponsorsCreateArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        data: z.union([Second_sponsorsCreateInputSchema, Second_sponsorsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsCreateArgs>

export const Second_sponsorsUpsertArgsSchema: z.ZodType<Prisma.Second_sponsorsUpsertArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereUniqueInputSchema,
        create: z.union([Second_sponsorsCreateInputSchema, Second_sponsorsUncheckedCreateInputSchema]),
        update: z.union([Second_sponsorsUpdateInputSchema, Second_sponsorsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsUpsertArgs>

export const Second_sponsorsCreateManyArgsSchema: z.ZodType<Prisma.Second_sponsorsCreateManyArgs> = z
    .object({
        data: Second_sponsorsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsCreateManyArgs>

export const Second_sponsorsDeleteArgsSchema: z.ZodType<Prisma.Second_sponsorsDeleteArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        where: Second_sponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsDeleteArgs>

export const Second_sponsorsUpdateArgsSchema: z.ZodType<Prisma.Second_sponsorsUpdateArgs> = z
    .object({
        select: Second_sponsorsSelectSchema.optional(),
        include: Second_sponsorsIncludeSchema.optional(),
        data: z.union([Second_sponsorsUpdateInputSchema, Second_sponsorsUncheckedUpdateInputSchema]),
        where: Second_sponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsUpdateArgs>

export const Second_sponsorsUpdateManyArgsSchema: z.ZodType<Prisma.Second_sponsorsUpdateManyArgs> = z
    .object({
        data: z.union([Second_sponsorsUpdateManyMutationInputSchema, Second_sponsorsUncheckedUpdateManyInputSchema]),
        where: Second_sponsorsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsUpdateManyArgs>

export const Second_sponsorsDeleteManyArgsSchema: z.ZodType<Prisma.Second_sponsorsDeleteManyArgs> = z
    .object({
        where: Second_sponsorsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Second_sponsorsDeleteManyArgs>

export const SessionsCreateArgsSchema: z.ZodType<Prisma.SessionsCreateArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        data: z.union([SessionsCreateInputSchema, SessionsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SessionsCreateArgs>

export const SessionsUpsertArgsSchema: z.ZodType<Prisma.SessionsUpsertArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereUniqueInputSchema,
        create: z.union([SessionsCreateInputSchema, SessionsUncheckedCreateInputSchema]),
        update: z.union([SessionsUpdateInputSchema, SessionsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SessionsUpsertArgs>

export const SessionsCreateManyArgsSchema: z.ZodType<Prisma.SessionsCreateManyArgs> = z
    .object({
        data: SessionsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.SessionsCreateManyArgs>

export const SessionsDeleteArgsSchema: z.ZodType<Prisma.SessionsDeleteArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        where: SessionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SessionsDeleteArgs>

export const SessionsUpdateArgsSchema: z.ZodType<Prisma.SessionsUpdateArgs> = z
    .object({
        select: SessionsSelectSchema.optional(),
        include: SessionsIncludeSchema.optional(),
        data: z.union([SessionsUpdateInputSchema, SessionsUncheckedUpdateInputSchema]),
        where: SessionsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SessionsUpdateArgs>

export const SessionsUpdateManyArgsSchema: z.ZodType<Prisma.SessionsUpdateManyArgs> = z
    .object({
        data: z.union([SessionsUpdateManyMutationInputSchema, SessionsUncheckedUpdateManyInputSchema]),
        where: SessionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SessionsUpdateManyArgs>

export const SessionsDeleteManyArgsSchema: z.ZodType<Prisma.SessionsDeleteManyArgs> = z
    .object({
        where: SessionsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SessionsDeleteManyArgs>

export const SettingsCreateArgsSchema: z.ZodType<Prisma.SettingsCreateArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        data: z.union([SettingsCreateInputSchema, SettingsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SettingsCreateArgs>

export const SettingsUpsertArgsSchema: z.ZodType<Prisma.SettingsUpsertArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereUniqueInputSchema,
        create: z.union([SettingsCreateInputSchema, SettingsUncheckedCreateInputSchema]),
        update: z.union([SettingsUpdateInputSchema, SettingsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SettingsUpsertArgs>

export const SettingsCreateManyArgsSchema: z.ZodType<Prisma.SettingsCreateManyArgs> = z
    .object({
        data: SettingsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.SettingsCreateManyArgs>

export const SettingsDeleteArgsSchema: z.ZodType<Prisma.SettingsDeleteArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        where: SettingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SettingsDeleteArgs>

export const SettingsUpdateArgsSchema: z.ZodType<Prisma.SettingsUpdateArgs> = z
    .object({
        select: SettingsSelectSchema.optional(),
        include: SettingsIncludeSchema.optional(),
        data: z.union([SettingsUpdateInputSchema, SettingsUncheckedUpdateInputSchema]),
        where: SettingsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SettingsUpdateArgs>

export const SettingsUpdateManyArgsSchema: z.ZodType<Prisma.SettingsUpdateManyArgs> = z
    .object({
        data: z.union([SettingsUpdateManyMutationInputSchema, SettingsUncheckedUpdateManyInputSchema]),
        where: SettingsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SettingsUpdateManyArgs>

export const SettingsDeleteManyArgsSchema: z.ZodType<Prisma.SettingsDeleteManyArgs> = z
    .object({
        where: SettingsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SettingsDeleteManyArgs>

export const Sponsor_sponsorshipCreateArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        data: z.union([Sponsor_sponsorshipCreateInputSchema, Sponsor_sponsorshipUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipCreateArgs>

export const Sponsor_sponsorshipUpsertArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpsertArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        where: Sponsor_sponsorshipWhereUniqueInputSchema,
        create: z.union([Sponsor_sponsorshipCreateInputSchema, Sponsor_sponsorshipUncheckedCreateInputSchema]),
        update: z.union([Sponsor_sponsorshipUpdateInputSchema, Sponsor_sponsorshipUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipUpsertArgs>

export const Sponsor_sponsorshipCreateManyArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipCreateManyArgs> = z
    .object({
        data: Sponsor_sponsorshipCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipCreateManyArgs>

export const Sponsor_sponsorshipDeleteArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipDeleteArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        where: Sponsor_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipDeleteArgs>

export const Sponsor_sponsorshipUpdateArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateArgs> = z
    .object({
        select: Sponsor_sponsorshipSelectSchema.optional(),
        include: Sponsor_sponsorshipIncludeSchema.optional(),
        data: z.union([Sponsor_sponsorshipUpdateInputSchema, Sponsor_sponsorshipUncheckedUpdateInputSchema]),
        where: Sponsor_sponsorshipWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipUpdateArgs>

export const Sponsor_sponsorshipUpdateManyArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyArgs> = z
    .object({
        data: z.union([
            Sponsor_sponsorshipUpdateManyMutationInputSchema,
            Sponsor_sponsorshipUncheckedUpdateManyInputSchema
        ]),
        where: Sponsor_sponsorshipWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipUpdateManyArgs>

export const Sponsor_sponsorshipDeleteManyArgsSchema: z.ZodType<Prisma.Sponsor_sponsorshipDeleteManyArgs> = z
    .object({
        where: Sponsor_sponsorshipWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.Sponsor_sponsorshipDeleteManyArgs>

export const SponsorsCreateArgsSchema: z.ZodType<Prisma.SponsorsCreateArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        data: z.union([SponsorsCreateInputSchema, SponsorsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SponsorsCreateArgs>

export const SponsorsUpsertArgsSchema: z.ZodType<Prisma.SponsorsUpsertArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereUniqueInputSchema,
        create: z.union([SponsorsCreateInputSchema, SponsorsUncheckedCreateInputSchema]),
        update: z.union([SponsorsUpdateInputSchema, SponsorsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SponsorsUpsertArgs>

export const SponsorsCreateManyArgsSchema: z.ZodType<Prisma.SponsorsCreateManyArgs> = z
    .object({
        data: SponsorsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsCreateManyArgs>

export const SponsorsDeleteArgsSchema: z.ZodType<Prisma.SponsorsDeleteArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        where: SponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorsDeleteArgs>

export const SponsorsUpdateArgsSchema: z.ZodType<Prisma.SponsorsUpdateArgs> = z
    .object({
        select: SponsorsSelectSchema.optional(),
        include: SponsorsIncludeSchema.optional(),
        data: z.union([SponsorsUpdateInputSchema, SponsorsUncheckedUpdateInputSchema]),
        where: SponsorsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorsUpdateArgs>

export const SponsorsUpdateManyArgsSchema: z.ZodType<Prisma.SponsorsUpdateManyArgs> = z
    .object({
        data: z.union([SponsorsUpdateManyMutationInputSchema, SponsorsUncheckedUpdateManyInputSchema]),
        where: SponsorsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsUpdateManyArgs>

export const SponsorsDeleteManyArgsSchema: z.ZodType<Prisma.SponsorsDeleteManyArgs> = z
    .object({
        where: SponsorsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SponsorsDeleteManyArgs>

export const SponsorshipsCreateArgsSchema: z.ZodType<Prisma.SponsorshipsCreateArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        data: z.union([SponsorshipsCreateInputSchema, SponsorshipsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SponsorshipsCreateArgs>

export const SponsorshipsUpsertArgsSchema: z.ZodType<Prisma.SponsorshipsUpsertArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereUniqueInputSchema,
        create: z.union([SponsorshipsCreateInputSchema, SponsorshipsUncheckedCreateInputSchema]),
        update: z.union([SponsorshipsUpdateInputSchema, SponsorshipsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SponsorshipsUpsertArgs>

export const SponsorshipsCreateManyArgsSchema: z.ZodType<Prisma.SponsorshipsCreateManyArgs> = z
    .object({
        data: SponsorshipsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsCreateManyArgs>

export const SponsorshipsDeleteArgsSchema: z.ZodType<Prisma.SponsorshipsDeleteArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        where: SponsorshipsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorshipsDeleteArgs>

export const SponsorshipsUpdateArgsSchema: z.ZodType<Prisma.SponsorshipsUpdateArgs> = z
    .object({
        select: SponsorshipsSelectSchema.optional(),
        include: SponsorshipsIncludeSchema.optional(),
        data: z.union([SponsorshipsUpdateInputSchema, SponsorshipsUncheckedUpdateInputSchema]),
        where: SponsorshipsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SponsorshipsUpdateArgs>

export const SponsorshipsUpdateManyArgsSchema: z.ZodType<Prisma.SponsorshipsUpdateManyArgs> = z
    .object({
        data: z.union([SponsorshipsUpdateManyMutationInputSchema, SponsorshipsUncheckedUpdateManyInputSchema]),
        where: SponsorshipsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsUpdateManyArgs>

export const SponsorshipsDeleteManyArgsSchema: z.ZodType<Prisma.SponsorshipsDeleteManyArgs> = z
    .object({
        where: SponsorshipsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SponsorshipsDeleteManyArgs>

export const SpousesCreateArgsSchema: z.ZodType<Prisma.SpousesCreateArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        data: z.union([SpousesCreateInputSchema, SpousesUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SpousesCreateArgs>

export const SpousesUpsertArgsSchema: z.ZodType<Prisma.SpousesUpsertArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereUniqueInputSchema,
        create: z.union([SpousesCreateInputSchema, SpousesUncheckedCreateInputSchema]),
        update: z.union([SpousesUpdateInputSchema, SpousesUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.SpousesUpsertArgs>

export const SpousesCreateManyArgsSchema: z.ZodType<Prisma.SpousesCreateManyArgs> = z
    .object({
        data: SpousesCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.SpousesCreateManyArgs>

export const SpousesDeleteArgsSchema: z.ZodType<Prisma.SpousesDeleteArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        where: SpousesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SpousesDeleteArgs>

export const SpousesUpdateArgsSchema: z.ZodType<Prisma.SpousesUpdateArgs> = z
    .object({
        select: SpousesSelectSchema.optional(),
        include: SpousesIncludeSchema.optional(),
        data: z.union([SpousesUpdateInputSchema, SpousesUncheckedUpdateInputSchema]),
        where: SpousesWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.SpousesUpdateArgs>

export const SpousesUpdateManyArgsSchema: z.ZodType<Prisma.SpousesUpdateManyArgs> = z
    .object({
        data: z.union([SpousesUpdateManyMutationInputSchema, SpousesUncheckedUpdateManyInputSchema]),
        where: SpousesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SpousesUpdateManyArgs>

export const SpousesDeleteManyArgsSchema: z.ZodType<Prisma.SpousesDeleteManyArgs> = z
    .object({
        where: SpousesWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.SpousesDeleteManyArgs>

export const TenantsCreateArgsSchema: z.ZodType<Prisma.TenantsCreateArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        data: z.union([TenantsCreateInputSchema, TenantsUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.TenantsCreateArgs>

export const TenantsUpsertArgsSchema: z.ZodType<Prisma.TenantsUpsertArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereUniqueInputSchema,
        create: z.union([TenantsCreateInputSchema, TenantsUncheckedCreateInputSchema]),
        update: z.union([TenantsUpdateInputSchema, TenantsUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.TenantsUpsertArgs>

export const TenantsCreateManyArgsSchema: z.ZodType<Prisma.TenantsCreateManyArgs> = z
    .object({
        data: TenantsCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.TenantsCreateManyArgs>

export const TenantsDeleteArgsSchema: z.ZodType<Prisma.TenantsDeleteArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        where: TenantsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.TenantsDeleteArgs>

export const TenantsUpdateArgsSchema: z.ZodType<Prisma.TenantsUpdateArgs> = z
    .object({
        select: TenantsSelectSchema.optional(),
        include: TenantsIncludeSchema.optional(),
        data: z.union([TenantsUpdateInputSchema, TenantsUncheckedUpdateInputSchema]),
        where: TenantsWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.TenantsUpdateArgs>

export const TenantsUpdateManyArgsSchema: z.ZodType<Prisma.TenantsUpdateManyArgs> = z
    .object({
        data: z.union([TenantsUpdateManyMutationInputSchema, TenantsUncheckedUpdateManyInputSchema]),
        where: TenantsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.TenantsUpdateManyArgs>

export const TenantsDeleteManyArgsSchema: z.ZodType<Prisma.TenantsDeleteManyArgs> = z
    .object({
        where: TenantsWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.TenantsDeleteManyArgs>

export const UsersCreateArgsSchema: z.ZodType<Prisma.UsersCreateArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        data: z.union([UsersCreateInputSchema, UsersUncheckedCreateInputSchema])
    })
    .strict() as z.ZodType<Prisma.UsersCreateArgs>

export const UsersUpsertArgsSchema: z.ZodType<Prisma.UsersUpsertArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereUniqueInputSchema,
        create: z.union([UsersCreateInputSchema, UsersUncheckedCreateInputSchema]),
        update: z.union([UsersUpdateInputSchema, UsersUncheckedUpdateInputSchema])
    })
    .strict() as z.ZodType<Prisma.UsersUpsertArgs>

export const UsersCreateManyArgsSchema: z.ZodType<Prisma.UsersCreateManyArgs> = z
    .object({
        data: UsersCreateManyInputSchema.array(),
        skipDuplicates: z.boolean().optional()
    })
    .strict() as z.ZodType<Prisma.UsersCreateManyArgs>

export const UsersDeleteArgsSchema: z.ZodType<Prisma.UsersDeleteArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        where: UsersWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.UsersDeleteArgs>

export const UsersUpdateArgsSchema: z.ZodType<Prisma.UsersUpdateArgs> = z
    .object({
        select: UsersSelectSchema.optional(),
        include: UsersIncludeSchema.optional(),
        data: z.union([UsersUpdateInputSchema, UsersUncheckedUpdateInputSchema]),
        where: UsersWhereUniqueInputSchema
    })
    .strict() as z.ZodType<Prisma.UsersUpdateArgs>

export const UsersUpdateManyArgsSchema: z.ZodType<Prisma.UsersUpdateManyArgs> = z
    .object({
        data: z.union([UsersUpdateManyMutationInputSchema, UsersUncheckedUpdateManyInputSchema]),
        where: UsersWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.UsersUpdateManyArgs>

export const UsersDeleteManyArgsSchema: z.ZodType<Prisma.UsersDeleteManyArgs> = z
    .object({
        where: UsersWhereInputSchema.optional()
    })
    .strict() as z.ZodType<Prisma.UsersDeleteManyArgs>

interface BenefactorsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.BenefactorsArgs
    readonly type: Omit<Prisma.BenefactorsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface CacheGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.CacheArgs
    readonly type: Omit<Prisma.CacheGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Cache_locksGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Cache_locksArgs
    readonly type: Omit<Prisma.Cache_locksGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface DomainsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.DomainsArgs
    readonly type: Omit<Prisma.DomainsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface FamiliesGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.FamiliesArgs
    readonly type: Omit<Prisma.FamiliesGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Family_furnishingGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Family_furnishingArgs
    readonly type: Omit<Prisma.Family_furnishingGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Family_housingGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Family_housingArgs
    readonly type: Omit<Prisma.Family_housingGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Family_sponsorshipGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Family_sponsorshipArgs
    readonly type: Omit<Prisma.Family_sponsorshipGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface FurnishingsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.FurnishingsArgs
    readonly type: Omit<Prisma.FurnishingsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface HousingsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.HousingsArgs
    readonly type: Omit<Prisma.HousingsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Income_sponsorGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Income_sponsorArgs
    readonly type: Omit<Prisma.Income_sponsorGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface IncomesGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.IncomesArgs
    readonly type: Omit<Prisma.IncomesGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface MediaGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.MediaArgs
    readonly type: Omit<Prisma.MediaGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Model_has_permissionsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Model_has_permissionsArgs
    readonly type: Omit<
        Prisma.Model_has_permissionsGetPayload<this['_A']>,
        'Please either choose `select` or `include`'
    >
}

interface Model_has_rolesGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Model_has_rolesArgs
    readonly type: Omit<Prisma.Model_has_rolesGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Orphan_sponsorshipGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Orphan_sponsorshipArgs
    readonly type: Omit<Prisma.Orphan_sponsorshipGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface OrphansGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.OrphansArgs
    readonly type: Omit<Prisma.OrphansGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Password_reset_tokensGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Password_reset_tokensArgs
    readonly type: Omit<
        Prisma.Password_reset_tokensGetPayload<this['_A']>,
        'Please either choose `select` or `include`'
    >
}

interface PermissionsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.PermissionsArgs
    readonly type: Omit<Prisma.PermissionsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Personal_access_tokensGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Personal_access_tokensArgs
    readonly type: Omit<
        Prisma.Personal_access_tokensGetPayload<this['_A']>,
        'Please either choose `select` or `include`'
    >
}

interface Role_has_permissionsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Role_has_permissionsArgs
    readonly type: Omit<Prisma.Role_has_permissionsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface RolesGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.RolesArgs
    readonly type: Omit<Prisma.RolesGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Second_sponsorsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Second_sponsorsArgs
    readonly type: Omit<Prisma.Second_sponsorsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface SessionsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.SessionsArgs
    readonly type: Omit<Prisma.SessionsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface SettingsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.SettingsArgs
    readonly type: Omit<Prisma.SettingsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface Sponsor_sponsorshipGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.Sponsor_sponsorshipArgs
    readonly type: Omit<Prisma.Sponsor_sponsorshipGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface SponsorsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.SponsorsArgs
    readonly type: Omit<Prisma.SponsorsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface SponsorshipsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.SponsorshipsArgs
    readonly type: Omit<Prisma.SponsorshipsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface SpousesGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.SpousesArgs
    readonly type: Omit<Prisma.SpousesGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface TenantsGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.TenantsArgs
    readonly type: Omit<Prisma.TenantsGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

interface UsersGetPayload extends HKT {
    readonly _A?: boolean | null | undefined | Prisma.UsersArgs
    readonly type: Omit<Prisma.UsersGetPayload<this['_A']>, 'Please either choose `select` or `include`'>
}

export const tableSchemas = {
    benefactors: {
        fields: new Map([
            ['id', 'UUID'],
            ['tenant_id', 'TEXT'],
            ['deleted_at', 'TIMESTAMP'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [new Relation('tenants', 'tenant_id', 'id', 'tenants', 'BenefactorsToTenants', 'one')],
        modelSchema: (BenefactorsCreateInputSchema as any)
            .partial()
            .or((BenefactorsUncheckedCreateInputSchema as any).partial()),
        createSchema: BenefactorsCreateArgsSchema,
        createManySchema: BenefactorsCreateManyArgsSchema,
        findUniqueSchema: BenefactorsFindUniqueArgsSchema,
        findSchema: BenefactorsFindFirstArgsSchema,
        updateSchema: BenefactorsUpdateArgsSchema,
        updateManySchema: BenefactorsUpdateManyArgsSchema,
        upsertSchema: BenefactorsUpsertArgsSchema,
        deleteSchema: BenefactorsDeleteArgsSchema,
        deleteManySchema: BenefactorsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof BenefactorsUncheckedCreateInputSchema>,
        Prisma.BenefactorsCreateArgs['data'],
        Prisma.BenefactorsUpdateArgs['data'],
        Prisma.BenefactorsFindFirstArgs['select'],
        Prisma.BenefactorsFindFirstArgs['where'],
        Prisma.BenefactorsFindUniqueArgs['where'],
        Omit<Prisma.BenefactorsInclude, '_count'>,
        Prisma.BenefactorsFindFirstArgs['orderBy'],
        Prisma.BenefactorsScalarFieldEnum,
        BenefactorsGetPayload
    >,
    cache: {
        fields: new Map([
            ['key', 'TEXT'],
            ['value', 'TEXT'],
            ['expiration', 'INT4']
        ]),
        relations: [],
        modelSchema: (CacheCreateInputSchema as any).partial().or((CacheUncheckedCreateInputSchema as any).partial()),
        createSchema: CacheCreateArgsSchema,
        createManySchema: CacheCreateManyArgsSchema,
        findUniqueSchema: CacheFindUniqueArgsSchema,
        findSchema: CacheFindFirstArgsSchema,
        updateSchema: CacheUpdateArgsSchema,
        updateManySchema: CacheUpdateManyArgsSchema,
        upsertSchema: CacheUpsertArgsSchema,
        deleteSchema: CacheDeleteArgsSchema,
        deleteManySchema: CacheDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof CacheUncheckedCreateInputSchema>,
        Prisma.CacheCreateArgs['data'],
        Prisma.CacheUpdateArgs['data'],
        Prisma.CacheFindFirstArgs['select'],
        Prisma.CacheFindFirstArgs['where'],
        Prisma.CacheFindUniqueArgs['where'],
        never,
        Prisma.CacheFindFirstArgs['orderBy'],
        Prisma.CacheScalarFieldEnum,
        CacheGetPayload
    >,
    cache_locks: {
        fields: new Map([
            ['key', 'TEXT'],
            ['owner', 'TEXT'],
            ['expiration', 'INT4']
        ]),
        relations: [],
        modelSchema: (Cache_locksCreateInputSchema as any)
            .partial()
            .or((Cache_locksUncheckedCreateInputSchema as any).partial()),
        createSchema: Cache_locksCreateArgsSchema,
        createManySchema: Cache_locksCreateManyArgsSchema,
        findUniqueSchema: Cache_locksFindUniqueArgsSchema,
        findSchema: Cache_locksFindFirstArgsSchema,
        updateSchema: Cache_locksUpdateArgsSchema,
        updateManySchema: Cache_locksUpdateManyArgsSchema,
        upsertSchema: Cache_locksUpsertArgsSchema,
        deleteSchema: Cache_locksDeleteArgsSchema,
        deleteManySchema: Cache_locksDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Cache_locksUncheckedCreateInputSchema>,
        Prisma.Cache_locksCreateArgs['data'],
        Prisma.Cache_locksUpdateArgs['data'],
        Prisma.Cache_locksFindFirstArgs['select'],
        Prisma.Cache_locksFindFirstArgs['where'],
        Prisma.Cache_locksFindUniqueArgs['where'],
        never,
        Prisma.Cache_locksFindFirstArgs['orderBy'],
        Prisma.Cache_locksScalarFieldEnum,
        Cache_locksGetPayload
    >,
    domains: {
        fields: new Map([
            ['id', 'UUID'],
            ['domain', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [new Relation('tenants', 'tenant_id', 'id', 'tenants', 'DomainsToTenants', 'one')],
        modelSchema: (DomainsCreateInputSchema as any)
            .partial()
            .or((DomainsUncheckedCreateInputSchema as any).partial()),
        createSchema: DomainsCreateArgsSchema,
        createManySchema: DomainsCreateManyArgsSchema,
        findUniqueSchema: DomainsFindUniqueArgsSchema,
        findSchema: DomainsFindFirstArgsSchema,
        updateSchema: DomainsUpdateArgsSchema,
        updateManySchema: DomainsUpdateManyArgsSchema,
        upsertSchema: DomainsUpsertArgsSchema,
        deleteSchema: DomainsDeleteArgsSchema,
        deleteManySchema: DomainsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof DomainsUncheckedCreateInputSchema>,
        Prisma.DomainsCreateArgs['data'],
        Prisma.DomainsUpdateArgs['data'],
        Prisma.DomainsFindFirstArgs['select'],
        Prisma.DomainsFindFirstArgs['where'],
        Prisma.DomainsFindUniqueArgs['where'],
        Omit<Prisma.DomainsInclude, '_count'>,
        Prisma.DomainsFindFirstArgs['orderBy'],
        Prisma.DomainsScalarFieldEnum,
        DomainsGetPayload
    >,
    families: {
        fields: new Map([
            ['id', 'UUID'],
            ['name', 'TEXT'],
            ['report', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'FamiliesToTenants', 'one'),
            new Relation('family_furnishing', '', '', 'family_furnishing', 'FamiliesToFamily_furnishing', 'many'),
            new Relation('family_housing', '', '', 'family_housing', 'FamiliesToFamily_housing', 'many'),
            new Relation('family_sponsorship', '', '', 'family_sponsorship', 'FamiliesToFamily_sponsorship', 'many'),
            new Relation('orphans', '', '', 'orphans', 'FamiliesToOrphans', 'many'),
            new Relation('second_sponsors', '', '', 'second_sponsors', 'FamiliesToSecond_sponsors', 'many'),
            new Relation('spouses', '', '', 'spouses', 'FamiliesToSpouses', 'many')
        ],
        modelSchema: (FamiliesCreateInputSchema as any)
            .partial()
            .or((FamiliesUncheckedCreateInputSchema as any).partial()),
        createSchema: FamiliesCreateArgsSchema,
        createManySchema: FamiliesCreateManyArgsSchema,
        findUniqueSchema: FamiliesFindUniqueArgsSchema,
        findSchema: FamiliesFindFirstArgsSchema,
        updateSchema: FamiliesUpdateArgsSchema,
        updateManySchema: FamiliesUpdateManyArgsSchema,
        upsertSchema: FamiliesUpsertArgsSchema,
        deleteSchema: FamiliesDeleteArgsSchema,
        deleteManySchema: FamiliesDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof FamiliesUncheckedCreateInputSchema>,
        Prisma.FamiliesCreateArgs['data'],
        Prisma.FamiliesUpdateArgs['data'],
        Prisma.FamiliesFindFirstArgs['select'],
        Prisma.FamiliesFindFirstArgs['where'],
        Prisma.FamiliesFindUniqueArgs['where'],
        Omit<Prisma.FamiliesInclude, '_count'>,
        Prisma.FamiliesFindFirstArgs['orderBy'],
        Prisma.FamiliesScalarFieldEnum,
        FamiliesGetPayload
    >,
    family_furnishing: {
        fields: new Map([
            ['id', 'UUID'],
            ['family_id', 'UUID'],
            ['furnishing_id', 'UUID'],
            ['value', 'TEXT']
        ]),
        relations: [
            new Relation('families', 'family_id', 'id', 'families', 'FamiliesToFamily_furnishing', 'one'),
            new Relation('furnishings', 'furnishing_id', 'id', 'furnishings', 'Family_furnishingToFurnishings', 'one')
        ],
        modelSchema: (Family_furnishingCreateInputSchema as any)
            .partial()
            .or((Family_furnishingUncheckedCreateInputSchema as any).partial()),
        createSchema: Family_furnishingCreateArgsSchema,
        createManySchema: Family_furnishingCreateManyArgsSchema,
        findUniqueSchema: Family_furnishingFindUniqueArgsSchema,
        findSchema: Family_furnishingFindFirstArgsSchema,
        updateSchema: Family_furnishingUpdateArgsSchema,
        updateManySchema: Family_furnishingUpdateManyArgsSchema,
        upsertSchema: Family_furnishingUpsertArgsSchema,
        deleteSchema: Family_furnishingDeleteArgsSchema,
        deleteManySchema: Family_furnishingDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Family_furnishingUncheckedCreateInputSchema>,
        Prisma.Family_furnishingCreateArgs['data'],
        Prisma.Family_furnishingUpdateArgs['data'],
        Prisma.Family_furnishingFindFirstArgs['select'],
        Prisma.Family_furnishingFindFirstArgs['where'],
        Prisma.Family_furnishingFindUniqueArgs['where'],
        Omit<Prisma.Family_furnishingInclude, '_count'>,
        Prisma.Family_furnishingFindFirstArgs['orderBy'],
        Prisma.Family_furnishingScalarFieldEnum,
        Family_furnishingGetPayload
    >,
    family_housing: {
        fields: new Map([
            ['id', 'UUID'],
            ['family_id', 'UUID'],
            ['housing_id', 'UUID'],
            ['value', 'TEXT']
        ]),
        relations: [
            new Relation('families', 'family_id', 'id', 'families', 'FamiliesToFamily_housing', 'one'),
            new Relation('housings', 'housing_id', 'id', 'housings', 'Family_housingToHousings', 'one')
        ],
        modelSchema: (Family_housingCreateInputSchema as any)
            .partial()
            .or((Family_housingUncheckedCreateInputSchema as any).partial()),
        createSchema: Family_housingCreateArgsSchema,
        createManySchema: Family_housingCreateManyArgsSchema,
        findUniqueSchema: Family_housingFindUniqueArgsSchema,
        findSchema: Family_housingFindFirstArgsSchema,
        updateSchema: Family_housingUpdateArgsSchema,
        updateManySchema: Family_housingUpdateManyArgsSchema,
        upsertSchema: Family_housingUpsertArgsSchema,
        deleteSchema: Family_housingDeleteArgsSchema,
        deleteManySchema: Family_housingDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Family_housingUncheckedCreateInputSchema>,
        Prisma.Family_housingCreateArgs['data'],
        Prisma.Family_housingUpdateArgs['data'],
        Prisma.Family_housingFindFirstArgs['select'],
        Prisma.Family_housingFindFirstArgs['where'],
        Prisma.Family_housingFindUniqueArgs['where'],
        Omit<Prisma.Family_housingInclude, '_count'>,
        Prisma.Family_housingFindFirstArgs['orderBy'],
        Prisma.Family_housingScalarFieldEnum,
        Family_housingGetPayload
    >,
    family_sponsorship: {
        fields: new Map([
            ['id', 'UUID'],
            ['family_id', 'UUID'],
            ['type', 'TEXT'],
            ['value', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('families', 'family_id', 'id', 'families', 'FamiliesToFamily_sponsorship', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'Family_sponsorshipToTenants', 'one')
        ],
        modelSchema: (Family_sponsorshipCreateInputSchema as any)
            .partial()
            .or((Family_sponsorshipUncheckedCreateInputSchema as any).partial()),
        createSchema: Family_sponsorshipCreateArgsSchema,
        createManySchema: Family_sponsorshipCreateManyArgsSchema,
        findUniqueSchema: Family_sponsorshipFindUniqueArgsSchema,
        findSchema: Family_sponsorshipFindFirstArgsSchema,
        updateSchema: Family_sponsorshipUpdateArgsSchema,
        updateManySchema: Family_sponsorshipUpdateManyArgsSchema,
        upsertSchema: Family_sponsorshipUpsertArgsSchema,
        deleteSchema: Family_sponsorshipDeleteArgsSchema,
        deleteManySchema: Family_sponsorshipDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Family_sponsorshipUncheckedCreateInputSchema>,
        Prisma.Family_sponsorshipCreateArgs['data'],
        Prisma.Family_sponsorshipUpdateArgs['data'],
        Prisma.Family_sponsorshipFindFirstArgs['select'],
        Prisma.Family_sponsorshipFindFirstArgs['where'],
        Prisma.Family_sponsorshipFindUniqueArgs['where'],
        Omit<Prisma.Family_sponsorshipInclude, '_count'>,
        Prisma.Family_sponsorshipFindFirstArgs['orderBy'],
        Prisma.Family_sponsorshipScalarFieldEnum,
        Family_sponsorshipGetPayload
    >,
    furnishings: {
        fields: new Map([
            ['id', 'UUID'],
            ['name', 'TEXT']
        ]),
        relations: [
            new Relation('family_furnishing', '', '', 'family_furnishing', 'Family_furnishingToFurnishings', 'many')
        ],
        modelSchema: (FurnishingsCreateInputSchema as any)
            .partial()
            .or((FurnishingsUncheckedCreateInputSchema as any).partial()),
        createSchema: FurnishingsCreateArgsSchema,
        createManySchema: FurnishingsCreateManyArgsSchema,
        findUniqueSchema: FurnishingsFindUniqueArgsSchema,
        findSchema: FurnishingsFindFirstArgsSchema,
        updateSchema: FurnishingsUpdateArgsSchema,
        updateManySchema: FurnishingsUpdateManyArgsSchema,
        upsertSchema: FurnishingsUpsertArgsSchema,
        deleteSchema: FurnishingsDeleteArgsSchema,
        deleteManySchema: FurnishingsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof FurnishingsUncheckedCreateInputSchema>,
        Prisma.FurnishingsCreateArgs['data'],
        Prisma.FurnishingsUpdateArgs['data'],
        Prisma.FurnishingsFindFirstArgs['select'],
        Prisma.FurnishingsFindFirstArgs['where'],
        Prisma.FurnishingsFindUniqueArgs['where'],
        Omit<Prisma.FurnishingsInclude, '_count'>,
        Prisma.FurnishingsFindFirstArgs['orderBy'],
        Prisma.FurnishingsScalarFieldEnum,
        FurnishingsGetPayload
    >,
    housings: {
        fields: new Map([
            ['id', 'UUID'],
            ['name', 'TEXT']
        ]),
        relations: [new Relation('family_housing', '', '', 'family_housing', 'Family_housingToHousings', 'many')],
        modelSchema: (HousingsCreateInputSchema as any)
            .partial()
            .or((HousingsUncheckedCreateInputSchema as any).partial()),
        createSchema: HousingsCreateArgsSchema,
        createManySchema: HousingsCreateManyArgsSchema,
        findUniqueSchema: HousingsFindUniqueArgsSchema,
        findSchema: HousingsFindFirstArgsSchema,
        updateSchema: HousingsUpdateArgsSchema,
        updateManySchema: HousingsUpdateManyArgsSchema,
        upsertSchema: HousingsUpsertArgsSchema,
        deleteSchema: HousingsDeleteArgsSchema,
        deleteManySchema: HousingsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof HousingsUncheckedCreateInputSchema>,
        Prisma.HousingsCreateArgs['data'],
        Prisma.HousingsUpdateArgs['data'],
        Prisma.HousingsFindFirstArgs['select'],
        Prisma.HousingsFindFirstArgs['where'],
        Prisma.HousingsFindUniqueArgs['where'],
        Omit<Prisma.HousingsInclude, '_count'>,
        Prisma.HousingsFindFirstArgs['orderBy'],
        Prisma.HousingsScalarFieldEnum,
        HousingsGetPayload
    >,
    income_sponsor: {
        fields: new Map([
            ['id', 'UUID'],
            ['income_id', 'UUID'],
            ['sponsor_id', 'UUID'],
            ['tenant_id', 'TEXT'],
            ['value', 'FLOAT8'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('incomes', 'income_id', 'id', 'incomes', 'Income_sponsorToIncomes', 'one'),
            new Relation('sponsors', 'sponsor_id', 'id', 'sponsors', 'Income_sponsorToSponsors', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'Income_sponsorToTenants', 'one')
        ],
        modelSchema: (Income_sponsorCreateInputSchema as any)
            .partial()
            .or((Income_sponsorUncheckedCreateInputSchema as any).partial()),
        createSchema: Income_sponsorCreateArgsSchema,
        createManySchema: Income_sponsorCreateManyArgsSchema,
        findUniqueSchema: Income_sponsorFindUniqueArgsSchema,
        findSchema: Income_sponsorFindFirstArgsSchema,
        updateSchema: Income_sponsorUpdateArgsSchema,
        updateManySchema: Income_sponsorUpdateManyArgsSchema,
        upsertSchema: Income_sponsorUpsertArgsSchema,
        deleteSchema: Income_sponsorDeleteArgsSchema,
        deleteManySchema: Income_sponsorDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Income_sponsorUncheckedCreateInputSchema>,
        Prisma.Income_sponsorCreateArgs['data'],
        Prisma.Income_sponsorUpdateArgs['data'],
        Prisma.Income_sponsorFindFirstArgs['select'],
        Prisma.Income_sponsorFindFirstArgs['where'],
        Prisma.Income_sponsorFindUniqueArgs['where'],
        Omit<Prisma.Income_sponsorInclude, '_count'>,
        Prisma.Income_sponsorFindFirstArgs['orderBy'],
        Prisma.Income_sponsorScalarFieldEnum,
        Income_sponsorGetPayload
    >,
    incomes: {
        fields: new Map([
            ['id', 'UUID'],
            ['name', 'TEXT']
        ]),
        relations: [new Relation('income_sponsor', '', '', 'income_sponsor', 'Income_sponsorToIncomes', 'many')],
        modelSchema: (IncomesCreateInputSchema as any)
            .partial()
            .or((IncomesUncheckedCreateInputSchema as any).partial()),
        createSchema: IncomesCreateArgsSchema,
        createManySchema: IncomesCreateManyArgsSchema,
        findUniqueSchema: IncomesFindUniqueArgsSchema,
        findSchema: IncomesFindFirstArgsSchema,
        updateSchema: IncomesUpdateArgsSchema,
        updateManySchema: IncomesUpdateManyArgsSchema,
        upsertSchema: IncomesUpsertArgsSchema,
        deleteSchema: IncomesDeleteArgsSchema,
        deleteManySchema: IncomesDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof IncomesUncheckedCreateInputSchema>,
        Prisma.IncomesCreateArgs['data'],
        Prisma.IncomesUpdateArgs['data'],
        Prisma.IncomesFindFirstArgs['select'],
        Prisma.IncomesFindFirstArgs['where'],
        Prisma.IncomesFindUniqueArgs['where'],
        Omit<Prisma.IncomesInclude, '_count'>,
        Prisma.IncomesFindFirstArgs['orderBy'],
        Prisma.IncomesScalarFieldEnum,
        IncomesGetPayload
    >,
    media: {
        fields: new Map([
            ['id', 'UUID'],
            ['model_type', 'TEXT'],
            ['model_id', 'INT8'],
            ['uuid', 'UUID'],
            ['collection_name', 'TEXT'],
            ['name', 'TEXT'],
            ['file_name', 'TEXT'],
            ['mime_type', 'TEXT'],
            ['disk', 'TEXT'],
            ['conversions_disk', 'TEXT'],
            ['size', 'INT8'],
            ['manipulations', 'JSONB'],
            ['custom_properties', 'JSONB'],
            ['generated_conversions', 'JSONB'],
            ['responsive_images', 'JSONB'],
            ['order_column', 'INT4'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [],
        modelSchema: (MediaCreateInputSchema as any).partial().or((MediaUncheckedCreateInputSchema as any).partial()),
        createSchema: MediaCreateArgsSchema,
        createManySchema: MediaCreateManyArgsSchema,
        findUniqueSchema: MediaFindUniqueArgsSchema,
        findSchema: MediaFindFirstArgsSchema,
        updateSchema: MediaUpdateArgsSchema,
        updateManySchema: MediaUpdateManyArgsSchema,
        upsertSchema: MediaUpsertArgsSchema,
        deleteSchema: MediaDeleteArgsSchema,
        deleteManySchema: MediaDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof MediaUncheckedCreateInputSchema>,
        Prisma.MediaCreateArgs['data'],
        Prisma.MediaUpdateArgs['data'],
        Prisma.MediaFindFirstArgs['select'],
        Prisma.MediaFindFirstArgs['where'],
        Prisma.MediaFindUniqueArgs['where'],
        never,
        Prisma.MediaFindFirstArgs['orderBy'],
        Prisma.MediaScalarFieldEnum,
        MediaGetPayload
    >,
    model_has_permissions: {
        fields: new Map([
            ['permission_id', 'UUID'],
            ['model_type', 'TEXT'],
            ['model_uuid', 'UUID']
        ]),
        relations: [
            new Relation(
                'permissions',
                'permission_id',
                'uuid',
                'permissions',
                'Model_has_permissionsToPermissions',
                'one'
            )
        ],
        modelSchema: (Model_has_permissionsCreateInputSchema as any)
            .partial()
            .or((Model_has_permissionsUncheckedCreateInputSchema as any).partial()),
        createSchema: Model_has_permissionsCreateArgsSchema,
        createManySchema: Model_has_permissionsCreateManyArgsSchema,
        findUniqueSchema: Model_has_permissionsFindUniqueArgsSchema,
        findSchema: Model_has_permissionsFindFirstArgsSchema,
        updateSchema: Model_has_permissionsUpdateArgsSchema,
        updateManySchema: Model_has_permissionsUpdateManyArgsSchema,
        upsertSchema: Model_has_permissionsUpsertArgsSchema,
        deleteSchema: Model_has_permissionsDeleteArgsSchema,
        deleteManySchema: Model_has_permissionsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Model_has_permissionsUncheckedCreateInputSchema>,
        Prisma.Model_has_permissionsCreateArgs['data'],
        Prisma.Model_has_permissionsUpdateArgs['data'],
        Prisma.Model_has_permissionsFindFirstArgs['select'],
        Prisma.Model_has_permissionsFindFirstArgs['where'],
        Prisma.Model_has_permissionsFindUniqueArgs['where'],
        Omit<Prisma.Model_has_permissionsInclude, '_count'>,
        Prisma.Model_has_permissionsFindFirstArgs['orderBy'],
        Prisma.Model_has_permissionsScalarFieldEnum,
        Model_has_permissionsGetPayload
    >,
    model_has_roles: {
        fields: new Map([
            ['role_id', 'UUID'],
            ['model_type', 'TEXT'],
            ['model_uuid', 'UUID']
        ]),
        relations: [new Relation('roles', 'role_id', 'uuid', 'roles', 'Model_has_rolesToRoles', 'one')],
        modelSchema: (Model_has_rolesCreateInputSchema as any)
            .partial()
            .or((Model_has_rolesUncheckedCreateInputSchema as any).partial()),
        createSchema: Model_has_rolesCreateArgsSchema,
        createManySchema: Model_has_rolesCreateManyArgsSchema,
        findUniqueSchema: Model_has_rolesFindUniqueArgsSchema,
        findSchema: Model_has_rolesFindFirstArgsSchema,
        updateSchema: Model_has_rolesUpdateArgsSchema,
        updateManySchema: Model_has_rolesUpdateManyArgsSchema,
        upsertSchema: Model_has_rolesUpsertArgsSchema,
        deleteSchema: Model_has_rolesDeleteArgsSchema,
        deleteManySchema: Model_has_rolesDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Model_has_rolesUncheckedCreateInputSchema>,
        Prisma.Model_has_rolesCreateArgs['data'],
        Prisma.Model_has_rolesUpdateArgs['data'],
        Prisma.Model_has_rolesFindFirstArgs['select'],
        Prisma.Model_has_rolesFindFirstArgs['where'],
        Prisma.Model_has_rolesFindUniqueArgs['where'],
        Omit<Prisma.Model_has_rolesInclude, '_count'>,
        Prisma.Model_has_rolesFindFirstArgs['orderBy'],
        Prisma.Model_has_rolesScalarFieldEnum,
        Model_has_rolesGetPayload
    >,
    orphan_sponsorship: {
        fields: new Map([
            ['id', 'UUID'],
            ['orphan_id', 'UUID'],
            ['type', 'TEXT'],
            ['value', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('orphans', 'orphan_id', 'id', 'orphans', 'Orphan_sponsorshipToOrphans', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'Orphan_sponsorshipToTenants', 'one')
        ],
        modelSchema: (Orphan_sponsorshipCreateInputSchema as any)
            .partial()
            .or((Orphan_sponsorshipUncheckedCreateInputSchema as any).partial()),
        createSchema: Orphan_sponsorshipCreateArgsSchema,
        createManySchema: Orphan_sponsorshipCreateManyArgsSchema,
        findUniqueSchema: Orphan_sponsorshipFindUniqueArgsSchema,
        findSchema: Orphan_sponsorshipFindFirstArgsSchema,
        updateSchema: Orphan_sponsorshipUpdateArgsSchema,
        updateManySchema: Orphan_sponsorshipUpdateManyArgsSchema,
        upsertSchema: Orphan_sponsorshipUpsertArgsSchema,
        deleteSchema: Orphan_sponsorshipDeleteArgsSchema,
        deleteManySchema: Orphan_sponsorshipDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Orphan_sponsorshipUncheckedCreateInputSchema>,
        Prisma.Orphan_sponsorshipCreateArgs['data'],
        Prisma.Orphan_sponsorshipUpdateArgs['data'],
        Prisma.Orphan_sponsorshipFindFirstArgs['select'],
        Prisma.Orphan_sponsorshipFindFirstArgs['where'],
        Prisma.Orphan_sponsorshipFindUniqueArgs['where'],
        Omit<Prisma.Orphan_sponsorshipInclude, '_count'>,
        Prisma.Orphan_sponsorshipFindFirstArgs['orderBy'],
        Prisma.Orphan_sponsorshipScalarFieldEnum,
        Orphan_sponsorshipGetPayload
    >,
    orphans: {
        fields: new Map([
            ['id', 'UUID'],
            ['first_name', 'TEXT'],
            ['last_name', 'TEXT'],
            ['birth_date', 'DATE'],
            ['family_status', 'TEXT'],
            ['health_status', 'TEXT'],
            ['academic_level', 'TEXT'],
            ['shoes_size', 'TEXT'],
            ['pants_size', 'TEXT'],
            ['shirt_size', 'TEXT'],
            ['note', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['family_id', 'UUID'],
            ['created_by', 'UUID'],
            ['deleted_by', 'UUID'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('orphan_sponsorship', '', '', 'orphan_sponsorship', 'Orphan_sponsorshipToOrphans', 'many'),
            new Relation(
                'users_orphans_created_byTousers',
                'created_by',
                'id',
                'users',
                'orphans_created_byTousers',
                'one'
            ),
            new Relation(
                'users_orphans_deleted_byTousers',
                'deleted_by',
                'id',
                'users',
                'orphans_deleted_byTousers',
                'one'
            ),
            new Relation('families', 'family_id', 'id', 'families', 'FamiliesToOrphans', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'OrphansToTenants', 'one')
        ],
        modelSchema: (OrphansCreateInputSchema as any)
            .partial()
            .or((OrphansUncheckedCreateInputSchema as any).partial()),
        createSchema: OrphansCreateArgsSchema,
        createManySchema: OrphansCreateManyArgsSchema,
        findUniqueSchema: OrphansFindUniqueArgsSchema,
        findSchema: OrphansFindFirstArgsSchema,
        updateSchema: OrphansUpdateArgsSchema,
        updateManySchema: OrphansUpdateManyArgsSchema,
        upsertSchema: OrphansUpsertArgsSchema,
        deleteSchema: OrphansDeleteArgsSchema,
        deleteManySchema: OrphansDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof OrphansUncheckedCreateInputSchema>,
        Prisma.OrphansCreateArgs['data'],
        Prisma.OrphansUpdateArgs['data'],
        Prisma.OrphansFindFirstArgs['select'],
        Prisma.OrphansFindFirstArgs['where'],
        Prisma.OrphansFindUniqueArgs['where'],
        Omit<Prisma.OrphansInclude, '_count'>,
        Prisma.OrphansFindFirstArgs['orderBy'],
        Prisma.OrphansScalarFieldEnum,
        OrphansGetPayload
    >,
    password_reset_tokens: {
        fields: new Map([
            ['email', 'TEXT'],
            ['token', 'TEXT'],
            ['created_at', 'TIMESTAMP']
        ]),
        relations: [],
        modelSchema: (Password_reset_tokensCreateInputSchema as any)
            .partial()
            .or((Password_reset_tokensUncheckedCreateInputSchema as any).partial()),
        createSchema: Password_reset_tokensCreateArgsSchema,
        createManySchema: Password_reset_tokensCreateManyArgsSchema,
        findUniqueSchema: Password_reset_tokensFindUniqueArgsSchema,
        findSchema: Password_reset_tokensFindFirstArgsSchema,
        updateSchema: Password_reset_tokensUpdateArgsSchema,
        updateManySchema: Password_reset_tokensUpdateManyArgsSchema,
        upsertSchema: Password_reset_tokensUpsertArgsSchema,
        deleteSchema: Password_reset_tokensDeleteArgsSchema,
        deleteManySchema: Password_reset_tokensDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Password_reset_tokensUncheckedCreateInputSchema>,
        Prisma.Password_reset_tokensCreateArgs['data'],
        Prisma.Password_reset_tokensUpdateArgs['data'],
        Prisma.Password_reset_tokensFindFirstArgs['select'],
        Prisma.Password_reset_tokensFindFirstArgs['where'],
        Prisma.Password_reset_tokensFindUniqueArgs['where'],
        never,
        Prisma.Password_reset_tokensFindFirstArgs['orderBy'],
        Prisma.Password_reset_tokensScalarFieldEnum,
        Password_reset_tokensGetPayload
    >,
    permissions: {
        fields: new Map([
            ['uuid', 'UUID'],
            ['name', 'TEXT'],
            ['guard_name', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation(
                'model_has_permissions',
                '',
                '',
                'model_has_permissions',
                'Model_has_permissionsToPermissions',
                'many'
            ),
            new Relation(
                'role_has_permissions',
                '',
                '',
                'role_has_permissions',
                'PermissionsToRole_has_permissions',
                'many'
            )
        ],
        modelSchema: (PermissionsCreateInputSchema as any)
            .partial()
            .or((PermissionsUncheckedCreateInputSchema as any).partial()),
        createSchema: PermissionsCreateArgsSchema,
        createManySchema: PermissionsCreateManyArgsSchema,
        findUniqueSchema: PermissionsFindUniqueArgsSchema,
        findSchema: PermissionsFindFirstArgsSchema,
        updateSchema: PermissionsUpdateArgsSchema,
        updateManySchema: PermissionsUpdateManyArgsSchema,
        upsertSchema: PermissionsUpsertArgsSchema,
        deleteSchema: PermissionsDeleteArgsSchema,
        deleteManySchema: PermissionsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof PermissionsUncheckedCreateInputSchema>,
        Prisma.PermissionsCreateArgs['data'],
        Prisma.PermissionsUpdateArgs['data'],
        Prisma.PermissionsFindFirstArgs['select'],
        Prisma.PermissionsFindFirstArgs['where'],
        Prisma.PermissionsFindUniqueArgs['where'],
        Omit<Prisma.PermissionsInclude, '_count'>,
        Prisma.PermissionsFindFirstArgs['orderBy'],
        Prisma.PermissionsScalarFieldEnum,
        PermissionsGetPayload
    >,
    personal_access_tokens: {
        fields: new Map([
            ['id', 'UUID'],
            ['tokenable_type', 'TEXT'],
            ['tokenable_id', 'UUID'],
            ['name', 'TEXT'],
            ['token', 'TEXT'],
            ['abilities', 'TEXT'],
            ['last_used_at', 'TIMESTAMP'],
            ['expires_at', 'TIMESTAMP'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [],
        modelSchema: (Personal_access_tokensCreateInputSchema as any)
            .partial()
            .or((Personal_access_tokensUncheckedCreateInputSchema as any).partial()),
        createSchema: Personal_access_tokensCreateArgsSchema,
        createManySchema: Personal_access_tokensCreateManyArgsSchema,
        findUniqueSchema: Personal_access_tokensFindUniqueArgsSchema,
        findSchema: Personal_access_tokensFindFirstArgsSchema,
        updateSchema: Personal_access_tokensUpdateArgsSchema,
        updateManySchema: Personal_access_tokensUpdateManyArgsSchema,
        upsertSchema: Personal_access_tokensUpsertArgsSchema,
        deleteSchema: Personal_access_tokensDeleteArgsSchema,
        deleteManySchema: Personal_access_tokensDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Personal_access_tokensUncheckedCreateInputSchema>,
        Prisma.Personal_access_tokensCreateArgs['data'],
        Prisma.Personal_access_tokensUpdateArgs['data'],
        Prisma.Personal_access_tokensFindFirstArgs['select'],
        Prisma.Personal_access_tokensFindFirstArgs['where'],
        Prisma.Personal_access_tokensFindUniqueArgs['where'],
        never,
        Prisma.Personal_access_tokensFindFirstArgs['orderBy'],
        Prisma.Personal_access_tokensScalarFieldEnum,
        Personal_access_tokensGetPayload
    >,
    role_has_permissions: {
        fields: new Map([
            ['permission_id', 'UUID'],
            ['role_id', 'UUID']
        ]),
        relations: [
            new Relation(
                'permissions',
                'permission_id',
                'uuid',
                'permissions',
                'PermissionsToRole_has_permissions',
                'one'
            ),
            new Relation('roles', 'role_id', 'uuid', 'roles', 'Role_has_permissionsToRoles', 'one')
        ],
        modelSchema: (Role_has_permissionsCreateInputSchema as any)
            .partial()
            .or((Role_has_permissionsUncheckedCreateInputSchema as any).partial()),
        createSchema: Role_has_permissionsCreateArgsSchema,
        createManySchema: Role_has_permissionsCreateManyArgsSchema,
        findUniqueSchema: Role_has_permissionsFindUniqueArgsSchema,
        findSchema: Role_has_permissionsFindFirstArgsSchema,
        updateSchema: Role_has_permissionsUpdateArgsSchema,
        updateManySchema: Role_has_permissionsUpdateManyArgsSchema,
        upsertSchema: Role_has_permissionsUpsertArgsSchema,
        deleteSchema: Role_has_permissionsDeleteArgsSchema,
        deleteManySchema: Role_has_permissionsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Role_has_permissionsUncheckedCreateInputSchema>,
        Prisma.Role_has_permissionsCreateArgs['data'],
        Prisma.Role_has_permissionsUpdateArgs['data'],
        Prisma.Role_has_permissionsFindFirstArgs['select'],
        Prisma.Role_has_permissionsFindFirstArgs['where'],
        Prisma.Role_has_permissionsFindUniqueArgs['where'],
        Omit<Prisma.Role_has_permissionsInclude, '_count'>,
        Prisma.Role_has_permissionsFindFirstArgs['orderBy'],
        Prisma.Role_has_permissionsScalarFieldEnum,
        Role_has_permissionsGetPayload
    >,
    roles: {
        fields: new Map([
            ['uuid', 'UUID'],
            ['name', 'TEXT'],
            ['guard_name', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('model_has_roles', '', '', 'model_has_roles', 'Model_has_rolesToRoles', 'many'),
            new Relation('role_has_permissions', '', '', 'role_has_permissions', 'Role_has_permissionsToRoles', 'many')
        ],
        modelSchema: (RolesCreateInputSchema as any).partial().or((RolesUncheckedCreateInputSchema as any).partial()),
        createSchema: RolesCreateArgsSchema,
        createManySchema: RolesCreateManyArgsSchema,
        findUniqueSchema: RolesFindUniqueArgsSchema,
        findSchema: RolesFindFirstArgsSchema,
        updateSchema: RolesUpdateArgsSchema,
        updateManySchema: RolesUpdateManyArgsSchema,
        upsertSchema: RolesUpsertArgsSchema,
        deleteSchema: RolesDeleteArgsSchema,
        deleteManySchema: RolesDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof RolesUncheckedCreateInputSchema>,
        Prisma.RolesCreateArgs['data'],
        Prisma.RolesUpdateArgs['data'],
        Prisma.RolesFindFirstArgs['select'],
        Prisma.RolesFindFirstArgs['where'],
        Prisma.RolesFindUniqueArgs['where'],
        Omit<Prisma.RolesInclude, '_count'>,
        Prisma.RolesFindFirstArgs['orderBy'],
        Prisma.RolesScalarFieldEnum,
        RolesGetPayload
    >,
    second_sponsors: {
        fields: new Map([
            ['id', 'UUID'],
            ['first_name', 'TEXT'],
            ['last_name', 'TEXT'],
            ['degree_of_kinship', 'TEXT'],
            ['phone_number', 'TEXT'],
            ['address', 'TEXT'],
            ['income', 'FLOAT8'],
            ['family_id', 'UUID'],
            ['tenant_id', 'TEXT'],
            ['deleted_at', 'TIMESTAMP'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('families', 'family_id', 'id', 'families', 'FamiliesToSecond_sponsors', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'Second_sponsorsToTenants', 'one')
        ],
        modelSchema: (Second_sponsorsCreateInputSchema as any)
            .partial()
            .or((Second_sponsorsUncheckedCreateInputSchema as any).partial()),
        createSchema: Second_sponsorsCreateArgsSchema,
        createManySchema: Second_sponsorsCreateManyArgsSchema,
        findUniqueSchema: Second_sponsorsFindUniqueArgsSchema,
        findSchema: Second_sponsorsFindFirstArgsSchema,
        updateSchema: Second_sponsorsUpdateArgsSchema,
        updateManySchema: Second_sponsorsUpdateManyArgsSchema,
        upsertSchema: Second_sponsorsUpsertArgsSchema,
        deleteSchema: Second_sponsorsDeleteArgsSchema,
        deleteManySchema: Second_sponsorsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Second_sponsorsUncheckedCreateInputSchema>,
        Prisma.Second_sponsorsCreateArgs['data'],
        Prisma.Second_sponsorsUpdateArgs['data'],
        Prisma.Second_sponsorsFindFirstArgs['select'],
        Prisma.Second_sponsorsFindFirstArgs['where'],
        Prisma.Second_sponsorsFindUniqueArgs['where'],
        Omit<Prisma.Second_sponsorsInclude, '_count'>,
        Prisma.Second_sponsorsFindFirstArgs['orderBy'],
        Prisma.Second_sponsorsScalarFieldEnum,
        Second_sponsorsGetPayload
    >,
    sessions: {
        fields: new Map([
            ['id', 'TEXT'],
            ['user_id', 'UUID'],
            ['ip_address', 'TEXT'],
            ['user_agent', 'TEXT'],
            ['payload', 'TEXT'],
            ['last_activity', 'INT4']
        ]),
        relations: [new Relation('users', 'user_id', 'id', 'users', 'SessionsToUsers', 'one')],
        modelSchema: (SessionsCreateInputSchema as any)
            .partial()
            .or((SessionsUncheckedCreateInputSchema as any).partial()),
        createSchema: SessionsCreateArgsSchema,
        createManySchema: SessionsCreateManyArgsSchema,
        findUniqueSchema: SessionsFindUniqueArgsSchema,
        findSchema: SessionsFindFirstArgsSchema,
        updateSchema: SessionsUpdateArgsSchema,
        updateManySchema: SessionsUpdateManyArgsSchema,
        upsertSchema: SessionsUpsertArgsSchema,
        deleteSchema: SessionsDeleteArgsSchema,
        deleteManySchema: SessionsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof SessionsUncheckedCreateInputSchema>,
        Prisma.SessionsCreateArgs['data'],
        Prisma.SessionsUpdateArgs['data'],
        Prisma.SessionsFindFirstArgs['select'],
        Prisma.SessionsFindFirstArgs['where'],
        Prisma.SessionsFindUniqueArgs['where'],
        Omit<Prisma.SessionsInclude, '_count'>,
        Prisma.SessionsFindFirstArgs['orderBy'],
        Prisma.SessionsScalarFieldEnum,
        SessionsGetPayload
    >,
    settings: {
        fields: new Map([
            ['id', 'UUID'],
            ['user_id', 'UUID'],
            ['theme', 'TEXT'],
            ['color_scheme', 'TEXT'],
            ['layout', 'TEXT'],
            ['appearance', 'TEXT'],
            ['notifications', 'JSONB'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [new Relation('users', 'user_id', 'id', 'users', 'SettingsToUsers', 'one')],
        modelSchema: (SettingsCreateInputSchema as any)
            .partial()
            .or((SettingsUncheckedCreateInputSchema as any).partial()),
        createSchema: SettingsCreateArgsSchema,
        createManySchema: SettingsCreateManyArgsSchema,
        findUniqueSchema: SettingsFindUniqueArgsSchema,
        findSchema: SettingsFindFirstArgsSchema,
        updateSchema: SettingsUpdateArgsSchema,
        updateManySchema: SettingsUpdateManyArgsSchema,
        upsertSchema: SettingsUpsertArgsSchema,
        deleteSchema: SettingsDeleteArgsSchema,
        deleteManySchema: SettingsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof SettingsUncheckedCreateInputSchema>,
        Prisma.SettingsCreateArgs['data'],
        Prisma.SettingsUpdateArgs['data'],
        Prisma.SettingsFindFirstArgs['select'],
        Prisma.SettingsFindFirstArgs['where'],
        Prisma.SettingsFindUniqueArgs['where'],
        Omit<Prisma.SettingsInclude, '_count'>,
        Prisma.SettingsFindFirstArgs['orderBy'],
        Prisma.SettingsScalarFieldEnum,
        SettingsGetPayload
    >,
    sponsor_sponsorship: {
        fields: new Map([
            ['id', 'UUID'],
            ['sponsor_id', 'UUID'],
            ['type', 'TEXT'],
            ['value', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('sponsors', 'sponsor_id', 'id', 'sponsors', 'Sponsor_sponsorshipToSponsors', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'Sponsor_sponsorshipToTenants', 'one')
        ],
        modelSchema: (Sponsor_sponsorshipCreateInputSchema as any)
            .partial()
            .or((Sponsor_sponsorshipUncheckedCreateInputSchema as any).partial()),
        createSchema: Sponsor_sponsorshipCreateArgsSchema,
        createManySchema: Sponsor_sponsorshipCreateManyArgsSchema,
        findUniqueSchema: Sponsor_sponsorshipFindUniqueArgsSchema,
        findSchema: Sponsor_sponsorshipFindFirstArgsSchema,
        updateSchema: Sponsor_sponsorshipUpdateArgsSchema,
        updateManySchema: Sponsor_sponsorshipUpdateManyArgsSchema,
        upsertSchema: Sponsor_sponsorshipUpsertArgsSchema,
        deleteSchema: Sponsor_sponsorshipDeleteArgsSchema,
        deleteManySchema: Sponsor_sponsorshipDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof Sponsor_sponsorshipUncheckedCreateInputSchema>,
        Prisma.Sponsor_sponsorshipCreateArgs['data'],
        Prisma.Sponsor_sponsorshipUpdateArgs['data'],
        Prisma.Sponsor_sponsorshipFindFirstArgs['select'],
        Prisma.Sponsor_sponsorshipFindFirstArgs['where'],
        Prisma.Sponsor_sponsorshipFindUniqueArgs['where'],
        Omit<Prisma.Sponsor_sponsorshipInclude, '_count'>,
        Prisma.Sponsor_sponsorshipFindFirstArgs['orderBy'],
        Prisma.Sponsor_sponsorshipScalarFieldEnum,
        Sponsor_sponsorshipGetPayload
    >,
    sponsors: {
        fields: new Map([
            ['id', 'UUID'],
            ['zone_id', 'UUID'],
            ['file_number', 'INT4'],
            ['start_date', 'DATE'],
            ['name', 'TEXT'],
            ['address', 'TEXT'],
            ['phone_number', 'TEXT'],
            ['sponsorship_type', 'TEXT'],
            ['birth_date', 'DATE'],
            ['father_name', 'TEXT'],
            ['mother_name', 'TEXT'],
            ['birth_certificate_number', 'TEXT'],
            ['academic_level', 'TEXT'],
            ['function', 'TEXT'],
            ['health_status', 'TEXT'],
            ['diploma', 'TEXT'],
            ['card_number', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_by', 'UUID'],
            ['deleted_by', 'UUID'],
            ['deleted_at', 'TIMESTAMP'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('income_sponsor', '', '', 'income_sponsor', 'Income_sponsorToSponsors', 'many'),
            new Relation('sponsor_sponsorship', '', '', 'sponsor_sponsorship', 'Sponsor_sponsorshipToSponsors', 'many'),
            new Relation(
                'users_sponsors_created_byTousers',
                'created_by',
                'id',
                'users',
                'sponsors_created_byTousers',
                'one'
            ),
            new Relation(
                'users_sponsors_deleted_byTousers',
                'deleted_by',
                'id',
                'users',
                'sponsors_deleted_byTousers',
                'one'
            ),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'SponsorsToTenants', 'one')
        ],
        modelSchema: (SponsorsCreateInputSchema as any)
            .partial()
            .or((SponsorsUncheckedCreateInputSchema as any).partial()),
        createSchema: SponsorsCreateArgsSchema,
        createManySchema: SponsorsCreateManyArgsSchema,
        findUniqueSchema: SponsorsFindUniqueArgsSchema,
        findSchema: SponsorsFindFirstArgsSchema,
        updateSchema: SponsorsUpdateArgsSchema,
        updateManySchema: SponsorsUpdateManyArgsSchema,
        upsertSchema: SponsorsUpsertArgsSchema,
        deleteSchema: SponsorsDeleteArgsSchema,
        deleteManySchema: SponsorsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof SponsorsUncheckedCreateInputSchema>,
        Prisma.SponsorsCreateArgs['data'],
        Prisma.SponsorsUpdateArgs['data'],
        Prisma.SponsorsFindFirstArgs['select'],
        Prisma.SponsorsFindFirstArgs['where'],
        Prisma.SponsorsFindUniqueArgs['where'],
        Omit<Prisma.SponsorsInclude, '_count'>,
        Prisma.SponsorsFindFirstArgs['orderBy'],
        Prisma.SponsorsScalarFieldEnum,
        SponsorsGetPayload
    >,
    sponsorships: {
        fields: new Map([
            ['id', 'UUID'],
            ['type', 'TEXT'],
            ['name', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['deleted_at', 'TIMESTAMP'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [new Relation('tenants', 'tenant_id', 'id', 'tenants', 'SponsorshipsToTenants', 'one')],
        modelSchema: (SponsorshipsCreateInputSchema as any)
            .partial()
            .or((SponsorshipsUncheckedCreateInputSchema as any).partial()),
        createSchema: SponsorshipsCreateArgsSchema,
        createManySchema: SponsorshipsCreateManyArgsSchema,
        findUniqueSchema: SponsorshipsFindUniqueArgsSchema,
        findSchema: SponsorshipsFindFirstArgsSchema,
        updateSchema: SponsorshipsUpdateArgsSchema,
        updateManySchema: SponsorshipsUpdateManyArgsSchema,
        upsertSchema: SponsorshipsUpsertArgsSchema,
        deleteSchema: SponsorshipsDeleteArgsSchema,
        deleteManySchema: SponsorshipsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof SponsorshipsUncheckedCreateInputSchema>,
        Prisma.SponsorshipsCreateArgs['data'],
        Prisma.SponsorshipsUpdateArgs['data'],
        Prisma.SponsorshipsFindFirstArgs['select'],
        Prisma.SponsorshipsFindFirstArgs['where'],
        Prisma.SponsorshipsFindUniqueArgs['where'],
        Omit<Prisma.SponsorshipsInclude, '_count'>,
        Prisma.SponsorshipsFindFirstArgs['orderBy'],
        Prisma.SponsorshipsScalarFieldEnum,
        SponsorshipsGetPayload
    >,
    spouses: {
        fields: new Map([
            ['id', 'UUID'],
            ['first_name', 'TEXT'],
            ['last_name', 'TEXT'],
            ['birth_date', 'DATE'],
            ['death_date', 'DATE'],
            ['function', 'TEXT'],
            ['income', 'FLOAT8'],
            ['family_id', 'UUID'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('families', 'family_id', 'id', 'families', 'FamiliesToSpouses', 'one'),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'SpousesToTenants', 'one')
        ],
        modelSchema: (SpousesCreateInputSchema as any)
            .partial()
            .or((SpousesUncheckedCreateInputSchema as any).partial()),
        createSchema: SpousesCreateArgsSchema,
        createManySchema: SpousesCreateManyArgsSchema,
        findUniqueSchema: SpousesFindUniqueArgsSchema,
        findSchema: SpousesFindFirstArgsSchema,
        updateSchema: SpousesUpdateArgsSchema,
        updateManySchema: SpousesUpdateManyArgsSchema,
        upsertSchema: SpousesUpsertArgsSchema,
        deleteSchema: SpousesDeleteArgsSchema,
        deleteManySchema: SpousesDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof SpousesUncheckedCreateInputSchema>,
        Prisma.SpousesCreateArgs['data'],
        Prisma.SpousesUpdateArgs['data'],
        Prisma.SpousesFindFirstArgs['select'],
        Prisma.SpousesFindFirstArgs['where'],
        Prisma.SpousesFindUniqueArgs['where'],
        Omit<Prisma.SpousesInclude, '_count'>,
        Prisma.SpousesFindFirstArgs['orderBy'],
        Prisma.SpousesScalarFieldEnum,
        SpousesGetPayload
    >,
    tenants: {
        fields: new Map([
            ['id', 'TEXT'],
            ['data', 'JSONB'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('benefactors', '', '', 'benefactors', 'BenefactorsToTenants', 'many'),
            new Relation('domains', '', '', 'domains', 'DomainsToTenants', 'many'),
            new Relation('families', '', '', 'families', 'FamiliesToTenants', 'many'),
            new Relation('family_sponsorship', '', '', 'family_sponsorship', 'Family_sponsorshipToTenants', 'many'),
            new Relation('income_sponsor', '', '', 'income_sponsor', 'Income_sponsorToTenants', 'many'),
            new Relation('orphan_sponsorship', '', '', 'orphan_sponsorship', 'Orphan_sponsorshipToTenants', 'many'),
            new Relation('orphans', '', '', 'orphans', 'OrphansToTenants', 'many'),
            new Relation('second_sponsors', '', '', 'second_sponsors', 'Second_sponsorsToTenants', 'many'),
            new Relation('sponsor_sponsorship', '', '', 'sponsor_sponsorship', 'Sponsor_sponsorshipToTenants', 'many'),
            new Relation('sponsors', '', '', 'sponsors', 'SponsorsToTenants', 'many'),
            new Relation('sponsorships', '', '', 'sponsorships', 'SponsorshipsToTenants', 'many'),
            new Relation('spouses', '', '', 'spouses', 'SpousesToTenants', 'many'),
            new Relation('users', '', '', 'users', 'TenantsToUsers', 'many')
        ],
        modelSchema: (TenantsCreateInputSchema as any)
            .partial()
            .or((TenantsUncheckedCreateInputSchema as any).partial()),
        createSchema: TenantsCreateArgsSchema,
        createManySchema: TenantsCreateManyArgsSchema,
        findUniqueSchema: TenantsFindUniqueArgsSchema,
        findSchema: TenantsFindFirstArgsSchema,
        updateSchema: TenantsUpdateArgsSchema,
        updateManySchema: TenantsUpdateManyArgsSchema,
        upsertSchema: TenantsUpsertArgsSchema,
        deleteSchema: TenantsDeleteArgsSchema,
        deleteManySchema: TenantsDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof TenantsUncheckedCreateInputSchema>,
        Prisma.TenantsCreateArgs['data'],
        Prisma.TenantsUpdateArgs['data'],
        Prisma.TenantsFindFirstArgs['select'],
        Prisma.TenantsFindFirstArgs['where'],
        Prisma.TenantsFindUniqueArgs['where'],
        Omit<Prisma.TenantsInclude, '_count'>,
        Prisma.TenantsFindFirstArgs['orderBy'],
        Prisma.TenantsScalarFieldEnum,
        TenantsGetPayload
    >,
    users: {
        fields: new Map([
            ['id', 'UUID'],
            ['first_name', 'TEXT'],
            ['last_name', 'TEXT'],
            ['phone', 'TEXT'],
            ['email', 'TEXT'],
            ['email_verified_at', 'TIMESTAMP'],
            ['password', 'TEXT'],
            ['remember_token', 'TEXT'],
            ['tenant_id', 'TEXT'],
            ['created_at', 'TIMESTAMP'],
            ['updated_at', 'TIMESTAMP']
        ]),
        relations: [
            new Relation('orphans_orphans_created_byTousers', '', '', 'orphans', 'orphans_created_byTousers', 'many'),
            new Relation('orphans_orphans_deleted_byTousers', '', '', 'orphans', 'orphans_deleted_byTousers', 'many'),
            new Relation('sessions', '', '', 'sessions', 'SessionsToUsers', 'many'),
            new Relation('settings', '', '', 'settings', 'SettingsToUsers', 'many'),
            new Relation(
                'sponsors_sponsors_created_byTousers',
                '',
                '',
                'sponsors',
                'sponsors_created_byTousers',
                'many'
            ),
            new Relation(
                'sponsors_sponsors_deleted_byTousers',
                '',
                '',
                'sponsors',
                'sponsors_deleted_byTousers',
                'many'
            ),
            new Relation('tenants', 'tenant_id', 'id', 'tenants', 'TenantsToUsers', 'one')
        ],
        modelSchema: (UsersCreateInputSchema as any).partial().or((UsersUncheckedCreateInputSchema as any).partial()),
        createSchema: UsersCreateArgsSchema,
        createManySchema: UsersCreateManyArgsSchema,
        findUniqueSchema: UsersFindUniqueArgsSchema,
        findSchema: UsersFindFirstArgsSchema,
        updateSchema: UsersUpdateArgsSchema,
        updateManySchema: UsersUpdateManyArgsSchema,
        upsertSchema: UsersUpsertArgsSchema,
        deleteSchema: UsersDeleteArgsSchema,
        deleteManySchema: UsersDeleteManyArgsSchema
    } as TableSchema<
        z.infer<typeof UsersUncheckedCreateInputSchema>,
        Prisma.UsersCreateArgs['data'],
        Prisma.UsersUpdateArgs['data'],
        Prisma.UsersFindFirstArgs['select'],
        Prisma.UsersFindFirstArgs['where'],
        Prisma.UsersFindUniqueArgs['where'],
        Omit<Prisma.UsersInclude, '_count'>,
        Prisma.UsersFindFirstArgs['orderBy'],
        Prisma.UsersScalarFieldEnum,
        UsersGetPayload
    >
}

export const schema = new DbSchema(tableSchemas, migrations)
export type Electric = ElectricClient<typeof schema>
export const JsonNull = { __is_electric_json_null__: true }
